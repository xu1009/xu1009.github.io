<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BlogXu</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xu1009.github.io/"/>
  <updated>2017-09-25T13:07:51.460Z</updated>
  <id>http://xu1009.github.io/</id>
  
  <author>
    <name>xu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>zookeeper</title>
    <link href="http://xu1009.github.io/2017/09/25/zookeeper/"/>
    <id>http://xu1009.github.io/2017/09/25/zookeeper/</id>
    <published>2017-09-25T13:04:57.000Z</published>
    <updated>2017-09-25T13:07:51.460Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>zookeeper是一种为分布式应用设计的高可用，高性能且一致的开源协调服务，他提供了一项基本服务：分布式锁服务，还有配置维护，组维护，分布式消息队列，分布式通知/协调。一致性、可用性和容错性，使用的是Zab协议，数据结构Znode，原语、通知机制–watch机制。</p>
</blockquote>
<h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p>zk拥有一个层次的命名空间，如下：<br><img src="http://images.cnitblog.com/blog/671563/201411/301534562152768.png" alt=""></p>
<ul>
<li>Znode通过路径引用，就像Unix中的文件路径，路径必须是绝对的，因为他们必须由斜杠字符来开头，还必须是唯一的，/zookeeper用来保存管理信息，比如关键配额信息。</li>
<li>Znode兼具文件和目录两种特点，每个znode由三部分组成，首先是stat，表示状态信息，描述该节点的版本，权限等信息，然后是data，这个是当前节点存储的数据，最后是children，表示Znode下的子节点。<br>节点存储的信息也是很小的，最大只能是1M，通常情况下要比这个小的多，存储的都是配置信息，状态信息，汇集位置等等，管理调度数据。</li>
<li>数据访问，存储的数据要被原子性操作，要么完成要么失败，每个节点还有自己的ACL,规定了用户权限。</li>
<li>节点类型，临时节点，该节点就是存活在回话还没结束的情况下，一旦回话结束，临时节点就会被自动删除，临时节点不允许有子节点。还有就是顺序节点，除非用户删除，不然会一直存在。顺序节点，路径结尾加一个递增的计数，这个计数对于此节点父节点是唯一的，计数值大于一定值时，计数器会溢出。</li>
<li>watch，客户端可以在节点上设置watch，这就是监视器，当该节点的状态发生变化时，将会触发watch对应的操作，然后会向客户端发送一条通知，然后watch失效，客户端需要重新注册。<h3 id="zk中的时间"><a href="#zk中的时间" class="headerlink" title="zk中的时间"></a>zk中的时间</h3></li>
<li>Zxid，使得zk节点状态改变的每一个操作将使节点接收到一个Zxid格式的时间戳，时间戳全局有序，每个节点维护三个Zxid值，分别为：cZxid、mZxid、pZxid，分别是节点创建的时间戳，节点修改时间，第三个不知道是啥。Zxid是一个64位的数字，高32位是epoch用来标识leader关系是否改变，每次一个leader被选出来，它都会有一个新的epoch，低32位是个递增数。版本号，对节点每一个操作都致使这个节点版本号增加，每个节点维护着三个版本号，首先是version节点数据版本号，cversion节点版本号，aversion节点所拥有的acl版本号。<br>节点属性如下：</li>
</ul>
<p><img src="http://images.cnitblog.com/blog/671563/201411/301534569026625.png" alt=""></p>
<h3 id="zk服务中的操作"><a href="#zk服务中的操作" class="headerlink" title="zk服务中的操作"></a>zk服务中的操作</h3><p><img src="http://images.cnitblog.com/blog/671563/201411/301534572468352.png" alt=""></p>
<p>更新ZooKeeper操作是有限制的。delete或setData必须明确要更新的Znode的版本号，我们可以调用exists找到。如果版本号不匹配，更新将会失败。</p>
<p>更新ZooKeeper操作是非阻塞式的。因此客户端如果失去了一个更新(由于另一个进程在同时更新这个Znode)，他可以在不阻塞其他进程执行的情况下，选择重新尝试或进行其他操作</p>
<h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><blockquote>
<p>ZooKeeper可以为所有的读操作设置watch，这些读操作包括：exists()、getChildren()及getData()。watch事件是一次性的触发器，当watch的对象状态发生改变时，将会触发此对象上watch所对应的事件。watch事件将被异步地发送给客户端，并且ZooKeeper为watch机制提供了有序的一致性保证。理论上，客户端接收watch事件的时间要快于其看到watch对象状态变化的时间。</p>
</blockquote>
<p>① 一个成功的setData操作将触发Znode的数据watch</p>
<p>② 一个成功的create操作将触发Znode的数据watch以及孩子watch</p>
<p>③ 一个成功的delete操作将触发Znode的数据watch以及孩子watch</p>
<p>ZooKeeper所管理的watch可以分为两类：</p>
<p>① 数据watch(data  watches)：getData和exists负责设置数据watch<br>② 孩子watch(child watches)：getChildren负责设置孩子watch</p>
<h3 id="Master选举"><a href="#Master选举" class="headerlink" title="Master选举"></a>Master选举</h3><p>在分布式锁服务中，有一种最典型应用场景，就是通过对集群进行Master选举，来解决分布式系统中的单点故障。什么是分布式系统中的单点故障：通常分布式系统采用主从模式，就是一个主控机连接多个处理节点。主节点负责分发任务，从节点负责处理任务，当我们的主节点发生故障时，那么整个系统就都瘫痪了，那么我们把这种故障叫作单点故障。</p>
<p>传统方式是使用备用主机，不断向master发送ping包，来确定master是否存活，如果没收到ack就认为master挂了，自己会启动一个新实例，但是这样会存在一个问题，那就是网络问题，其实master没有挂，但是由于网络问题，备用主机没有收到master的ack，这时候自己会启动实例，这就会导致服务存在双master，导致系统混乱。</p>
<p>看看zk的解决方式，虽然不能解决网络问题，但是能保证每个时刻只存在一个master</p>
<p><img src="http://images.cnitblog.com/blog/671563/201411/301535008567950.png" alt=""></p>
<p>选取编号最小的节点为主节点，主节点挂掉之后会重新触发一次选举。</p>
<p>下面是配置文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"># The number of milliseconds of each tick</div><div class="line">tickTime=2000</div><div class="line"></div><div class="line"># The number of ticks that the initial</div><div class="line"># synchronization phase can take</div><div class="line"></div><div class="line">initLimit=10</div><div class="line">follower和leader连接同步到leader的初始化连接时间。</div><div class="line"></div><div class="line"># The number of ticks that can pass between</div><div class="line"># sending a request and getting an acknowledgement</div><div class="line">syncLimit=5</div><div class="line">leader和follower之间发送消息时，请求和应答时间长度</div><div class="line"># the directory where the snapshot is stored.</div><div class="line">dataDir=D:/softinstall/zk/zookeeper-3/temp/zookeeper/</div><div class="line">这个目录下需要创建myid存储服务器编号</div><div class="line"># the port at which the clients will connect</div><div class="line">clientPort=2183</div><div class="line">zk监听端口</div><div class="line">#the location of the log file</div><div class="line">dataLogDir=D:/softinstall/zk/zookeeper-3/temp/log/</div><div class="line">日志</div><div class="line">server.0=localhost:2287:3387</div><div class="line">server.1=localhost:2288:3388</div><div class="line">server.2=localhost:2289:3389</div><div class="line"></div><div class="line">server.A=B：C：D</div><div class="line">A：其中 A 是一个数字，表示这个是服务器的编号</div><div class="line">B：是这个服务器的 ip 地址；</div><div class="line">C：Leader选举的端口；</div><div class="line">D：Zookeeper服务器之间的通信端口。</div></pre></td></tr></table></figure></p>
<p>zookeeper不支持递归的删除操作，因此在删除父节点之前必须先删除子节点，delete操作要先比较版本号，乐观锁机制，delete的第二个参数设置为-1可以绕过这个版本检测机制。</p>
<h3 id="zk异常"><a href="#zk异常" class="headerlink" title="zk异常"></a>zk异常</h3><ul>
<li>InterruptedException异常<br>如果操作被中断，就会抛出这个异常，在Java语言中取消阻塞方法会调用interrupt()方法，如果成功取消阻塞方法的话就会抛出这个异常，通常使用这种方法来取消zookeeper操作。</li>
<li>KeeperException异常<br>Zookeeper服务器发出一个错误信号或者服务器存在通信问题，抛出的是这个异常。</li>
</ul>
<p>这个异常通常非为3类：</p>
<ol>
<li>状态异常，操作不能作用于znode树而导致失败，通常是同一时间有另外一个进程正在修改znode，根据版本号这个操作就会失败。</li>
<li>可恢复异常，能够在同一个zookeeper回话中恢复的异常，对于这种异常的处理，要分情况，幂等操作和非幂等操作，幂等是指多次执行不会有影响，比如读请求和更新值，这种就简单重试就行，非幂等操作就不行，因为他们一次操作的结果和多次操作的结果可能不一样。</li>
<li>不可恢复异常，比如会话失效，这种只能重新连接。<h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3>同一台机器上，在相同jvm情况下，锁是靠jvm内部机制实现，但是在分布式系统中，多个进程分布在不同的机器上，这就需要新的锁机制了，zk就有这种功能，分布式锁可以在大型分布式系统中实现领导者选举（这个选举和zk自己的领导选举不一样，主要是为了与主进程保持一致的分布式系统设计），持有锁的那个进程就是系统的领导者。</li>
</ol>
<ul>
<li>一般情况下分布式锁的实现，首先是创建一个作为锁的znode（永久），然后希望获得锁的客户端创建临时顺序子节点作为这个节点的子节点，在任何时间都是顺序号最小的客户端持有锁。</li>
<li>上诉方法会导致羊群效应，什么是羊群效应呢，就是当客户端数量比较大的情况下，每客户端都会在那个节点下创建子节点，并在锁znode上设置观察，每次锁被释放的时候，观察会被触发，zk需要向所有客户端发出通知，但是实际上只又很少一部分需要处理这一事件，最后只有一个客户端成功获得锁，zk发送大量通知会产生峰值流量，这会对zk服务器造成压力，解决这个问题方法是只有前一个顺序号的子节点消失时才需要通知下一个客户端，而不是删除或者创建任何子节点时都需要通知。就是每个子节点只观察自己上一个znode。</li>
<li>这个还有一个问题就是，不能处理因连接丢失而导致的creat操作失败。就是我们创建过程中，连接丢失了，但是我们又不知道是否创建成功，这时候不能简单的重试，因为如果第一次创建成功，重试的话，就会导致有一个节点根本没有进程和他对应，这个节点也就不会被删除，除非会话结束，最后导致死锁，这个解决方法就是在子节点名称中加入ID，自己可以分辨的ID,比如zk提供了获取当前会话的id，这个可以加到里面，这个id是全局唯一的，这样就可以在创建之前检查一下了。<h3 id="zookeeper实现共享锁"><a href="#zookeeper实现共享锁" class="headerlink" title="zookeeper实现共享锁"></a>zookeeper实现共享锁</h3></li>
</ul>
<blockquote>
<p>serverA 和 serverB同时访问serverC上的文件，并同时对该文件执行写操作，如果没有锁的话，导致写入的顺序会混乱，这就需要共享锁了。</p>
</blockquote>
<ul>
<li>利用节点的唯一性，比如加锁时就床架某个节点，其它机器尝试获得锁的时候也创建同样的节点，但是由于节点的唯一性导致无法创建成功，解锁的时候，只需要删除这个节点就行，这个在公司做那个定时任务时，由于服务器的集群，要保证同一时刻只有一个定时任务触发，这就需要共享锁了，这个是将自己ip存到那个节点，每次其它机器都是读取节点的内容和自己的ip对比，释放锁的时候是结束回话，那个临时节点会被自动删除。<br><img src="http://www.uml.org.cn/zjjs/images/2014111912.png" alt=""></li>
<li>利用顺序节点来创建共享锁，这个和前面一样啊，就是节点顺序号最小的获得锁，羊群效应</li>
</ul>
<h3 id="zk简述"><a href="#zk简述" class="headerlink" title="zk简述"></a>zk简述</h3><blockquote>
<p>zk不是用来存储数据的，他的数据都是在replicateddatabase中，这也是一个内存数据库，一般可想而知就不会很大，zk主要存储的是配置信息元数据，协调功能，主要作用是用来维护和监控存储数据的状态变化，通过监控这些数据状态的变化，可以达到基于数据的集群管理，关心的数据，数据量还不是很大的。HDFS则是存储在磁盘上。</p>
</blockquote>
<p>zk作用:</p>
<ol>
<li>集群管理：利用临时节点特性，节点关联的是机器的主机名，ip地址等相关信息，集群单点故障也属于该范畴。</li>
<li>统一命名：利用节点的唯一性和目录节点树结构。</li>
<li>配置管理：节点关联的是配置信息。</li>
<li>分布式锁：节点关联的是要竞争的资源。</li>
</ol>
<h4 id="数据发布和订阅"><a href="#数据发布和订阅" class="headerlink" title="数据发布和订阅"></a>数据发布和订阅</h4><blockquote>
<p>这个就是所谓的配置管理，配置数据发布到zk上，订阅者动态获取数据，实现配置信息的集中式管理和动态更新，比如全局配置信息，地址列表。集中式配置管理在应用集群中是非常常见的，通过在节点上设置watch，在节点状态发生变化时会通知客户端。</p>
</blockquote>
<p>相关应用</p>
<ol>
<li>索引信息和集群中机器节点状态存放在zk一些指定节点，供各个客户端订阅使用。</li>
<li>系统日志（经过处理后）存储，这些日志通常2-3天后被清除</li>
<li>应用中用到的一些全局变量，比如一些消息中间件的消息队列通常有个offset，这个offset存放在zk上，这样集群中每个发送者都能知道当前的发送进度。</li>
<li>配置信息集中管理，应用其中的时候主动获取一次，并在节点上注册一个watcher。</li>
</ol>
<p>如下所示：配置信息放到一个节点，其它客户端设置watcher<br><img src="http://img.blog.csdn.net/20170829141216394?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRzI5MDA5NTE0Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
<h4 id="统一命名服务"><a href="#统一命名服务" class="headerlink" title="统一命名服务"></a>统一命名服务</h4><blockquote>
<p>这个一般都是在rpc框架中使用的，就是通过一个服务名来获得资源服务的地址和提供者信息。像soa上，自己手动在zk上写入的服务名和服务名下的接口名和响应的ip地址和端口，消费者根据服务名和接口名获得相关的服务提供者的地址和端口</p>
</blockquote>
<h4 id="分布通知-协调"><a href="#分布通知-协调" class="headerlink" title="分布通知/协调"></a>分布通知/协调</h4><blockquote>
<p>zk中特有watcher注册与异步通知机制能够很好的实现分布式环境下不同系统之间的通知与协调，实现对数据变更的实时处理。</p>
</blockquote>
<p>相关应用：</p>
<ol>
<li>心跳检测机制：检测系统和被检测系统通过zk上某个节点关联。</li>
<li>系统调度模式：控制台和推送系统，控制台控制推送系统进行相应的推送工作，其实就是使用的watcher</li>
<li>工作汇报模式：就是子任务启动后，会注册一个临时节点，然后去修改这个节点，管理者可以获取这个节点信息。</li>
</ol>
<h4 id="集群管理"><a href="#集群管理" class="headerlink" title="集群管理"></a>集群管理</h4><ol>
<li>集群机器监控<br>实时检测集群机器是否存活<br>master选举<br>相同的业务分布在不同的机器上，有些业务逻辑，例如一些耗时的计算，往往只需要整个集群中的某一台机器进行执行，其余共享这个结果，减少重复劳动，提高性能。</li>
</ol>
<p>这个master选举和锁一样啊？？？？？？？？？</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;zookeeper是一种为分布式应用设计的高可用，高性能且一致的开源协调服务，他提供了一项基本服务：分布式锁服务，还有配置维护，组维护，分布式消息队列，分布式通知/协调。一致性、可用性和容错性，使用的是Zab协议，数据结构Znode，原语、通知机制
    
    </summary>
    
    
      <category term="zookeeper" scheme="http://xu1009.github.io/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>java并发常见问题</title>
    <link href="http://xu1009.github.io/2017/09/18/java%E5%B9%B6%E5%8F%91%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <id>http://xu1009.github.io/2017/09/18/java并发常见问题/</id>
    <published>2017-09-18T06:09:18.000Z</published>
    <updated>2017-09-18T06:09:54.783Z</updated>
    
    <content type="html"><![CDATA[<h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><blockquote>
<p>volatile 就是为了保证可见性和有序性，并不能保证原子性，多用于一个写线程，多个读线程的情况。</p>
</blockquote>
<ul>
<li>将当前处理器缓存行的数据会写回到系统内存。</li>
<li>这个写回内存的操作会引起在其他CPU里缓存了该内存地址的数据无效，强制其它处理器重新从主存中加载。<h2 id="synchronize"><a href="#synchronize" class="headerlink" title="synchronize"></a>synchronize</h2><blockquote>
<p>同步关键字，jdk内部机制，1.6优化了很多，可重入锁。</p>
</blockquote>
</li>
</ul>
<p>加锁对象</p>
<ul>
<li>对于同步方法，锁是当前实例对象。</li>
<li>对于静态同步方法，锁是当前对象的Class对象。</li>
<li>对于同步方法块，锁是Synchonized括号里配置的对象。</li>
</ul>
<p>同步机制</p>
<p>JVM基于进入和退出Monitor来实现方法和代码块同步，每个对象都对应一个monitor，当monitor被持有后，他就被锁定，其它线程执行monitorenter指令时，就会被阻塞。</p>
<p>锁分类和升级</p>
<p>1.6中为了减少获得锁和释放锁所带来的性能消耗，引入了偏向锁和轻量级锁，这样锁的状态就有四种了，无锁状态，偏向锁，轻量级锁，重量级锁，而且锁只能升级不能降级。</p>
<blockquote>
<p>偏向锁，当一个线程访问同步块并获取到锁时，会在对象头和栈帧中的锁记录里存储锁偏向的线程ID，以后该线程进入和退出同步块时不需要花费CAS操作来加锁解锁，，而只需简单的测试一下对象头的Mark Word里是否存储着指向当前线程的偏向锁，如果测试成功，表示线程已经获得了锁，如果测试失败，则需要再测试下Mark Word中偏向锁的标识是否设置成1（表示当前是偏向锁），如果没有设置，则使用CAS竞争锁，如果设置了，则尝试使用CAS将对象头的偏向锁指向当前线程。<br>偏向锁的撤销：偏向锁使用了一种等到竞争出现才释放锁的机制，所以当其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁。偏向锁的撤销，需要等待全局安全点（在这个时间点上没有字节码正在执行），它会首先暂停拥有偏向锁的线程，然后检查持有偏向锁的线程是否活着，如果线程不处于活动状态，则将对象头设置成无锁状态，如果线程仍然活着，拥有偏向锁的栈会被执行，遍历偏向对象的锁记录，栈中的锁记录和对象头的Mark Word要么重新偏向于其他线程，要么恢复到无锁或者标记对象不适合作为偏向锁，最后唤醒暂停的线程。下图中的线程1演示了偏向锁初始化的流程，线程2演示了偏向锁撤销的流程。<br><img src="http://ifeve.com/wp-content/uploads/2012/10/%E5%81%8F%E5%90%91%E9%94%81%E7%9A%84%E6%92%A4%E9%94%80.png" alt=""></p>
</blockquote>
<ul>
<li><p>轻量级锁<br>轻量级锁加锁：线程在执行同步块之前，JVM会先在当前线程的栈桢中创建用于存储锁记录的空间，并将对象头中的Mark Word复制到锁记录中，官方称为Displaced Mark Word。然后线程尝试使用CAS将对象头中的Mark Word替换为指向锁记录的指针。如果成功，当前线程获得锁，如果失败，表示其他线程竞争锁，当前线程便尝试使用自旋来获取锁。</p>
<p>  轻量级锁解锁：轻量级解锁时，会使用原子的CAS操作来将Displaced Mark Word替换回到对象头，如果成功，则表示没有竞争发生。如果失败，表示当前锁存在竞争，锁就会膨胀成重量级锁。下图是两个线程同时争夺锁，导致锁膨胀的流程图。<br><img src="http://ifeve.com/wp-content/uploads/2012/10/%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81.png" alt=""></p>
</li>
</ul>
<h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>线程池好处</p>
<ul>
<li>降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗</li>
<li>提高响应速度。当任务到达时，任务可以不需要的等到线程创建就能立即执行</li>
<li>提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控</li>
</ul>
<p>线程池的流程</p>
<p><img src="http://ifeve.com/wp-content/uploads/2012/12/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%B8%BB%E8%A6%81%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.jpg" alt=""></p>
<ol>
<li>首先判断基本线程池满了没，如果满了，就进入下一个流程，没满就创建新线程执行任务。</li>
<li>判断队列是否满了，满了进入下一个流程，没满就将任务放入阻塞队列。</li>
<li>判断最大线程池满了没，满了就执行饱和策略，没满就创建新线程执行任务。</li>
</ol>
<p>线程池就是和阻塞队列搭配使用，限制了线程的数量，将任务放到阻塞队列中，然后线程池中的线程从阻塞队列中取出任务执行。</p>
<h3 id="concurrentHashMap"><a href="#concurrentHashMap" class="headerlink" title="concurrentHashMap"></a>concurrentHashMap</h3><blockquote>
<p>hash 算法是一种将任意内容输入转换成相同长度输出的加密方式，其输出被称为哈希值。</p>
<p>哈希表 根据设定的hash函数和处理冲突方法将一组关键字映射到一个有限的地址区间上，这个哈希值作为记录在表中的存储位置，这种表称为hash表或者散列，所得存储位置称为哈希地址或者散列地址。</p>
</blockquote>
<ul>
<li>hashMap不是线程安全的，主要是看内部源码实现，这个内部是数组+链表的拉链式存储结构，数组中的位置通过散列来确定，还有就是超过一定容量要进行再散列。</li>
<li>hashtable 效率很低下，因为他使用的是synchronize来保证线程安全的，在线程竞争激烈的情况下效率非常低下，当一个线程添加元素时，其它线程既不能添加也不能读取元素，所以效率非常低下。</li>
<li>concurrentHashMap，实现分段式加锁，数据进行分段，每一段数据配一把锁，这样就不会造成所有线程竞争一把锁，</li>
</ul>
<p>segment数组，数组内容是类似于hashmap的存储结构，这里segment实现了锁，数组长度就相当于将数据分段了。</p>
<p>concurrencyLevel决定segment数组长度，segment数组长度必须是2的N次幂，为了方便通过按位与的算法确定元素在数组中的位置。concurrencyLevel最大为65535，这也就说明，segment数组的长度最大为65536。</p>
<p>对于segment就和hashmap差不多了，有负载因子，初始化concurrentHashMap的时候，会有一个初始化容量，知道segment的长度就可以确定每个segment中的hashentry的长度，这个也是2的N次幂，这个容量有个阈值，就是理论长度和负载因子成绩，超过这个就会进行再散列。</p>
<p>concurrentHashMap的再散列，极大避免了散列冲突。</p>
<p>get操作不需要加锁，get操作中要使用的共享变量都定义成volatile，保证每次读取到的都是最新的值，写操作是单线程的。</p>
<p>put操作共享变量时必须加锁，put的时候先判断是否需要对segment里的hashentry数组进行扩容，然后再插入数据到数组中。</p>
<p>concurrentHashMap的扩容是对单个segment进行扩容的。</p>
<h3 id="原子操作"><a href="#原子操作" class="headerlink" title="原子操作"></a>原子操作</h3><p>32位IA-32处理器使用基于对缓存加锁或总线加锁的方式来实现多处理器之间的原子操作。</p>
<h4 id="Java中的原子操作"><a href="#Java中的原子操作" class="headerlink" title="Java中的原子操作"></a>Java中的原子操作</h4><blockquote>
<p>java中可以通过锁和循环CAS的方式来实现原子操作。</p>
</blockquote>
<p>自旋CAS就是不断循环直进行CAS操作直到成功为止。</p>
<p>CAS的问题</p>
<ul>
<li>ABA问题，因为CAS需要在操作值的时候检查下值有没有发生变化，如果没有发生变化则更新，但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时会发现它的值没有发生变化，但是实际上却变化了。ABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加一，那么A－B－A 就会变成1A-2B－3A。atmoic包里提供了一个类AtomicStampedReference来解决ABA问题，这个类的cas会检查引用和标志是否都相等。</li>
<li>循环时间长开销大，主要是如果自旋cas长时间不成功，那么就会给cpu带来非常大的开销。</li>
<li>只能保证一个共享变量的原子操作，从Java1.5开始JDK提供了AtomicReference类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行CAS操作。</li>
</ul>
<h3 id="ConcurrentLinkedQueue非阻塞队列线程安全"><a href="#ConcurrentLinkedQueue非阻塞队列线程安全" class="headerlink" title="ConcurrentLinkedQueue非阻塞队列线程安全"></a>ConcurrentLinkedQueue非阻塞队列线程安全</h3><blockquote>
<p>基于链节点的无界线程安全队列，FIFO。采用非阻塞的方式实现了这个线程安全队列。</p>
</blockquote>
<p>head节点和tail节点，如果tail节点的next节点为空，那么tail节点不变，入队节点设置成tail节点的next节点，如果tail节点next非空，那么入队节点就紧跟着，然后tail节点设置成入队节点。</p>
<ul>
<li>入队过程<br>入队过程主要是干了两件事，一个是确定尾节点，另一个是使用CAS算法将入队节点设置成尾节点的next，不成功就会不断重试，循环CAS。</li>
</ul>
<p>尾节点不是设置成入队节点，为了减少cas循环次数，每次都更新tail节点就会在每次入队节点时都会使用cas去更新tail，这样会降低效率，所以设置了hops来控制tail和尾节点之间的距离。<br><img src="http://ifeve.com/wp-content/uploads/2013/01/ConcurrentLinekedQueue%E9%98%9F%E5%88%97%E5%85%A5%E9%98%9F%E7%BB%93%E6%9E%84%E5%8F%98%E5%8C%96%E5%9B%BE.jpg" alt=""></p>
<ul>
<li>出队过程<br><img src="http://ifeve.com/wp-content/uploads/2013/01/%E5%87%BA%E9%98%9F%E5%88%97.jpg" alt=""></li>
</ul>
<p>出队更新的是head节点，但不是每次出队都会更新head节点，也和tail一样使用hops来控制的，提高出队效率。</p>
<h3 id="线程安全阻塞队列"><a href="#线程安全阻塞队列" class="headerlink" title="线程安全阻塞队列"></a>线程安全阻塞队列</h3><p>阻塞队列就是加了两个附加操作，队列满时加入任务就会阻塞，队列空时取元素会阻塞。</p>
<ul>
<li>ArrayBlockingQueue 数组实现的有界阻塞队列，FIFO</li>
<li>LinkedBlockingQueue 有界，FIFO</li>
<li>PriorityBlockingQueue 无界，</li>
<li>DelayQueue 支持延时获取元素的无界阻塞队列，应用场景通常是缓存和定时任务。</li>
<li>LinkedBlockingDeque，双向阻塞队列</li>
</ul>
<h3 id="Fork-Join框架"><a href="#Fork-Join框架" class="headerlink" title="Fork/Join框架"></a>Fork/Join框架</h3><blockquote>
<p>Fork/Join框架就是将一个大任务分割成若干个小任务，最终汇总每个小任务结果后得到大任务结果的框架。</p>
</blockquote>
<ul>
<li>工作窃取算法（work-stealing）<br>某个线程从其他队列里窃取任务来执行。</li>
</ul>
<p>比如一个大任务，分割成若干个子任务，为了减少线程间的竞争，把这些子任务分配到不同队列中，然后每个队列创建一个线程来处理队列中的任务，当处理完自己的任务时，这个线程可以去其它队列中窃取任务执行，而且为了减少线程的竞争，这些队列通常是双端队列，窃取任务的线程和正常的线程分别从两端取任务执行。</p>
<p>Fork/Join框架步骤</p>
<ol>
<li>fork类把大任务分割成小任务</li>
<li>执行任务合并结果，分割的子任务放到双端队列里，启动几个线程去到队列里面取任务执行。子任务执行完的结果都统一放到一个队列里面，然后启动一个线程去合并这些结果。<br>下面是简单的例子<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Forkjoin</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> start;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> end;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> THREAD = <span class="number">2</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Forkjoin</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.start = start;</div><div class="line">        <span class="keyword">this</span>.end = end;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">compute</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">boolean</span> canCompute = (end - start) &lt;= THREAD;</div><div class="line">        <span class="keyword">if</span> (canCompute)&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= end; i++)</div><div class="line">                sum += i;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">int</span> middle = (end + start) / <span class="number">2</span>;</div><div class="line">            Forkjoin task1 = <span class="keyword">new</span> Forkjoin(start, middle);</div><div class="line">            Forkjoin task2 = <span class="keyword">new</span> Forkjoin(middle + <span class="number">1</span>, end);</div><div class="line">            task1.fork();</div><div class="line">            task2.fork();</div><div class="line">            <span class="keyword">int</span> res1 = (<span class="keyword">int</span>) task1.join();</div><div class="line">            <span class="keyword">int</span> res2 = (<span class="keyword">int</span>) task2.join();</div><div class="line">            sum = res1 + res2;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</div><div class="line">        ForkJoinPool forkJoinPool = <span class="keyword">new</span> ForkJoinPool();</div><div class="line">        Forkjoin forkjoin = <span class="keyword">new</span> Forkjoin(<span class="number">1</span>,<span class="number">1000</span>);</div><div class="line">        Future future = forkJoinPool.submit(forkjoin);</div><div class="line">        System.out.println(future.get());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>调用fork方法时，程序调用pushTask方法异步的执行这个任务，然后立即返回结果，先将任务存到queue里，然后再唤醒或者创建一个工作线程执行这个任务。</p>
<p>join的话就是阻塞当前线程并等待获取结果。</p>
<h3 id="Copy-Ob-Write"><a href="#Copy-Ob-Write" class="headerlink" title="Copy-Ob-Write"></a>Copy-Ob-Write</h3><blockquote>
<p>写时复制的容器，当我们往一个容器添加元素的时候，不直接往当前元素添加，而是先将当前容器进行copy，然后将元素添加到新的copy里面，最后将原来的容器的引用指向新的容器。读写分离，读和写不同的容器，好处是进行并发读不需要加锁。</p>
</blockquote>
<p>CopyOnWrite并发容器用于读多写少的并发场景。</p>
<blockquote>
<p>谈一下并发为什么会出问题呢，首先说一下原子操作，并发情况下，调度算法会分给每个操作一个时间段，这就会导致不是原子操作的情况下，操作会被中断然后被另一个线程占用，这就会出现问题，所以要保证原子操作，一个是使用锁或者同步关键字，最后就是concurrent并发包中的原子类，CAS操作，然后就是由于Java的内存模型，各线程有自己的工作内存，然后还有一个主内存，线程直接交互的是自己的工作内存，这就导致在并发情况下的缓存一致性问题，解决这个问题有两种办法，一种就是加锁，另一个就是缓存一致性协议，比如volatile修饰的变量，每次这个变量被写入的时候，会被立即刷新到主内存，其它线程对这个变量的缓存都会失效，然后会从主内存中从新读取，这样是很轻量级的同步，这里就引入了happens before原则，volatile就满足Java先天的满足这个原则的，这个说明的是，前面操作的结果对后一个操作的结果可见，这个只是说明的前一个操作结果对后一个的影响，没有说明时间上发生的顺序，时间上发生的前后并不一定满足这个原则，所以加上volatile就会保证这个可见性。还有一个问题就是因为编译器和系统环境的优化问题，会存在几个重排序，一个是编译器级别的重排序，一个是系统给的重排序，这个在单线程中不会导致什么问题，但是在并发情况下还会出现问题，解决这个问题目前最常见的是volatile关键字，这个关键字底层的实现就是编译器加了一个内存屏障，这个内存屏障的作用就是保证该条操作的前后的顺序不会改变，但是不保证前面或者后面的顺序，就是他会保证程序顺序情况下，在他前面发生的还是在他前面发生，后面的也是，但是不保证前后的单独部分的重排序问题。所以其实volatile解决了两个问题，一个是缓存一致性问题，一个是重排序的问题，其中缓存一致性问题只是保证了当前变量的写入会被立即刷新到主内存，而且其它未发生的读取线程的对于该变量的缓存会失效，重新读取。但是你要是想看到这个结果，实际上，就必须要求那个变量的写入在读的操作之前。那些文章中说的happens before原则不一定是前后发生的，这个是因为重排序问题导致的。说的只是同一个线程内部肯定满足happens before原子，但是又因为重排序的问题才会说这个的，其实和那个volatile没关系。并发最后就是让在并发情况下的发生的结果和顺序情况下的一样。这样就显得很明了了。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;volatile&quot;&gt;&lt;a href=&quot;#volatile&quot; class=&quot;headerlink&quot; title=&quot;volatile&quot;&gt;&lt;/a&gt;volatile&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;volatile 就是为了保证可见性和有序性，并不能保证原子性，多
    
    </summary>
    
    
      <category term="并发 Java" scheme="http://xu1009.github.io/tags/%E5%B9%B6%E5%8F%91-Java/"/>
    
  </entry>
  
  <entry>
    <title>java并发基础</title>
    <link href="http://xu1009.github.io/2017/09/18/java%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/"/>
    <id>http://xu1009.github.io/2017/09/18/java并发基础/</id>
    <published>2017-09-18T06:07:52.000Z</published>
    <updated>2017-09-18T06:08:41.339Z</updated>
    
    <content type="html"><![CDATA[<h3 id="线程控制逃逸规则"><a href="#线程控制逃逸规则" class="headerlink" title="线程控制逃逸规则"></a>线程控制逃逸规则</h3><p>如果一个资源的创建，使用，销毁都在同一个线程内完成，且永远不会脱离该线程的控制，则该资源的使用就是线程安全的。</p>
<p>竞态条件：当多个线程同时访问同一个资源，并且其中改的一个或者多个线程对这个资源进行了写操作，才会产生静态条件，多个线程同时读取一个资源不会产生竞态条件。</p>
<h3 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h3><p>线程独享栈，线程共享堆<br><img src="http://tutorials.jenkov.com/images/java-concurrency/java-memory-model-1.png" alt=""></p>
<p>下面是栈和堆的存储类型</p>
<p><img src="http://tutorials.jenkov.com/images/java-concurrency/java-memory-model-2.png" alt=""></p>
<p>Java内存模型和硬件内存架构之间的关系</p>
<p>通常情况下，当一个CPU需要读取主存时，它会将主存的部分读到CPU缓存中。它甚至可能将缓存中的部分内容读到它的内部寄存器中，然后在寄存器中执行操作。当CPU需要将结果写回到主存中去时，它会将内部寄存器的值刷新到缓存中，然后在某个时间点将值刷新回主存。</p>
<p>Java内存模型与硬件内存架构之间存在差异。硬件内存架构没有区分线程栈和堆。对于硬件，所有的线程栈和堆都分布在主内中。部分线程栈和堆可能有时候会出现在CPU缓存中和CPU内部的寄存器中。如下图所示：<br><img src="http://tutorials.jenkov.com/images/java-concurrency/java-memory-model-5.png" alt=""></p>
<p>这样的内存模型会带来一些问题</p>
<ul>
<li>线程对共享变量修改的可见性（volatile）</li>
<li>读写和检查共享变量时出现竞争条件（同步）<h3 id="同步关键字（synchronize）"><a href="#同步关键字（synchronize）" class="headerlink" title="同步关键字（synchronize）"></a>同步关键字（synchronize）</h3></li>
</ul>
<p>同步代码块保证一次只有一个线程可以进入，同时保证变量的修改会被立即刷新到主存，读取也是从主存中先刷新到缓存，就是保证了可见性。</p>
<p>其实就是对于一些非原子操作保证其线程安全</p>
<p>同步块包括四种：</p>
<ol>
<li>实例方法</li>
<li>静态方法</li>
<li>实例方法中的同步块</li>
<li>静态方法中的同步块</li>
</ol>
<p>实例方法同步<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</div><div class="line"><span class="keyword">this</span>.count += value;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Java实例方法同步是同步在拥有该方法的对象上。这样，每个实例其方法同步都同步在不同的对象上，即该方法所属的实例。只有一个线程能够在实例方法同步块中运行。如果有多个实例存在，那么一个线程一次可以在一个实例同步块中执行操作。一个实例一个线程。</p>
<p>静态方法同步</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</div><div class="line"> count += value;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>静态方法的同步是指同步在该方法所在的类对象上。因为在Java虚拟机中一个类只能对应一个类对象，所以同时只允许一个线程执行同一个类中的静态同步方法。</p>
<p>实例方法中的同步块</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</div><div class="line">       <span class="keyword">this</span>.count += value;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>注意Java同步块构造器用括号将对象括起来。在上例中，使用了“this”，即为调用add方法的实例本身。在同步构造器中用括号括起来的对象叫做监视器对象。上述代码使用监视器对象同步，同步实例方法使用调用方法本身的实例作为监视器对象。</p>
<p>静态方法中的同步块</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">log1</span><span class="params">(String msg1, String msg2)</span></span>&#123;</div><div class="line">       log.writeln(msg1);</div><div class="line">       log.writeln(msg2);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">log2</span><span class="params">(String msg1, String msg2)</span></span>&#123;</div><div class="line">       <span class="keyword">synchronized</span>(MyClass.class)&#123;</div><div class="line">          log.writeln(msg1);</div><div class="line">          log.writeln(msg2);</div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>如果第二个同步块不是同步在MyClass.class这个对象上。那么这两个方法可以同时被线程访问。</p>
<p>同步的对象不一样，一个同步的是类，一个同步的是类对象的实例，这个很关键。</p>
<h4 id="线程间的通信"><a href="#线程间的通信" class="headerlink" title="线程间的通信"></a>线程间的通信</h4><ul>
<li>通过共享对象通信<br>最简单的方式，线程共享一个对象，一个线程修改对象状态，其它线程读取对象状态，</li>
<li>忙等待<br>准备处理数据的线程B正在等待数据变为可用。换句话说，它在等待线程A的一个信号，这个信号使hasDataToProcess()返回true。线程B运行在一个循环里，以等待这个信号：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> MySignal sharedSignal = ...</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="keyword">while</span>(!sharedSignal.hasDataToProcess())&#123;</div><div class="line">  <span class="comment">//do nothing... busy waiting</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>wait()，notify()，notifyAll()<br>忙等待没有对运行等待线程的CPU进行有效的利用，除非平均等待时间非常短。否则，让等待线程进入睡眠或者非运行状态更为明智，直到它接收到它等待的信号。<br>Java有一个内建的等待机制来允许线程在等待信号的时候变为非运行状态。java.lang.Object 类定义了三个方法，wait()、notify()和notifyAll()来实现这个等待机制。</li>
</ul>
<p>这个就是线程调用wait方法时进入等待状态，并释放了监视器锁，让其它线程去竞争锁，如果有线程调用了notify方法，则随机一个线程会被唤醒，当然唤醒之后还要去竞争锁，只有竞争到了锁才能推出wait方法。notifyAll是唤醒所有当前对象的等待状态的线程</p>
<ul>
<li>丢失的信号<br>notify()和notifyAll()方法不会保存调用它们的方法，因为当这两个方法被调用时，有可能没有线程处于等待状态。通知信号过后便丢弃了。因此，如果一个线程先于被通知线程调用wait()前调用了notify()，等待的线程将错过这个信号。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWaitNotify2</span></span>&#123;</div><div class="line"></div><div class="line">  MonitorObject myMonitorObject = <span class="keyword">new</span> MonitorObject();</div><div class="line">  <span class="keyword">boolean</span> wasSignalled = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWait</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">synchronized</span>(myMonitorObject)&#123;</div><div class="line">      <span class="keyword">if</span>(!wasSignalled)&#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">          myMonitorObject.wait();</div><div class="line">         &#125; <span class="keyword">catch</span>(InterruptedException e)&#123;...&#125;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">//clear signal and continue running.</span></div><div class="line">      wasSignalled = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doNotify</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">synchronized</span>(myMonitorObject)&#123;</div><div class="line">      wasSignalled = <span class="keyword">true</span>;</div><div class="line">      myMonitorObject.notify();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>留意doNotify()方法在调用notify()前把wasSignalled变量设为true。同时，留意doWait()方法在调用wait()前会检查wasSignalled变量。事实上，如果没有信号在前一次doWait()调用和这次doWait()调用之间的时间段里被接收到，它将只调用wait()。</p>
<ul>
<li>假唤醒<br>由于莫名其妙的原因，线程有可能在没有调用过notify()和notifyAll()的情况下醒来。这就是所谓的假唤醒（spurious wakeups）。无端端地醒过来了。</li>
</ul>
<p>如果在MyWaitNotify2的doWait()方法里发生了假唤醒，等待线程即使没有收到正确的信号，也能够执行后续的操作。这可能导致你的应用程序出现严重问题。</p>
<p>为了防止假唤醒，保存信号的成员变量将在一个while循环里接受检查，而不是在if表达式里。这样的一个while循环叫做自旋锁（校注：这种做法要慎重，目前的JVM实现自旋会消耗CPU，如果长时间不调用doNotify方法，doWait方法会一直自旋，CPU会消耗太大）。被唤醒的线程会自旋直到自旋锁(while循环)里的条件变为false。以下MyWaitNotify2的修改版本展示了这点：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWaitNotify3</span></span>&#123;</div><div class="line"></div><div class="line">  MonitorObject myMonitorObject = <span class="keyword">new</span> MonitorObject();</div><div class="line">  <span class="keyword">boolean</span> wasSignalled = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWait</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">synchronized</span>(myMonitorObject)&#123;</div><div class="line">      <span class="keyword">while</span>(!wasSignalled)&#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">          myMonitorObject.wait();</div><div class="line">         &#125; <span class="keyword">catch</span>(InterruptedException e)&#123;...&#125;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">//clear signal and continue running.</span></div><div class="line">      wasSignalled = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doNotify</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">synchronized</span>(myMonitorObject)&#123;</div><div class="line">      wasSignalled = <span class="keyword">true</span>;</div><div class="line">      myMonitorObject.notify();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>多个线程等待相同信号<br>如果你有多个线程在等待，被notifyAll()唤醒，但只有一个被允许继续执行，使用while循环也是个好方法。每次只有一个线程可以获得监视器对象锁，意味着只有一个线程可以退出wait()调用并清除wasSignalled标志（设为false）。一旦这个线程退出doWait()的同步块，其他线程退出wait()调用，并在while循环里检查wasSignalled变量值。但是，这个标志已经被第一个唤醒的线程清除了，所以其余醒来的线程将回到等待状态，直到下次信号到来。</li>
</ul>
<h4 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h4><p>和线程绑定，每个线程都有自己的私有ThreadLocal<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadTst</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">       <span class="keyword">private</span> ThreadLocal&lt;Integer&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;Integer&gt;();</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            threadLocal.set((<span class="keyword">int</span>) (Math.random() * <span class="number">100</span>D));</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.sleep(<span class="number">100</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            System.out.println(Thread.currentThread().getName() + threadLocal.get());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        MyThread tst = <span class="keyword">new</span> MyThread();</div><div class="line">        Thread thread1 = <span class="keyword">new</span> Thread(tst,<span class="string">"tt"</span>);</div><div class="line">        thread1.start();</div><div class="line">        Thread thread2 = <span class="keyword">new</span> Thread(tst,<span class="string">"rr"</span>);</div><div class="line">        thread2.start();</div><div class="line">        thread1.join();</div><div class="line">        thread2.join();</div><div class="line">        System.out.println(<span class="string">"hello"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="死锁及避免死锁"><a href="#死锁及避免死锁" class="headerlink" title="死锁及避免死锁"></a>死锁及避免死锁</h4><pre><code>循环等待条件会导致死锁，就是A,B两个方法，线程1获得A的锁，然后尝试获得B的锁，线程2获得B的锁然后尝试获得A的锁，这就会形成循环等待，最后形成死锁。
</code></pre><p>避免死锁的方法</p>
<ul>
<li>加锁顺序<br>按照顺序加锁，按照顺序加锁是一种有效的死锁预防机制。但是，这种方式需要你事先知道所有可能会用到的锁(译者注：并对这些锁做适当的排序)，但总有些时候是无法预知的。每次线程都同时竞争同一个锁。</li>
<li><p>加锁时限<br>另外一个可以避免死锁的方法是在尝试获取锁的时候加一个超时时间，这也就意味着在尝试获取锁的过程中若超过了这个时限该线程则放弃对该锁请求。若一个线程没有在给定的时限内成功获得所有需要的锁，则会进行回退并释放所有已经获得的锁，然后等待一段随机的时间再重试。这段随机的等待时间让其它线程有机会尝试获取相同的这些锁，并且让该应用在没有获得锁的时候可以继续运行。线程比较多的情况下可能等待时间是一样的。</p>
</li>
<li><p>死锁检测<br>  每当一个线程获得了锁，会在线程和锁相关的数据结构中（map、graph等等）将其记下。除此之外，每当有线程请求锁，也需要记录在这个数据结构中。</p>
<p>  当一个线程请求锁失败时，这个线程可以遍历锁的关系图看看是否有死锁发生。例如，线程A请求锁7，但是锁7这个时候被线程B持有，这时线程A就可以检查一下线程B是否已经请求了线程A当前所持有的锁。如果线程B确实有这样的请求，那么就是发生了死锁（线程A拥有锁1，请求锁7；线程B拥有锁7，请求锁1）。<br>  检测出死锁就进行回退，释放所有锁。</p>
</li>
</ul>
<h4 id="饥饿与公平"><a href="#饥饿与公平" class="headerlink" title="饥饿与公平"></a>饥饿与公平</h4><p>饥饿原因</p>
<ul>
<li>高优先级吞噬所有低优先级线程的CPU时间</li>
<li>线程被永久堵塞在一个等待进入同步块的状态。</li>
<li>线程在等待一个本身也处于永久等待完成的对象(比如调用这个对象的wait方法)。<h4 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h4>阻塞队列与普通队列的区别在于，当队列是空的时，从队列中获取元素的操作将会被阻塞，或者当队列是满时，往队列里添加元素的操作会被阻塞。</li>
</ul>
<h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><p>保持一定线程数量，线程池内线程一直在运行，避免线程频繁建立和销毁，内部实现是阻塞队列，空闲线程从队列中取出任务执行，</p>
<h4 id="CAS-乐观锁-非阻塞"><a href="#CAS-乐观锁-非阻塞" class="headerlink" title="CAS 乐观锁 非阻塞"></a>CAS 乐观锁 非阻塞</h4><p>CAS（Compare and swap）比较和替换是设计并发算法时用到的一种技术。简单来说，比较和替换是使用一个期望值和一个变量的当前值进行比较，如果当前变量的值与我们期望的值相等，就使用一个新值替换当前变量的值。</p>
<p>volatile多用于单个线程写，多线程读的情况。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;线程控制逃逸规则&quot;&gt;&lt;a href=&quot;#线程控制逃逸规则&quot; class=&quot;headerlink&quot; title=&quot;线程控制逃逸规则&quot;&gt;&lt;/a&gt;线程控制逃逸规则&lt;/h3&gt;&lt;p&gt;如果一个资源的创建，使用，销毁都在同一个线程内完成，且永远不会脱离该线程的控制，则该资源的使
    
    </summary>
    
    
      <category term="并发 Java" scheme="http://xu1009.github.io/tags/%E5%B9%B6%E5%8F%91-Java/"/>
    
  </entry>
  
  <entry>
    <title>head first design pattern</title>
    <link href="http://xu1009.github.io/2017/09/05/head-first-design-pattern/"/>
    <id>http://xu1009.github.io/2017/09/05/head-first-design-pattern/</id>
    <published>2017-09-05T13:45:31.000Z</published>
    <updated>2017-09-06T14:27:44.789Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>　设计模式就是让代码写的规范，什么是规范呢，就是松耦合，高复用，易维护，易拓展，虽然现在很少在平时的代码中考虑这些，不过设计模式并不是一种强制，就如本书作者所说如果发现一种更为简单的方式，就没必要生搬硬套的使用设计模式，设计模式的初衷是让程序猿从复杂的工作中解脱，而不是进入另一个怪圈。</p>
<h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p>策略模式定义了算法族，分别封装起来，让他们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。</p>
</blockquote>
<p>正式的定义往往都那么抽象，策略模式就是封装变化，</p>
<p>策略模式</p>
<p>工厂模式</p>
<p>抽象工厂</p>
<p>装饰器</p>
<p>适配器</p>
<p>外观</p>
<p>观察者模式</p>
<p>单例模式</p>
<p>命令模式</p>
<p>代理模式</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;　设计模式就是让代码写的规范，什么是规范呢，就是松耦合，高复用，易维护，易拓展，虽然现在很少在平时的代码中考虑这些，不过设计模式并不是一种强制，就如本书作者所说如果发现一种更为简单的方式，就没必要生搬硬套的使用设计模式，设计模式的初衷是让程序猿从复
    
    </summary>
    
    
      <category term="design pattern" scheme="http://xu1009.github.io/tags/design-pattern/"/>
    
  </entry>
  
  <entry>
    <title>记录一下大神给推荐的书籍哈</title>
    <link href="http://xu1009.github.io/2017/09/04/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%A4%A7%E7%A5%9E%E7%BB%99%E6%8E%A8%E8%8D%90%E7%9A%84%E4%B9%A6%E7%B1%8D%E5%93%88/"/>
    <id>http://xu1009.github.io/2017/09/04/记录一下大神给推荐的书籍哈/</id>
    <published>2017-09-04T14:23:51.000Z</published>
    <updated>2017-09-04T14:45:46.151Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h1><h3 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h3><ul>
<li>高性能MySQL第三版</li>
<li>MySQL性能调优与架构设计</li>
</ul>
<h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><ul>
<li><a href="http://hedengcheng.com/" target="_blank" rel="external">http://hedengcheng.com/</a></li>
<li><a href="http://mysql.taobao.org/monthly/2016/01/01/" target="_blank" rel="external">http://mysql.taobao.org/monthly/2016/01/01/</a></li>
</ul>
<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h3 id="书籍-1"><a href="#书籍-1" class="headerlink" title="书籍"></a>书籍</h3><ul>
<li>Redis设计与实现</li>
<li>Redis in Action</li>
</ul>
<h3 id="Redis源码注释版"><a href="#Redis源码注释版" class="headerlink" title="Redis源码注释版"></a>Redis源码注释版</h3><ul>
<li><a href="https://github.com/huangz1990/redis-3.0-annotated" target="_blank" rel="external">https://github.com/huangz1990/redis-3.0-annotated</a></li>
</ul>
<h3 id="Redis文档"><a href="#Redis文档" class="headerlink" title="Redis文档"></a>Redis文档</h3><ul>
<li><a href="http://doc.redisfans.com/" target="_blank" rel="external">http://doc.redisfans.com/</a></li>
</ul>
<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h3 id="书籍-2"><a href="#书籍-2" class="headerlink" title="书籍"></a>书籍</h3><ul>
<li>阿里巴巴Java开发手册</li>
<li>Java特种兵</li>
<li>Effective Java</li>
</ul>
<h1 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h1><h3 id="书籍-3"><a href="#书籍-3" class="headerlink" title="书籍"></a>书籍</h3><ul>
<li>从PAXOS到ZOOKEEPER分布式一致性原理与实践</li>
</ul>
<h3 id="博客-1"><a href="#博客-1" class="headerlink" title="博客"></a>博客</h3><ul>
<li><a href="http://nileader.blog.51cto.com/1381108/d-16" target="_blank" rel="external">http://nileader.blog.51cto.com/1381108/d-16</a></li>
<li><a href="http://www.cnblogs.com/sunddenly/p/4138580.html" target="_blank" rel="external">http://www.cnblogs.com/sunddenly/p/4138580.html</a></li>
</ul>
<h1 id="分布式原理"><a href="#分布式原理" class="headerlink" title="分布式原理"></a>分布式原理</h1><h3 id="书籍-4"><a href="#书籍-4" class="headerlink" title="书籍"></a>书籍</h3><ul>
<li>分布式系统原理介绍（百度 刘杰 文档）</li>
<li>大型分布式网站架构设计与实践</li>
</ul>
<h1 id="Java并发"><a href="#Java并发" class="headerlink" title="Java并发"></a>Java并发</h1><h3 id="书籍-5"><a href="#书籍-5" class="headerlink" title="书籍"></a>书籍</h3><ul>
<li>Java并发编程实战</li>
<li>Java并发编程的艺术</li>
</ul>
<h3 id="博客-2"><a href="#博客-2" class="headerlink" title="博客"></a>博客</h3><ul>
<li><a href="http://ifeve.com/" target="_blank" rel="external">http://ifeve.com/</a></li>
</ul>
<h1 id="Java虚拟机"><a href="#Java虚拟机" class="headerlink" title="Java虚拟机"></a>Java虚拟机</h1><h3 id="书籍-6"><a href="#书籍-6" class="headerlink" title="书籍"></a>书籍</h3><ul>
<li>深入理解Java虚拟机：JVM高级特性与最佳实践</li>
</ul>
<h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><ul>
<li><a href="http://www.mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="external">http://www.mybatis.org/mybatis-3/zh/index.html</a></li>
</ul>
<h3 id="博客-3"><a href="#博客-3" class="headerlink" title="博客"></a>博客</h3><ul>
<li><a href="http://blog.csdn.net/column/details/mybatis-principle.html" target="_blank" rel="external">http://blog.csdn.net/column/details/mybatis-principle.html</a></li>
</ul>
<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h3 id="书籍-7"><a href="#书籍-7" class="headerlink" title="书籍"></a>书籍</h3><ul>
<li>精通Spring 4.x -企业应用开发实战</li>
</ul>
<h3 id="文档-1"><a href="#文档-1" class="headerlink" title="文档"></a>文档</h3><ul>
<li><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/" target="_blank" rel="external">https://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/</a></li>
</ul>
<h3 id="博客-4"><a href="#博客-4" class="headerlink" title="博客"></a>博客</h3><ul>
<li><a href="http://jinnianshilongnian.iteye.com/" target="_blank" rel="external">http://jinnianshilongnian.iteye.com/</a></li>
</ul>
<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h3 id="书籍-8"><a href="#书籍-8" class="headerlink" title="书籍"></a>书籍</h3><ul>
<li>设计模式–可复用面向对象软件的基础</li>
</ul>
<h1 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h1><h3 id="书籍-9"><a href="#书籍-9" class="headerlink" title="书籍"></a>书籍</h3><ul>
<li>Netty权威指南</li>
</ul>
<h1 id="高并发"><a href="#高并发" class="headerlink" title="高并发"></a>高并发</h1><h3 id="书籍-10"><a href="#书籍-10" class="headerlink" title="书籍"></a>书籍</h3><ul>
<li>亿级流量网站架构核心技术</li>
</ul>
<h1 id="Java性能优化"><a href="#Java性能优化" class="headerlink" title="Java性能优化"></a>Java性能优化</h1><h3 id="书籍-11"><a href="#书籍-11" class="headerlink" title="书籍"></a>书籍</h3><ul>
<li>Java性能优化权威指南</li>
</ul>
<h1 id="Java-NIO"><a href="#Java-NIO" class="headerlink" title="Java NIO"></a>Java NIO</h1><h3 id="博客-5"><a href="#博客-5" class="headerlink" title="博客"></a>博客</h3><ul>
<li><a href="http://ifeve.com/java-nio-all/" target="_blank" rel="external">http://ifeve.com/java-nio-all/</a></li>
</ul>
<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h3 id="书籍-12"><a href="#书籍-12" class="headerlink" title="书籍"></a>书籍</h3><ul>
<li>算法导论</li>
<li>编程之美</li>
<li>剑指offer</li>
</ul>
<h3 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h3><ul>
<li><a href="https://leetcode.com/" target="_blank" rel="external">https://leetcode.com/</a></li>
</ul>
<h1 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h1><h3 id="thrift"><a href="#thrift" class="headerlink" title="thrift"></a>thrift</h3><ul>
<li><a href="http://blog.csdn.net/column/details/thrift.html" target="_blank" rel="external">http://blog.csdn.net/column/details/thrift.html</a></li>
</ul>
<h3 id="dubbo"><a href="#dubbo" class="headerlink" title="dubbo"></a>dubbo</h3><ul>
<li><a href="http://blog.csdn.net/u010311445/article/category/2745121" target="_blank" rel="external">http://blog.csdn.net/u010311445/article/category/2745121</a></li>
</ul>
<h3 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h3><ul>
<li><a href="http://microservices.io/patterns/index.html" target="_blank" rel="external">http://microservices.io/patterns/index.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MYSQL&quot;&gt;&lt;a href=&quot;#MYSQL&quot; class=&quot;headerlink&quot; title=&quot;MYSQL&quot;&gt;&lt;/a&gt;MYSQL&lt;/h1&gt;&lt;h3 id=&quot;书籍&quot;&gt;&lt;a href=&quot;#书籍&quot; class=&quot;headerlink&quot; title=&quot;书籍&quot;&gt;&lt;/a&gt;书
    
    </summary>
    
    
      <category term="程序猿的书" scheme="http://xu1009.github.io/tags/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E7%9A%84%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>Spring随笔记录</title>
    <link href="http://xu1009.github.io/2017/09/02/Spring%E9%9A%8F%E7%AC%94%E8%AE%B0%E5%BD%95/"/>
    <id>http://xu1009.github.io/2017/09/02/Spring随笔记录/</id>
    <published>2017-09-02T05:27:56.000Z</published>
    <updated>2017-09-02T05:29:02.303Z</updated>
    
    <content type="html"><![CDATA[<h4 id="spring-FctoryBean-and-InitializingBean"><a href="#spring-FctoryBean-and-InitializingBean" class="headerlink" title="spring FctoryBean and InitializingBean"></a>spring FctoryBean and InitializingBean</h4><blockquote>
<p>Spring中有两种类型的Bean，一种是普通Bean，另一种是工厂Bean，即FactoryBean，这两种Bean都被容器管理，但工厂Bean跟普通Bean不同，其返回的对象不是指定类的一个实例，其返回的是该FactoryBean的getObject方法所返回的对象。</p>
</blockquote>
<p> FactoryBean接口有3个方法：</p>
<p>Object getObject():返回本工厂创建的对象实例。此实例也许是共享的，依赖于该工厂返回的是单例或者是原型。<br>boolean isSingleton():如果FactoryBean返回的是单例,该方法返回值为true,否则为false<br>Class getObjectType():返回对象类型。对象类型是getObject()方法返回的对象的类型，如果不知道的类型则返回null。<br>FactoryBean概念和接口在Spring框架中大量使用。Spring内置的有超过50个实现。</p>
<p>当使用ApplicationContext的getBean()方法获取FactoryBean实例本身而不是它所产生的bean，则要使用&amp;符号+id。比如，现有FactoryBean，它有id，在容器上调用getBean(“myBean”)将返回FactoryBean所产生的bean，调用getBean(“&amp;myBean”)将返回FactoryBean它本身的实例。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> spring4;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.FactoryBean;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by javajidi_com</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Component</span>(<span class="string">"myFactoryBean"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Compent</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> Compent <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Compent();<span class="comment">//这里可以进行负责的对象创建逻辑</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</div><div class="line">        <span class="keyword">return</span> Compent.class;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//是否是单列</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">package</span> spring4;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by javajidi_com</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arg)</span></span>&#123;</div><div class="line">        <span class="comment">//初始化spring容器，由于使用的是注解，没有xml文件，所有不再使用ClasspathXmlApplicationContext</span></div><div class="line">        ApplicationContext context=<span class="keyword">new</span> AnnotationConfigApplicationContext(Config.class);</div><div class="line">        Object o1=context.getBean(<span class="string">"myFactoryBean"</span>);</div><div class="line">        Object o2=context.getBean(<span class="string">"&amp;myFactoryBean"</span>);</div><div class="line">        System.out.println(o1.getClass());</div><div class="line">        System.out.println(o2.getClass());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">输出</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">spring4</span>.<span class="title">Compent</span></span></div><div class="line"><span class="class"><span class="title">class</span> <span class="title">spring4</span>.<span class="title">MyFactoryBean</span></span></div></pre></td></tr></table></figure>
<blockquote>
<p>InitializingBean 和前面的fatorybean一样是一个接口，该接口只有一个方法，afterPropertiesSet()，该方法在bean注册到spring容器的时候就自动执行，所以多用来做一些初始化的工作，</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.sogou.nsd.factorybean;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.FactoryBean;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="meta">@Component</span>(<span class="string">"factorybean"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryBeanTest</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>, <span class="title">InitializingBean</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"this is a factorybean"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="string">"this method execute after bean xml file init!!!!!!!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="springMVC-HttpServletRequestWrapper"><a href="#springMVC-HttpServletRequestWrapper" class="headerlink" title="springMVC HttpServletRequestWrapper"></a>springMVC HttpServletRequestWrapper</h4><blockquote>
<p>通常在filter中需要读取请求的参数，这个当请求是post的时候，就会存在问题，request的inputStream只能读取一次，当在controller中时就无法再次读取post的表单数据。这个时候就需要对request进行包装，每次读取的是request数据流的一个copy这样就不会存在问题，详细代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.sogou.nsd.filter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> sun.misc.IOUtils;</div><div class="line"><span class="keyword">import</span> sun.nio.ch.IOUtil;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.ServletInputStream;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</div><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiReadHttpServletReuest</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> ByteArrayOutputStream cachedBytes;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MultiReadHttpServletReuest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(request);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ServletInputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (cachedBytes == <span class="keyword">null</span>)</div><div class="line">            cacheInputStream();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CachedServletInputStream();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> BufferedReader <span class="title">getReader</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(getInputStream()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cacheInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">         * Cache the inputstream in order to read it multiple times. For</span></div><div class="line"><span class="comment">         * convenience, I use apache.commons IOUtils</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        cachedBytes = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">        org.apache.commons.io.IOUtils.copy(<span class="keyword">super</span>.getInputStream(), cachedBytes);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* An inputstream which reads the cached request body */</span></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CachedServletInputStream</span> <span class="keyword">extends</span> <span class="title">ServletInputStream</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> ByteArrayInputStream input;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CachedServletInputStream</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">/* create a new input stream from the cached request body */</span></div><div class="line">            input = <span class="keyword">new</span> ByteArrayInputStream(cachedBytes.toByteArray());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">            <span class="keyword">return</span> input.read();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>然后在filter中将request进行包装就行，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.sogou.nsd.filter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.*;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> java.io.*;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestBodyFilter</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> String filterName;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">        String name = filterConfig.getInitParameter(<span class="string">"name"</span>);</div><div class="line">        filterName = name;</div><div class="line">        System.out.println(<span class="string">"filterName: "</span> + name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line"><span class="comment">//        HttpServletRequest request = (HttpServletRequest) servletRequest;</span></div><div class="line">        MultiReadHttpServletReuest request = <span class="keyword">new</span> MultiReadHttpServletReuest((HttpServletRequest) servletRequest);</div><div class="line">        System.out.println(request.getMethod());</div><div class="line"><span class="comment">//        InputStream inputStream =  request.getInputStream();</span></div><div class="line"><span class="comment">//        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);</span></div><div class="line">        BufferedReader bufferedReader = request.getReader();</div><div class="line">        String line;</div><div class="line">        <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="keyword">null</span>)</div><div class="line">            System.out.println(line);</div><div class="line">            <span class="comment">// when request method is post, request stream can only read one time, so this is</span></div><div class="line">        <span class="comment">// make the inputStream cached, and then read the cached every time;</span></div><div class="line">        BufferedReader bufferedReader1 = request.getReader();  <span class="comment">// return new object</span></div><div class="line">        <span class="keyword">while</span> ((line = bufferedReader1.readLine()) != <span class="keyword">null</span>)</div><div class="line">            System.out.println(line);</div><div class="line"></div><div class="line">        String name = servletRequest.getParameter(<span class="string">"name"</span>);</div><div class="line">        System.out.println(<span class="string">"name: "</span> + name);</div><div class="line">        System.out.println(filterName);</div><div class="line">        filterChain.doFilter(request, servletResponse);</div><div class="line">       <span class="comment">// return;</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="有关sping和springmvc的关系"><a href="#有关sping和springmvc的关系" class="headerlink" title="有关sping和springmvc的关系"></a>有关sping和springmvc的关系</h4><ul>
<li>context:annotation-config<br>隐式在spring容器中注册 注解相关的bean  4个BeanPostProcessor<br>注册这4个bean处理器主要的作用是为了你的系统能够识别相应的注解</li>
<li>采用mvc:default-servlet-handler /&gt;<br>在springMVC-servlet.xml中配置mvc:default-servlet-handler /&gt;后，<br>会在Spring MVC上下文中定义一个org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler，<br>它会像一个检查员，对进入DispatcherServlet的URL进行筛查，如果发现是静态资源的请求，<br>就将该请求转由Web应用服务器默认的Servlet处理，如果不是静态资源的请求，才由DispatcherServlet继续处理。</li>
<li>mvc:annotation-driven自动在spring容器中注册处理映射器和处理适配器</li>
<li>context:component-scan base-package=”com.sogou” 如果只在spring中加的话就是注册都到spring容器中使得该包及其子包下的bean定义注解工作起来 就是这些注解的作用要么是匹配要么是注册<br>为了防止多次加载多次实例化，这两个容器要分开。</li>
</ul>
<p>一般在springmvc容器中只注册和controller相关的bean，其它都在spring容器进行注册，在spring容器中注册的bean对于两个容器都是可见的，下面是两个容器中的配置。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--springmvc  --&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sogou.bizwork.controller"</span>  <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span> <span class="attr">type</span>=<span class="string">"annotation"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--spring--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sogou.bizwork"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span></span></div><div class="line"><span class="tag">			<span class="attr">type</span>=<span class="string">"annotation"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这样配置就可以避免重复注册和加载的问题。</p>
<ul>
<li>配置文件在容器中的设置，这个会有混淆，遇见过@Value注解不起作用的情况。<br>比如只在spring容器中配置资源文件<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--resource bundle file--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:redis.properties"</span>/&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>资源文件就无法在controller中以</p>
<blockquote>
<p>  @Value(“${quorumString}”)<br>    private String quorumString;</p>
</blockquote>
<p>方式使用，这样输出的只是”${quorumString}”，必须要在springmvc容器中配置资源文件。</p>
<p>但是这样一旦资源文件改了，就需要改两处，这样就非常麻烦。<br>所以就有下面这种方式<br>先在spring容器定义bean，然后在每个容器分别引用就行了。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--spring--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"properties"</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertiesFactoryBean"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignoreResourceNotFound"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:redis.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--resource bundle file ref--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">properties-ref</span>=<span class="string">"properties"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!--springMVC--&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">properties-ref</span>=<span class="string">"properties"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<p>这样就实现了配置一处，其它进行引用，实现了复用。</p>
<h4 id="spring-AOP"><a href="#spring-AOP" class="headerlink" title="spring AOP"></a>spring AOP</h4><h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><blockquote>
<p>Java中注解就是在代码中添加信息的一种形式化的方法，然后我们可以在以后某个时刻方便的使用这些数据。</p>
</blockquote>
<p>java中是anatation接口，有四个元注解，自定义注解都是根据这个元注解来的，<br>Documented,Inherited,Target(作用范围，方法，属性，构造方法等),Retention(生命范围，源代码，class,runtime)。</p>
<blockquote>
<p>  @Target 表示该注解用于什么地方，可能的值在枚举类 ElemenetType 中，包括：<br>          ElemenetType.CONSTRUCTOR 构造器声明<br>          ElemenetType.FIELD 域声明（包括 enum 实例）<br>          ElemenetType.LOCAL_VARIABLE 局部变量声明<br>          ElemenetType.METHOD 方法声明<br>          ElemenetType.PACKAGE 包声明<br>          ElemenetType.PARAMETER 参数声明<br>          ElemenetType.TYPE 类，接口（包括注解类型）或enum声明 </p>
<p>  @Retention 表示在什么级别保存该注解信息。可选的参数值在枚举类型 RetentionPolicy 中，包括：<br>          RetentionPolicy.SOURCE 注解将被编译器丢弃<br>          RetentionPolicy.CLASS 注解在class文件中可用，但会被VM丢弃<br>          RetentionPolicy.RUNTIME VM将在运行期也保留注释，因此可以通过反射机制读取注解的信息。 </p>
<p>@Documented 将此注解包含在 javadoc 中 ，它代表着此注解会被javadoc工具提取成文档。在doc文档中的内容会因为此注解的信息内容不同而不同。相当与@see,@param 等。<br>  @Inherited 允许子类继承父类中的注解，例子中补充。</p>
</blockquote>
<p>如下自定义注解：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.annotation.*;</div><div class="line"></div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)  <span class="comment">// 定义注解的保留策略</span></div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE,ElementType.FIELD,ElementType.CONSTRUCTOR,ElementType.METHOD&#125;)         <span class="comment">// 定义注解的作用目标</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CacheAble &#123;  <span class="comment">// 自定义注解</span></div><div class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</div><div class="line">    <span class="function">Class&lt;Long&gt; <span class="title">gid</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中name参数也是name，类型和返回类型相同，其它也是这样</p>
<p>下面是使用注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> test;</div><div class="line"></div><div class="line"><span class="meta">@CacheAble</span>(name = <span class="string">"nihao"</span>, id = <span class="number">3</span>, gid = Long.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> ListNode next;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> val;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListNode</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.val = val;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样就相当于在该类中添加了一些信息，这些信息可以通过反射来获取使用。现在只是在类中加注解，也可以在成员变量上加注解，或者在方法或者参数上加注解。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;spring-FctoryBean-and-InitializingBean&quot;&gt;&lt;a href=&quot;#spring-FctoryBean-and-InitializingBean&quot; class=&quot;headerlink&quot; title=&quot;spring FctoryBea
    
    </summary>
    
    
      <category term="spring" scheme="http://xu1009.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC框架简述</title>
    <link href="http://xu1009.github.io/2017/08/05/SpringMVC%E6%A1%86%E6%9E%B6%E7%AE%80%E8%BF%B0/"/>
    <id>http://xu1009.github.io/2017/08/05/SpringMVC框架简述/</id>
    <published>2017-08-05T06:24:41.000Z</published>
    <updated>2017-08-30T15:03:06.044Z</updated>
    
    <content type="html"><![CDATA[<h4 id="web端的发展历程"><a href="#web端的发展历程" class="headerlink" title="web端的发展历程"></a>web端的发展历程</h4><p>如下图所示</p>
<p><img src="/2017/08/05/SpringMVC框架简述/web_history.jpg" alt="web发展历史"></p>
<ul>
<li>最早的CGI 公共网关接口，一种在web服务端使用的脚本技术，使用C或Perl语言编写，用于接收web用户请求并处理，最后动态产生响应给用户，但每次请求将产生一个进程，重量级。</li>
<li>servlet 一种JavaEE web组件技术，是一种在服务端执行的web组件，用于接收用户请求，最后动态产生响应给用户，每次请求就是新建一个线程，这个比CGI要轻量级，能够使用JavaEE 技术,比如JDBC，本质就是在Java代码里面输出HTML流，但是表现逻辑、业务逻辑、控制逻辑混杂。直接在Java代码里面输出HTML，非常不方便。</li>
<li>JSP 本质还是servlet，就是在HTML中动态写入Java代码.</li>
<li>Model1 就是jsp升级版，之前请求参数都是通过servlet api获得的，model1中可以在jsp中使用标签<jsp:usebean>将请求参数封装到对象中直接使用，但是jsp中加入了控制，业务，混杂。</jsp:usebean></li>
<li>Model2 实现了分层，但是请求参数没有封装到Javabean中，还需要手动封装，而且视图的转发严重依赖 servlet api比如请求的转发。</li>
<li>后来的struts2就是使用了拦截器对请求参数进行封装到bean中，也就是vo中，而且视图的控制由xml进行，视图就是jsp。</li>
<li>现在的web mvc模式框架，比如spring MVC框架</li>
</ul>
<blockquote>
<p>服务到工作者模式：前端控制器（front controller） 应用控制器（application controller）页面控制器也称为动作（page controller）上下文（context）现在springMVC框架使用的就是这个模式。</p>
</blockquote>
<p>这个模式如下图所示,这是最一般的模式：</p>
<p><img src="/2017/08/05/SpringMVC框架简述/web_mvc1.jpg" alt="mvc1"></p>
<p><img src="/2017/08/05/SpringMVC框架简述/web_mvc2.jpg" alt="mvc2"></p>
<ul>
<li><code>前端控制器</code>  负责为表现层提供统一访问节点，避免model2中出现的重复的控制逻辑，比如前端控制器统一回调相应的功能方法，比如委托应用控制器选择功能处理模块和视图，在model2中都是自己编写的。</li>
<li><code>应用控制器</code> 根据url选择处理器，选择返回的视图，策略设计模式</li>
<li><code>页面控制器</code> 功能处理代码，收集参数，封装参数到模型，转调业务对象处理模型，返回逻辑视图名给前端控制器，前端控制器委托应用控制器选择具体的视图，命令模式。</li>
<li><code>上下文</code> model2中为视图准备要展示的模型数据，我们直接放到了request中，有了上下文之后，我们可以将相关数据放到上下文中，从而和协议无关，也就是和servlet api无关，一般是通过threadlocal实现，线程独享的数据放到threadlocal中是一个键值对。</li>
</ul>
<blockquote>
<p>轻薄的web表现层，做的事情越少越好，薄薄的，不应该包含无关的代码，只负责收集并组织参数到模型对象，启动业务对象的调用，控制器只返回逻辑视图名并由响应的应用控制器来选择具体。</p>
</blockquote>
<h4 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h4><blockquote>
<p>SpringMVC是一个基于Java实现了web mvc设计模式的请求驱动类型的轻量级web框架，请求驱动指的是使用请求-响应模型。<br>Spring web mvc也是服务到工作者模式的实现，</p>
</blockquote>
<p>前端控制器：dispatcherServlet就是给web表现层提供统一的访问节点，委托应用控制器进行URL映射和视图选择。</p>
<p>SpringMVC将应用控制器拆为处理映射器（handler mapping）和视图解析器（view resolver）。</p>
<p>页面控制器是controller接口（这个一般是使用注解进行和URL对应，包含modelAndView request response）支持本地化解析，主题解析文件上传，还有就是数据验证，数据格式化和数据绑定机制。提供了强中的约定大于配置的契约式编程支持。</p>
<p>SpringMVC模式一个请求的完整过程如下图所示：</p>
<p><img src="/2017/08/05/SpringMVC框架简述/springmvc.jpg" alt="springmvc"></p>
<p>具体执行步骤如下：</p>
<ol>
<li>首先用户发送请求————&gt;前端控制器，前端控制器根据请求信息（如URL）来决定选择哪一个页面控制器进行处理并把请求委托给它，即以前的控制器的控制逻辑部分；</li>
<li>页面控制器接收到请求后，进行功能处理，首先需要收集和绑定请求参数到一个对象，这个对象在Spring Web MVC中叫命令对象，并进行验证，然后将命令对象委托给业务对象进行处理；处理完毕后返回一个ModelAndView（模型数据和逻辑视图名）；</li>
<li>前端控制器收回控制权，然后根据返回的逻辑视图名，选择相应的视图进行渲染，并把模型数据传入以便视图渲染；</li>
<li>前端控制器再次收回控制权，将响应返回给用户;</li>
</ol>
<p><img src="/2017/08/05/SpringMVC框架简述/springmvc1.jpg" alt="springmvc1"></p>
<p>其实前端控制器主要是协调的作用，spring web mvc的集中访问点，主要职责就是调度工作，本身主要用于流程控制。</p>
<h4 id="springMVC容器和spring之间的关系"><a href="#springMVC容器和spring之间的关系" class="headerlink" title="springMVC容器和spring之间的关系"></a>springMVC容器和spring之间的关系</h4><p>平时并没有很注意这方面的东西，在配置的时候只会</p>
<h4 id="rpc和restFUL-api"><a href="#rpc和restFUL-api" class="headerlink" title="rpc和restFUL api"></a>rpc和restFUL api</h4><p>HTTP是一种应用层网络协议，RPC可以采用自定义协议，也可以通过HTTP协议来传输，thrift，grpc，xml-rpc，json-rpc都是通过HTTP传输的。HTTP既支持长连接，也支持短连接。<br>rpc使用的则是长连接，不需要频繁的建立连接，RESTFUL API使用的是短连接，效率低下，而且在数据传输上，restful api传输了很多无用信息，比如那些header，对于rpc来说却没有。</p>
<p>所以为什么要用rpc调用？</p>
<p>因为良好的rpc调用是面向服务的封装，针对服务的可用性和效率等都做了优化。单纯使用http调用则缺少了这些特性。</p>
<p>简单来说成熟的rpc库相对http容器，跟多的是封装了“服务发现”，”错误重试”一类面向服务的高级特性。可以这么理解，rpc框架是面向服务的更高级的封装。如果把一个http server容器上封装一层服务发现和函数代理调用，那它就已经可以做一个rpc框架了。</p>
<ol>
<li>性能，不出很大的意外，http服务都是百毫秒级的，而thrift则能轻松搞到几十ms，别小看这点时间，这少一点，用户的痛苦就会小很多。。。，那么为什么性能差？http需要dns，这来回的网络消耗不是盖的，对于MT的服务是完全没有必要的开销；</li>
<li>扩展性，http的服务发现纯粹是靠dns做的，加机器需要配置一下dns，这要惊动运维，还有等漫长的roll out时间，与基于zookeeper的自动发现的thrift比，毫无优势可言；</li>
<li>管理麻烦，http配置的域名需要管理起来也是麻烦事，对外提供统一服务，内部也需要统一一下域名的命名</li>
<li>RPC:远程过程调用。RPC的核心并不在于使用什么协议。RPC的目的是让你在本地调用远程的方法，而对你来说这个调用是透明的，你并不知道这个调用的方法是部署哪里。通过RPC能解耦服务，这才是使用RPC的真正目的。RPC的原理主要用到了动态代理模式，至于http协议，只是传输协议而已。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;web端的发展历程&quot;&gt;&lt;a href=&quot;#web端的发展历程&quot; class=&quot;headerlink&quot; title=&quot;web端的发展历程&quot;&gt;&lt;/a&gt;web端的发展历程&lt;/h4&gt;&lt;p&gt;如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2017/08/05/SpringM
    
    </summary>
    
    
      <category term="spring" scheme="http://xu1009.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Maven实战</title>
    <link href="http://xu1009.github.io/2017/07/29/Maven%E5%AE%9E%E6%88%98/"/>
    <id>http://xu1009.github.io/2017/07/29/Maven实战/</id>
    <published>2017-07-29T08:13:32.000Z</published>
    <updated>2017-07-30T14:59:11.585Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>构建是什么，build这个不是IDE帮我们完成的吗，为啥需要maven</li>
<li>平时用到的maven都是依赖管理工具和项目信息管理工具</li>
<li>maven有一个坐标系统准确定位每一个构建（artifact）</li>
<li>坐标系统就是按package来一级级传递的吧</li>
<li>构建工具有 maven ant ide make等</li>
<li>IDE都是手工的进行鼠标点击来完成编译、测试、代码生成，低效还容易出错。</li>
<li>make是最早的构建工具，有一个Makefile的脚本文件驱动，在Linux下比较好使。</li>
<li>Ant意思是another neat tool，构建工具，基本结构也是target和depends，没有依赖管理，可以借助Ivy管理依赖。</li>
<li>maven是声明式的，有很好的依赖管理。</li>
<li>maven可以创建内部的仓库服务器，中央仓库会有点慢而且，有些jar不一定有.使用nexus建立自己的maven仓库。</li>
<li>maven的坐标系统，就是groupid artifactid等</li>
<li>groupid artifactid version 依赖的基本坐标</li>
<li>type 依赖的类型，默认为jar</li>
<li>scope以来的范围，就是作用域</li>
<li>optional 标记依赖是否可选</li>
<li>exclusion 用来排除依赖传递性</li>
<li>依赖范围就是用来控制依赖与这三种classpath（编译、测试、运行）的关系</li>
<li><scope> </scope>有这几种依赖范围，</li>
<li>compile：编译依赖范围，这也是默认的依赖范围，三个阶段都可以。</li>
<li>test：测试依赖范围，只对测试依赖有效</li>
<li>provided：已提供依赖范围，只对编译和测试有效，运行无效。</li>
<li>runtime：测试和运行时有效</li>
<li>system：和provided一样，但是这个必须指定依赖的路径。</li>
<li>import：这个后续补上，没详细说</li>
<li>jar包冲突，maven有自己的依赖调解原则，第一原则是最近者优先，最先依赖的那个会被使用，如果路径长度是一样的就看依赖在pom文件中的顺序。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;构建是什么，build这个不是IDE帮我们完成的吗，为啥需要maven&lt;/li&gt;
&lt;li&gt;平时用到的maven都是依赖管理工具和项目信息管理工具&lt;/li&gt;
&lt;li&gt;maven有一个坐标系统准确定位每一个构建（artifact）&lt;/li&gt;
&lt;li&gt;坐标系统就是按p
    
    </summary>
    
    
      <category term="maven" scheme="http://xu1009.github.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>Mock与junit</title>
    <link href="http://xu1009.github.io/2017/07/19/Mock%E4%B8%8Ejunit/"/>
    <id>http://xu1009.github.io/2017/07/19/Mock与junit/</id>
    <published>2017-07-19T03:27:58.000Z</published>
    <updated>2017-07-19T03:29:29.899Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Mock junit" scheme="http://xu1009.github.io/tags/Mock-junit/"/>
    
  </entry>
  
  <entry>
    <title>深入分析JAVA WEB技术总结</title>
    <link href="http://xu1009.github.io/2017/07/15/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90JAVA-WEB%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    <id>http://xu1009.github.io/2017/07/15/深入分析JAVA-WEB技术总结/</id>
    <published>2017-07-14T23:47:36.000Z</published>
    <updated>2017-08-26T13:51:04.906Z</updated>
    
    <content type="html"><![CDATA[<h5 id="DNS解析过程"><a href="#DNS解析过程" class="headerlink" title="DNS解析过程"></a>DNS解析过程</h5><ul>
<li>最先在浏览器缓存里面找</li>
<li>本地操作系统缓存</li>
<li>本地域名服务器</li>
<li>根服务器</li>
<li>解析完成之后会自动缓存这个结果<h5 id="域名解析方式"><a href="#域名解析方式" class="headerlink" title="域名解析方式"></a>域名解析方式</h5></li>
<li>A记录,指定URL所对应的IP地址</li>
<li>MX记录,将某个地址下的邮件服务器指向自己的mail server</li>
<li>CNAME记录,别名解析,为一个域名设置很多别名</li>
<li>NS记录,为某个域名指定DNS解析服务器</li>
<li>TXT记录,为域名设置说明<h5 id="JAVA-IO"><a href="#JAVA-IO" class="headerlink" title="JAVA IO"></a>JAVA IO</h5></li>
<li>基于字节的IO,基于字符的,基于磁盘的,基于网络的.</li>
<li>字节到字符需要解码,字符到字节需要编码,很透彻</li>
<li>所以在读取文件或者写入文件的时候需要指定编码解码方式,不指定就使用系统默认的编解码方式<h5 id="文件访问方式"><a href="#文件访问方式" class="headerlink" title="文件访问方式"></a>文件访问方式</h5></li>
<li>标准IO访问,调用操作系统操作文件的方法,这里涉及到高速缓存.</li>
<li>直接IO访问,不经过高速缓存,直接访问磁盘,这样会比较慢</li>
<li>同步IO,就是阻塞式的IO,必须等到读取或者写入完成之后,才能做其他事情</li>
<li>异步IO,非阻塞式,读取和写入时,当前线程不必等待,可以去处理其它事情.</li>
<li>内存映射,将磁盘一段内存空间映射到用户缓存空间,这样访问,<h5 id="同步-异步-阻塞-非阻塞"><a href="#同步-异步-阻塞-非阻塞" class="headerlink" title="同步 异步  阻塞  非阻塞"></a>同步 异步  阻塞  非阻塞</h5></li>
<li>同步就是一个任务序列的完成需要依赖另外一个任务时,只有等待被依赖的任务完成之后,依赖的任务才能完成,这是一种可靠的任务序列.</li>
<li>异步是不可靠的任务序列,他不必等待被依赖的任务完成,只是通知被依赖的任务要完成什么样的工作.</li>
<li>同步能够保证程序的可靠行,异步可以提升程序的性能,必须在可靠性和性能之间保持平衡.</li>
<li>阻塞是CPU停下来等待一个慢动作完成之后,才能执行其它任务.</li>
<li>非阻塞是CPU没必要停下来,非阻塞明显提高了CPU的利用率,带来的坏处就是线程之间的切换带来的开销.<h3 id="编码问题相关"><a href="#编码问题相关" class="headerlink" title="编码问题相关"></a>编码问题相关</h3></li>
<li>通俗的讲,计算机存储的基本单元是英语,其它语言必须通过一次翻译,翻译成英语才能和计算机通信,这叫做编码.<h5 id="一些编码方式简述"><a href="#一些编码方式简述" class="headerlink" title="一些编码方式简述"></a>一些编码方式简述</h5></li>
<li>ASCLL码,总共有128个,用一个字节的低7位表示,0-31表示换行 回车这些,32-126表示打印字符,可以通过键盘输入并且能够显示出来.</li>
<li>ISO-8859-1仍然是单字节编码,主要是用来弥补ASCLL码的不足,加了一些西欧语言字符,应用的十分广泛,总共有256个字节.</li>
<li>GB2312 中文编码字符集,使用双字节编码,就是比较少,才6000多个汉字.</li>
<li>GBK和GB2312兼容,增加了很多汉字,相当于GB2312的拓展,而且两者是兼容的.</li>
<li>GB18030 国家标准,但是用的不多.</li>
<li>UTF-16使用定长表示方法,不论什么字符都使用两个字节表示.</li>
<li>UTF-8采用变长编码,utf-16虽然在表示上非常方便,但是有些字符只需要一个字节表示就够了,没必要使用两个字节表示,所以这样就造成内存空间的的增大,十分不方便,UTF-8使用1-6个字节组成,</li>
<li>编码,解码问题主要是从字节到字符或者字符到字节的过程,Java内存使用的时utf-16编码,utf-16编码简单高效,utf-8多用于网络编码,节省流量,utf-16是顺序编码,这样会导致中间一个字节码坏掉之后影响之后的,而utf-8则不会,它会对单个字符进行校验,所以可靠性更高.<h4 id="Java-web中的编码和解码问题"><a href="#Java-web中的编码和解码问题" class="headerlink" title="Java web中的编码和解码问题"></a>Java web中的编码和解码问题</h4></li>
<li>首先网络中传输使用的是http协议,也就是socket,socket流是字节流,所以,要想在网络中传输,首先需要编码,从网络中获取到字节流之后再进行解码还原成我们需要的那种.</li>
<li>URI和QueryString的编解码还不一样,tomcat处理这个URL时,就是要解码,uri就是使用配置文件中的解码方式,connector中的URIEncoding决定了解码方式,queryString的话就是基本上按照header中的content type来解码的,需要配置tomcat中的useBodingEncodingForUri为true.</li>
<li>tomcat在解析post方式的表单数据时,解码方式是要按照header中的content type里面的charset属性,如果请求头中没有包含该属性的话,则会按照默认的iso-8859-1进行解码,如果提交的数据包含非ASCLL码的话就会出现乱码的现象.</li>
<li>返回给浏览器的数据也需要编码,浏览器根据,response中的header  charset进行解码的,如果没有这个响应头的话就按照HTML中指定的charset进行解码,如果仍然没有的话就按照默认的解码方式.<h4 id="Cookie-and-Session"><a href="#Cookie-and-Session" class="headerlink" title="Cookie and Session"></a>Cookie and Session</h4></li>
<li>其实这个没啥讲的，这个用的比较多的是在集群条件下的共享问题，session本质还是cookie，一种特殊的cookie，jsessionid = value<br>value是session的id，服务端会根据这个id去找session对象，这样就可以在传输中节省了大量带宽，传输的只是id了，而且安全性比cookie高，cookie还就是在客户端存储有限制，但是session在服务端集群的条件下存在共享的问题，各有好处，现在用的都是分布式缓存来存储session，有一个订阅服务器去管理，这样就将存储和管理从服务器分离，减少了服务器的负担，可以有效控制session的安全性和cookie的数量。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;DNS解析过程&quot;&gt;&lt;a href=&quot;#DNS解析过程&quot; class=&quot;headerlink&quot; title=&quot;DNS解析过程&quot;&gt;&lt;/a&gt;DNS解析过程&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;最先在浏览器缓存里面找&lt;/li&gt;
&lt;li&gt;本地操作系统缓存&lt;/li&gt;
&lt;li&gt;本地域名服
    
    </summary>
    
    
      <category term="java web" scheme="http://xu1009.github.io/tags/java-web/"/>
    
  </entry>
  
  <entry>
    <title>JVM基础知识</title>
    <link href="http://xu1009.github.io/2017/07/15/JVM%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://xu1009.github.io/2017/07/15/JVM基础知识/</id>
    <published>2017-07-14T23:46:05.000Z</published>
    <updated>2017-07-14T23:46:51.499Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JVM运行时数据区域"><a href="#JVM运行时数据区域" class="headerlink" title="JVM运行时数据区域"></a>JVM运行时数据区域</h2><ul>
<li><strong>程序计数器</strong>   <code>线程独享</code>   程序计数器是一块内存较小的存储空间，可以看做当前线程所执行的字节码的行号指示器，字节码解释器工作时就是通过改变这个计数器值来选取下一条需要执行的字节码指令，线程执行的是Java方法的话，这个计数器记录的就是正在执行的字节码指令地址，如果时native方法，那么记录的就是空，该区域没有规定内存错误。</li>
<li><strong>Java虚拟机栈</strong> <code>线程独享</code>   生命周期和线程相同，每个方法创建时都会创建一个栈帧，用于存储局部变量表（存储了基本数据类型和对象引用类型）、操作数栈、动态链接、方法出口信息。栈帧在栈中的入栈出栈就是对应方法调用到执行的过程。</li>
<li><strong>本地方法栈</strong>   <code>线程独享</code>  这个和虚拟机栈一样功能，只不过虚拟机栈是为Java方法服务，这个是为本地方法服务的，即为native方法服务。</li>
<li><strong>Java堆</strong>   <code>线程共享</code>   这个方法是JVM管理的主要区域，也称为GC堆，主要存储的时对象实例和数组。</li>
<li><strong>方法区域</strong>   <code>线程共享</code>   主要存储的是类信息、常量、静态变量，垃圾回收主要对这个区域中的运行时常量池的回收和对类型的卸载。<h2 id="对象内存布局和定位"><a href="#对象内存布局和定位" class="headerlink" title="对象内存布局和定位"></a>对象内存布局和定位</h2></li>
<li>对象在内存中的存储布局分为3块区域：对象头、实例数据、对齐和填充</li>
<li>对象定位有两种，一种时句柄，一种是直接指针，句柄的话就是堆中有一个句柄池存储各个对象实例的地址，栈中的reference可以通过句柄访问，这种访问慢，但是对象地址变化的话，只需要改变句柄池不需要操作栈中的内容，直接指针的话就是访问的比较快，直接操作的对象<h2 id="JVM垃圾回收机制"><a href="#JVM垃圾回收机制" class="headerlink" title="JVM垃圾回收机制"></a>JVM垃圾回收机制</h2><h5 id="判断什么是垃圾"><a href="#判断什么是垃圾" class="headerlink" title="判断什么是垃圾"></a>判断什么是垃圾</h5></li>
<li><strong>引用计数算法</strong>   引用计数算法是jdk1.2之前的算法，算法的主要过程是，当一个对象被引用时计数器就会加1，引用失效时就减1，最后当这个计数器为0时就会被确认成垃圾，这个有个问题就是无法回收互相引用的对象。</li>
<li><strong>可达性分析算法</strong> 可达性分析算法也是目前用来判断对象是否为垃圾的一个算法，它使用图论的知识，他会从一系列GC ROOTS起点向下搜索，当一个节点到GC ROOTS没用任何引用链相连，那么那就会认为他是可回收的。可作为GC ROOTS的对象有java虚拟机栈中的引用的对象，方法区域中静态和常量引用的对象，本地方法栈中的JNI引用的对象，这个算法分析时必须停止其它所有线程。<h5 id="引用分类"><a href="#引用分类" class="headerlink" title="引用分类"></a>引用分类</h5></li>
<li><strong>强引用</strong>   也是平时最常用的引用，这类引用，只要还存在，垃圾收集器就永远不会回收它，及时出现内存溢出。</li>
<li><strong>软引用</strong>    当内存不够时才会回收它，比如用做缓存，描述还有用但是非必要对象。</li>
<li><strong>弱引用</strong>   比软引用还要弱的引用，不管内存是否充足都会被回收掉，   如果这个对象是偶尔的使用，并且希望在使用时随时就能获取到，但又不想影响此对象的垃圾收集，那么你应该用 Weak Reference 来记住此对象。</li>
<li><strong>虚引用</strong>   也叫幽灵引用，最弱的一种引用关系，无法通过虚引用获取一个对象实例，为一个对象设置虚引用关联的唯一目的就是，当该对象被回收时收到一个系统通知。<h5 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h5></li>
<li><strong>标记清除算法</strong>    标记清除算法两个过程，一个是标记，一个是清除，这个算法是最基础的垃圾收集算法，主要有两个缺点，一个是标记和清除的效率都很低，另一个是标记清除导致内存碎片，当存储大对象时，由于找不到连续的存储空间，会触发另一次收集。</li>
<li><strong>复制算法</strong>    为了解决效率的问题，这个算法主要是将内存分区，一个是用来使用，另一个用来存储，现在商业虚拟机都是分为Eden、from survivor、to survivor，比例时8:1:1，Eden和from survivor用来使用，将存活的对象复制到to survivor，然后回收那些垃圾，当存活的对象大于to   survivor的空间时，那些对象会进入老年代。</li>
<li><strong>标记整理算法</strong>   存活的对象向一边移动，这样就解决了内存碎片的问题。</li>
<li><strong>分代收集算法</strong>    现在使用大部分都是这个算法，根据新生代和老年代选择合适的算法收集，比如G1收集器使用的就是这个算法。<h5 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h5></li>
<li><strong>serial收集器</strong>   单线程收集器，收集器采用复制算法，所以回收的对象时新生代的对象，收集的时候必须停止其它所有线程，也就是stop the  world直到它收集结束，这个时间也就是停顿时间，<code>简单高效，多用于client模式下的新生代收集器，由于是一个线程，就避免了切换线程所带来的开销，所以在client模式下是一个很好的选择</code></li>
<li><strong>parnew收集器</strong>     <code>serial收集器的多线程版本，其它没啥区别，只是在使用复制算法的时候使用了多线程，在单核cpu的情况下，由于切换线程带来的开销，收集的效率还不如serial，收集器收集期间还是需要停止其它所有线程</code></li>
<li><strong>parallel scavenge收集器</strong>  <code>并行的多线程收集器</code>关注的不是停顿时间，关注的时吞吐量，这种适合那些在后台运算不要交互的任务，还有就是他能自适应调整，这也是和parnew的区别。</li>
<li><strong>serialold收集器</strong>  <code>serial收集器的老年代版本</code></li>
<li><strong>paraell old收集器</strong>  <code>parnew收集器的老年代版本</code></li>
<li><strong>CMS收集器</strong>   <code>使用标记清除算法，实现了并发收集，就是在收集期间其它用户线程不会停止，GC线程和用户线程交替运行，</code>缺点是并发收集对cpu资源比较敏感，cpu还要在运行用户线程的同时还要分出一部分去收集，当cpu负荷比较大时cms算法会对程序有很大影响，还有就是无法收集浮动垃圾，然后就是采用标记清除算法的缺点，该收集主要包括四个过程：初始标记、并发标记、重新标记、并发清除。</li>
<li><strong>G1收集器</strong>    当前最新的垃圾收集器，主要过程是初始标记、并发标记、最终标记、筛选回收。分代收集、可预测的停顿、还有就是G1之前的收集算法进行收集的范围都是整个老年代或者新生代，G1则是把内存分为若干个大小相等的region，G1跟踪每个region里面垃圾堆积的价值大小，在后台维护一个优先级列表，每次都会回收价值最大的那个region。<h5 id="内存分配和回收策略"><a href="#内存分配和回收策略" class="headerlink" title="内存分配和回收策略"></a>内存分配和回收策略</h5></li>
<li>大多数情况下，对象在新生代Eden分配，当Eden没有足够的空间进行分配时，就会触发一次minor GC。<h6 id="对象进入老年代的情况"><a href="#对象进入老年代的情况" class="headerlink" title="对象进入老年代的情况"></a>对象进入老年代的情况</h6></li>
<li>大对象直接进入老年代，JVM提供一个专门设置这个阈值的参数，超过这个阈值的参数直接进入老年代</li>
<li>长期存活的对象进入老年代，对象年龄是在survivor没熬过一次minor GC就加1，具体超过多少，也有一个JVM阈值可以设置。</li>
<li>相同年龄的对象总和大于survivor空间的一半，那大于等于这个年龄的对象进入老年代。</li>
<li>一次minor GC之后，存活的对象进入survivor，最后无法容纳的进入老年代。<h5 id="一些JVM指令和可视化工具"><a href="#一些JVM指令和可视化工具" class="headerlink" title="一些JVM指令和可视化工具"></a>一些JVM指令和可视化工具</h5></li>
<li>这些都是为了深入观察jvm，比如堆栈，新生代，老年代，线程等，自带的命令行工具，比如jps显示JVM中的进程，jmap生成heap转储快照，jstack生成线程的快照。</li>
<li>可视化工具jconsole和visualVM，<h5 id="有关JVM参数设置问题"><a href="#有关JVM参数设置问题" class="headerlink" title="有关JVM参数设置问题"></a>有关JVM参数设置问题</h5></li>
<li>Xmx最大堆内存,通常和Xms搭配使用,配置堆内存的,Xmn配置新生代的内存.<h5 id="类文件结构"><a href="#类文件结构" class="headerlink" title="类文件结构"></a>类文件结构</h5></li>
<li>.class文件,也就是字节码文件,是JVM想要实现语言无关,已经是平台无关了,JVM不和语言绑定,他只和字节码文件相关联,任何其它语言都可以使用JVM作为语言的产品交付媒介,只要这些语言的编译器能够生成符合JVM要求的字节码文件规范.</li>
<li>class采用一种伪结构来存储数据,这种结构中只有无符号数和表两种类型数据.</li>
<li>class文件开头是4个字节的魔数,该数标志该文件是否能被JVM接受,很多文件存储标准中都有魔数来进行身份识别.Java中class文件的魔数是咖啡宝贝,紧接着4个字节是class版本号,也就是jdk版本号,低版本jdk不能执行高版本的字节码文件.</li>
<li>常量池包含了字面量和符号引用.</li>
<li>再接着是访问标志,用于识别这是类还是接口,是否定义为public,是否定义为abstract,是否被final修饰等.</li>
<li>类索引,父类索引,接口索引集合,这三项数据来确定这个类的继承关系.这三项都是用于缺点权限定名.</li>
<li>字段表集合,用于描述接口或者类中声明的变量.</li>
<li>方法表集合,用于描述接口或者类中声明的方法<h5 id="虚拟机类加载机制"><a href="#虚拟机类加载机制" class="headerlink" title="虚拟机类加载机制"></a>虚拟机类加载机制</h5></li>
<li>Java类的加载,链接和初始化都是在程序运行期间完成的,虽然会增加开销,但是提高了灵活性.</li>
<li>类整个生命周期包括:加载 — 验证— 准备—解析— 初始化—使用—卸载</li>
<li><strong>加载</strong>   通过类权限定名获取该类的二进制字节流,将这个字节流所代表的静态存储结构转化为方法区域的运行时数据结构,在内存中生成一个代表该类的对象.</li>
<li><strong>验证</strong>   确保class文件字节流中包含的信息符合当前虚拟机的要求,包括,文件格式验证,元数据验证,字节码验证,符号引用验证.</li>
<li><strong>准备</strong>    正式为类变量分配内存并设置类变量初始值.</li>
<li><strong>解析</strong>    解析是将符号引用替换为直接引用.</li>
<li><strong>初始化</strong>   类加载的最后一步,这里才真正执行类中的Java代码,之前分配的变量都是初始值,现在才是赋值真正的.<h6 id="加载过程详述"><a href="#加载过程详述" class="headerlink" title="加载过程详述"></a>加载过程详述</h6></li>
<li>这个加载就是前面所说的步骤中的第一步,通过类全限定名获取类的二进制流,这个在Java中是放到JVM之外了,而这个代码模块被称为<code>类加载器</code></li>
<li>判断两个类是否相等,必须在同一个类加载器加载的前提下判断才有意义.</li>
<li><strong>双亲委派模型</strong>     Java中分为两种类加载器,一种是启动类加载器还有就是其它,启动类加载器是在JVM内部,其它独立于jvm.</li>
<li><code>启动类加载器</code>   bootstrap classloader,这个会将Javahome/lib目录下的被jvm识别的类库加载到虚拟机</li>
<li><code>拓展类加载器</code>  extension classloader,负责加载Javahome/lib/ext中的类库,</li>
<li><code>应用程序类加载器</code>  application classloader,负责加载用户路径上的类库.</li>
<li><code>双亲委派模型</code>  表示类加载器之间的层次关系,要求除了启动类加载器之外,其它所有类加载器都要有自己的父类加载器,他们之间不是以继承的关系而是组合的关系.</li>
<li><code>双亲委派模型工作过程</code>   当一个类加载器收到类加载请求时,他不会自己加载,而是将这个请求传给自己的父类,这样依次向上,最后到了启动类加载器,如果启动类加载器无法加载,再向下传递.这个模型的好处就是类随着他的类加载器一起具备了一种带有优先级的层次关系.<h5 id="JVM执行引擎"><a href="#JVM执行引擎" class="headerlink" title="JVM执行引擎"></a>JVM执行引擎</h5></li>
<li>Java虚拟机栈存储的是栈帧,栈帧存储了局部变量表,操作数栈,动态链接和方法返回地址等信息.</li>
<li><code>局部变量表</code>    这个存放了基本类型和对象引用,局部变量表以变量槽为最小单位.</li>
<li><code>操作数栈</code>    这个是后入先出的栈<h6 id="Tomcat的类加载器"><a href="#Tomcat的类加载器" class="headerlink" title="Tomcat的类加载器"></a>Tomcat的类加载器</h6></li>
<li>有很多类加载器,一个是分离一个是共享,多级类加载器.<h5 id="Java优化"><a href="#Java优化" class="headerlink" title="Java优化"></a>Java优化</h5></li>
</ul>
<h5 id="Java并发相关"><a href="#Java并发相关" class="headerlink" title="Java并发相关"></a>Java并发相关</h5>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JVM运行时数据区域&quot;&gt;&lt;a href=&quot;#JVM运行时数据区域&quot; class=&quot;headerlink&quot; title=&quot;JVM运行时数据区域&quot;&gt;&lt;/a&gt;JVM运行时数据区域&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;程序计数器&lt;/strong&gt;   &lt;code&gt;线
    
    </summary>
    
    
      <category term="JVM" scheme="http://xu1009.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL相关基础知识</title>
    <link href="http://xu1009.github.io/2017/07/02/MYSQL%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://xu1009.github.io/2017/07/02/MYSQL相关基础知识/</id>
    <published>2017-07-02T10:19:47.000Z</published>
    <updated>2017-07-02T14:21:07.914Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一些基本知识"><a href="#一些基本知识" class="headerlink" title="一些基本知识"></a>一些基本知识</h3><ul>
<li>SELECT * FROM TABLE1 LEFT JOIN TABLE2 ON …</li>
<li><p>left join on是查询左边所有右边满足条件的记录如下所示语法</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> p.FirstName, p.LastName, a.City, a.State  <span class="keyword">FROM</span> Person p <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Address a <span class="keyword">on</span> p.PersonId = a.PersonId;</div></pre></td></tr></table></figure>
</li>
<li><p>RIGHT JOIN ON 与其对应 查询的是右边所有，左边满足条件的记录，比如上述查询等效如下：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> p.FirstName, p.LastName, a.City, a.State  <span class="keyword">FROM</span>  Address a <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span>  Person p <span class="keyword">on</span> p.PersonId = a.PersonId;</div></pre></td></tr></table></figure>
</li>
<li><p>DISTINCT 是去除查询的结果集中重复的元素</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> salary <span class="keyword">FROM</span> <span class="keyword">TABLE</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="/2017/07/02/MYSQL相关基础知识/dis.jpg" alt="distinct的用法"></p>
<ul>
<li>IN操作符如下用法<br><img src="/2017/07/02/MYSQL相关基础知识/in.jpg" alt="in操作符"><br>其中要是查找不在其中的就是加个NOT IN 这样就可以找到补集</li>
<li>between语句<br><img src="/2017/07/02/MYSQL相关基础知识/between.jpg" alt="between语句用法"><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3></li>
<li>inner join是内连接，关键字在表中存在至少一个匹配时返回行，没有匹配就不返回</li>
<li>left join和right join肯定有返回,left join是左边所有加上右边满足条件的，right join是右边所有加上左边满足条件的 </li>
<li>UNION 语句是将两个查询的结果合并，这个会去除重复的元素</li>
<li><p>union all 回列出所有元素</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span> <span class="keyword">FROM</span> C</div><div class="line"><span class="keyword">UNION</span> ALL</div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span> <span class="keyword">FROM</span> B</div></pre></td></tr></table></figure>
</li>
<li><p>group by是按类分的最后返回的感觉是两个表的样子</p>
</li>
<li>分享一个细节就是使用IN的语句时，可以 in table，不过列需要对应<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> t_topics <span class="keyword">WHERE</span> (reply_count,user_id) <span class="keyword">IN</span> (<span class="keyword">SELECT</span> user_id <span class="keyword">as</span> <span class="keyword">id</span>,<span class="keyword">max</span>(reply_count) <span class="keyword">as</span> <span class="keyword">max</span> <span class="keyword">from</span> t_topics <span class="keyword">GROUP</span> <span class="keyword">BY</span> user_id)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>比如这个，in前面的列顺序必须和后面的一致</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一些基本知识&quot;&gt;&lt;a href=&quot;#一些基本知识&quot; class=&quot;headerlink&quot; title=&quot;一些基本知识&quot;&gt;&lt;/a&gt;一些基本知识&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;SELECT * FROM TABLE1 LEFT JOIN TABLE2 ON …&lt;/li&gt;

    
    </summary>
    
    
      <category term="mysql" scheme="http://xu1009.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Nginx+tomcat+redis实现服务器集群和共享session</title>
    <link href="http://xu1009.github.io/2017/06/27/Nginx-tomcat-redis%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4%E5%92%8C%E5%85%B1%E4%BA%ABsession/"/>
    <id>http://xu1009.github.io/2017/06/27/Nginx-tomcat-redis实现服务器集群和共享session/</id>
    <published>2017-06-27T07:37:22.000Z</published>
    <updated>2017-06-27T08:13:07.331Z</updated>
    
    <content type="html"><![CDATA[<h2 id="有关Nginx"><a href="#有关Nginx" class="headerlink" title="有关Nginx"></a>有关Nginx</h2><ul>
<li>Nginx是一个代理服务器，主要功能是实现负载均衡和虚拟主机。</li>
<li>负载均衡就是使用Nginx作为代理服务器，用户请求首先是达到Nginx服务器，Nginx再根据实际情况将请求分流，分发到不同后端，这里就是后端实现了服务器集群，</li>
<li>下图就是负载均衡原理<br><img src="http://img.blog.csdn.net/20160612171735599?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="负载均衡原理"></li>
<li>有关Nginx的详细介绍可以参考该博客<a href="http://blog.csdn.net/hiyun9/article/details/51602428" target="_blank" rel="external">nginx详细介绍及配置</a><h2 id="有关redis"><a href="#有关redis" class="headerlink" title="有关redis"></a>有关redis</h2></li>
<li>redis是一个数据库，一个键值型数据库</li>
<li>redis将数据存储到内存，持久化到磁盘，所以读写速度很快</li>
<li>redis可以做关系型数据库的缓存，存储一些数据量比较小的数据<h2 id="Nginx负载均衡中的session问题"><a href="#Nginx负载均衡中的session问题" class="headerlink" title="Nginx负载均衡中的session问题"></a>Nginx负载均衡中的session问题</h2></li>
<li>负载均衡会将每次请求分发到不同的服务器</li>
<li>session保存在服务器端，sessionid在本地，这就会导致在这个服务器生成的session下次请求另一个服务器时导致无法识别的问题。</li>
<li>这就需要服务器集群之间共享session</li>
<li>最简单的问题就是登陆验证的时候，验证码保存到session中，验证码的生成是一个服务器，最后登陆验证的时候是另一个服务器，这就会导致验证失败。<h4 id="几种解决session共享的方法"><a href="#几种解决session共享的方法" class="headerlink" title="几种解决session共享的方法"></a>几种解决session共享的方法</h4></li>
</ul>
<ol>
<li><p>配置Nginx中neinx.conf的server选项，如下加入ip_hash,这样是对于同一个ip只会分发到一个服务器，这样其实失去了负载均衡的意思，而且Nginx获取的必须是用户真实的ip地址，也就是必须是最前端的服务器，配置如下</p>
<figure class="highlight roboconf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#user  nobody;</span></div><div class="line">worker_processes  1;</div><div class="line"></div><div class="line"><span class="comment">#error_log  logs/error.log;</span></div><div class="line"><span class="comment">#error_log  logs/error.log  notice;</span></div><div class="line"><span class="comment">#error_log  logs/error.log  info;</span></div><div class="line"></div><div class="line"><span class="comment">#pid        logs/nginx.pid;</span></div><div class="line"></div><div class="line"></div><div class="line">events &#123;</div><div class="line">    <span class="attribute">worker_connections  1024;</span></div><div class="line"><span class="attribute">&#125;</span></div><div class="line"><span class="attribute"></span></div><div class="line"><span class="attribute"></span></div><div class="line"><span class="attribute">http &#123;</span></div><div class="line"><span class="attribute">    include       mime.types;</span></div><div class="line"><span class="attribute">    default_type  application/octet-stream;</span></div><div class="line"><span class="attribute"></span></div><div class="line"><span class="attribute">    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span></div><div class="line"><span class="attribute">    #                  '$status $body_bytes_sent "$http_referer" '</span></div><div class="line"><span class="attribute">    #                  '"$http_user_agent" "$http_x_forwarded_for"';</span></div><div class="line"><span class="attribute"></span></div><div class="line"><span class="attribute">    #access_log  logs/access.log  main;</span></div><div class="line"><span class="attribute"></span></div><div class="line"><span class="attribute">    sendfile        on;</span></div><div class="line"><span class="attribute">    #tcp_nopush     on;</span></div><div class="line"><span class="attribute"></span></div><div class="line"><span class="attribute">    #keepalive_timeout  0;</span></div><div class="line"><span class="attribute">    keepalive_timeout  65;</span></div><div class="line"><span class="attribute"></span></div><div class="line"><span class="attribute">    #gzip  on;</span></div><div class="line"><span class="attribute">upstream netitcast.com&#123;</span></div><div class="line"><span class="attribute">   server  127.0.0.1</span>:18080 weight=1;</div><div class="line">   <span class="attribute">server  127.0.0.1</span>:28080 weight=2;</div><div class="line">   <span class="attribute">ip_hash; #这里配置</span></div><div class="line"><span class="attribute">&#125;</span></div><div class="line"><span class="attribute">    server &#123;</span></div><div class="line"><span class="attribute">        listen       80;</span></div><div class="line"><span class="attribute">        server_name  localhost;</span></div><div class="line"><span class="attribute"></span></div><div class="line"><span class="attribute">        #charset koi8-r;</span></div><div class="line"><span class="attribute"></span></div><div class="line"><span class="attribute">        #access_log  logs/host.access.log  main;</span></div><div class="line"><span class="attribute"></span></div><div class="line"><span class="attribute">        #location / &#123;</span></div><div class="line"><span class="attribute">        #    root   html;</span></div><div class="line"><span class="attribute">        #    index  index.html index.htm;</span></div><div class="line"><span class="attribute">        #&#125;</span></div><div class="line"><span class="attribute">		location / &#123;</span></div><div class="line"><span class="attribute">			proxy_pass  http</span>://netitcast<span class="variable">.com</span>;</div><div class="line">			<span class="attribute">proxy_redirect  default;</span></div><div class="line"><span class="attribute">		&#125;</span></div><div class="line"><span class="attribute"></span></div><div class="line"><span class="attribute">        #error_page  404              /404.html;</span></div><div class="line"><span class="attribute"></span></div><div class="line"><span class="attribute">        # redirect server error pages to the static page /50x.html</span></div><div class="line"><span class="attribute">        #</span></div><div class="line"><span class="attribute">        error_page   500 502 503 504  /50x.html;</span></div><div class="line"><span class="attribute">        location = /50x.html &#123;</span></div><div class="line"><span class="attribute">            root   html;</span></div><div class="line"><span class="attribute">        &#125;</span></div><div class="line"><span class="attribute"></span></div><div class="line"><span class="attribute">        # proxy the PHP scripts to Apache listening on 127.0.0.1</span>:80</div><div class="line">        #</div><div class="line">        #location ~ \<span class="variable">.php</span>$ &#123;</div><div class="line">        #    proxy_pass   http://127.0.0.1;</div><div class="line">        <span class="comment">#&#125;</span></div><div class="line"></div><div class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></div><div class="line">        <span class="comment">#</span></div><div class="line">        <span class="comment">#location ~ \.php$ &#123;</span></div><div class="line">        <span class="comment">#    root           html;</span></div><div class="line">        <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></div><div class="line">        <span class="comment">#    fastcgi_index  index.php;</span></div><div class="line">        <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></div><div class="line">        <span class="comment">#    include        fastcgi_params;</span></div><div class="line">        <span class="comment">#&#125;</span></div><div class="line"></div><div class="line">        <span class="comment"># deny access to .htaccess files, if Apache's document root</span></div><div class="line">        <span class="comment"># concurs with nginx's one</span></div><div class="line">        <span class="comment">#</span></div><div class="line">        <span class="comment">#location ~ /\.ht &#123;</span></div><div class="line">        <span class="comment">#    deny  all;</span></div><div class="line">        <span class="comment">#&#125;</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration</span></div><div class="line">    <span class="comment">#</span></div><div class="line">    <span class="comment">#server &#123;</span></div><div class="line">    <span class="comment">#    listen       8000;</span></div><div class="line">    <span class="comment">#    listen       somename:8080;</span></div><div class="line">    <span class="comment">#    server_name  somename  alias  another.alias;</span></div><div class="line"></div><div class="line">    <span class="comment">#    location / &#123;</span></div><div class="line">    <span class="comment">#        root   html;</span></div><div class="line">    <span class="comment">#        index  index.html index.htm;</span></div><div class="line">    <span class="comment">#    &#125;</span></div><div class="line">    <span class="comment">#&#125;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment"># HTTPS server</span></div><div class="line">    <span class="comment">#</span></div><div class="line">    <span class="comment">#server &#123;</span></div><div class="line">    <span class="comment">#    listen       443 ssl;</span></div><div class="line">    <span class="comment">#    server_name  localhost;</span></div><div class="line"></div><div class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></div><div class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></div><div class="line"></div><div class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></div><div class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></div><div class="line"></div><div class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></div><div class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></div><div class="line"></div><div class="line">    <span class="comment">#    location / &#123;</span></div><div class="line">    <span class="comment">#        root   html;</span></div><div class="line">    <span class="comment">#        index  index.html index.htm;</span></div><div class="line">    <span class="comment">#    &#125;</span></div><div class="line">    <span class="comment">#&#125;</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>第二个就是使用redis存储session了</p>
<blockquote>
<p> 这里使用的是tomcat-redis-session-manager框架，该框架是基于tomcat服务器的，只需要在tomcat中加入tomcat-redis-session-1.0-SNAPSHOT.jar、jedis-2.7.2.jar、commons-pool2-2.0.jar三个包<br> 三个包的下载地址<a href="http://download.csdn.net/detail/u010870518/9585716" target="_blank" rel="external">点击下载</a>网上很多包不能用，这里是可以用的，不过是对于tomcat7</p>
</blockquote>
</li>
</ol>
<ul>
<li><p>修改Tomcat的conf/context.xml，加入redis的相关连接信息，配置如下</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve"</span> /&gt;</span>  </div><div class="line"> <span class="tag">&lt;<span class="name">Manager</span> <span class="attr">className</span>=<span class="string">"com.orangefunction.tomcat.redissessions.RedisSessionManager"</span>  </span></div><div class="line"><span class="tag">  <span class="attr">host</span>=<span class="string">"localhost"</span>  </span></div><div class="line"><span class="tag">  <span class="attr">port</span>=<span class="string">"6379"</span>  </span></div><div class="line"><span class="tag">  <span class="attr">database</span>=<span class="string">"0"</span>  </span></div><div class="line"><span class="tag">  <span class="attr">maxInactiveInterval</span>=<span class="string">"60"</span> /&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>这样就可以在新建session的时候将session存储到redis然后读取的时候从redis获取，redis是服务器集群的共享，<br>下图是原理<br><img src="http://img.blog.csdn.net/20160725171038125" alt="redis共享session的原理"></p>
</li>
<li>在默认的情况下Tomcat的Session管理，如果不进行设置的话是由Tomcat自带的tandardManager类进行控制的，我们可以根据这个类自定义一个Manager，主要重写的就是org.apache.catalina.session.ManagerBase里边的具体写的操作，<br>这也是tomcat-redis-session-manager的基本原理，将tomcat的session存储位置指向了Redis</li>
<li>RedisSessionManager继承了org.apache.catalina.session.ManagerBase并重写了add、findSession、createEmptySession、remove等方法，并将对session的增删改查操作指向了对Redis数据存储的操作</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;有关Nginx&quot;&gt;&lt;a href=&quot;#有关Nginx&quot; class=&quot;headerlink&quot; title=&quot;有关Nginx&quot;&gt;&lt;/a&gt;有关Nginx&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Nginx是一个代理服务器，主要功能是实现负载均衡和虚拟主机。&lt;/li&gt;
&lt;li&gt;负载均
    
    </summary>
    
    
      <category term="学习，Nginx，redis" scheme="http://xu1009.github.io/tags/%E5%AD%A6%E4%B9%A0%EF%BC%8CNginx%EF%BC%8Credis/"/>
    
  </entry>
  
  <entry>
    <title>golang学习</title>
    <link href="http://xu1009.github.io/2017/06/23/golang%E5%AD%A6%E4%B9%A0/"/>
    <id>http://xu1009.github.io/2017/06/23/golang学习/</id>
    <published>2017-06-23T07:37:14.000Z</published>
    <updated>2017-06-24T12:27:33.173Z</updated>
    
    <content type="html"><![CDATA[<h3 id="go语言"><a href="#go语言" class="headerlink" title="go语言"></a>go语言</h3><p>先来一段代码感受一下<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</div><div class="line">	fmt.Print(<span class="string">"hello world"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>分析一下这段代码</p>
<ul>
<li>包是main这个也是有意义的，包是main的表示该段代码可以独立执行</li>
<li>main函数和正常的程序一样，程序运行时首先执行的，如果有init函数就执行init</li>
<li>标识符首字母的大小写决定了该变量的可见性，大写就是public，小写是private</li>
</ul>
<hr>
<p>go语言也需要提前声明变量</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">1</span></div><div class="line"><span class="keyword">var</span> a = <span class="number">1</span></div><div class="line">a := <span class="number">10</span></div></pre></td></tr></table></figure>
<blockquote>
<p>常量const，不能被修改的量</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;go语言&quot;&gt;&lt;a href=&quot;#go语言&quot; class=&quot;headerlink&quot; title=&quot;go语言&quot;&gt;&lt;/a&gt;go语言&lt;/h3&gt;&lt;p&gt;先来一段代码感受一下&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
    
    </summary>
    
    
      <category term="golang" scheme="http://xu1009.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>常用RPC框架</title>
    <link href="http://xu1009.github.io/2017/06/22/%E5%B8%B8%E7%94%A8RPC%E6%A1%86%E6%9E%B6/"/>
    <id>http://xu1009.github.io/2017/06/22/常用RPC框架/</id>
    <published>2017-06-22T07:16:22.000Z</published>
    <updated>2017-06-23T07:17:06.835Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DUBBO远程调用框架"><a href="#DUBBO远程调用框架" class="headerlink" title="DUBBO远程调用框架"></a>DUBBO远程调用框架</h1><h3 id="spring配置方式"><a href="#spring配置方式" class="headerlink" title="spring配置方式"></a>spring配置方式</h3><p><a href="http://blog.csdn.net/u013142781/article/details/50387583" target="_blank" rel="external">spring配置dubbo</a></p>
<h3 id="dubbo-admin搭建"><a href="#dubbo-admin搭建" class="headerlink" title="dubbo-admin搭建"></a>dubbo-admin搭建</h3><ul>
<li>这个dubbo-admin部署到tomcat上只能使用jdk1.7以下版本否则会报错</li>
<li>教程<br><a href="http://blog.csdn.net/u013142781/article/details/50396621" target="_blank" rel="external">配置dubbo-admin</a><h3 id="Zookeeper搭建，这是个注册中心"><a href="#Zookeeper搭建，这是个注册中心" class="headerlink" title="Zookeeper搭建，这是个注册中心"></a>Zookeeper搭建，这是个注册中心</h3></li>
<li>服务器端将需要需要远程的方法注册到该注册中心</li>
<li>客户端进行订阅该注册中心</li>
<li>这里需要几个jar包</li>
<li>dubbo netty zookeeper zkclient jline</li>
<li><a href="http://blog.csdn.net/u013142781/article/details/50395650" target="_blank" rel="external">zookeeper配置</a></li>
</ul>
<hr>
<h1 id="redis的应用场景的介绍"><a href="#redis的应用场景的介绍" class="headerlink" title="redis的应用场景的介绍"></a>redis的应用场景的介绍</h1><p><a href="http://blog.nosqlfan.com/html/2235.html" target="_blank" rel="external">redis作者谈redis应用场景</a></p>
<ul>
<li>Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)</li>
<li>string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。</li>
<li>string类型是Redis最基本的数据类型，一个键最大能存储512MB。</li>
<li>redis以内存作为存储介质的数据库，高速存储是他的特点，可以作为MySQL的高速缓存</li>
<li>众多语言都支持Redis，因为Redis交换数据快，所以在服务器中常用来存储一些需要频繁调取的数据，这样可以大大节省系统直接读取磁盘来获得数据的I/O开销，更重要的是可以极大提升速度。</li>
<li>redis将数据写到内存，也会持久化到磁盘，断电之后重启数据会自动恢复，这点很强，数据是放到了运行内存中</li>
<li>redis存储对象是将对象序列化<h4 id="spring配置redis过程"><a href="#spring配置redis过程" class="headerlink" title="spring配置redis过程"></a>spring配置redis过程</h4></li>
<li><p>redis.xml</p>
<blockquote>
<p>spring也是将操作redis的方法封装到模板中了，这和jdbc和hibernate非常像 需要添加spring-data-redis包</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;   </div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span>   </span></div><div class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>   </span></div><div class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span>   </span></div><div class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span>   </span></div><div class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd   </span></span></div><div class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"</span>&gt;</span>  </div><div class="line"> </div><div class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:redis.properties"</span>/&gt;</span> </div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"propertyConfigurerRedis"</span>  </span></div><div class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignoreUnresolvablePlaceholders"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"systemPropertiesMode"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"searchSystemEnvironment"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span>  </div><div class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:redis.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisPoolConfig"</span>  </span></div><div class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"300"</span> /&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">     </div><div class="line">     </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisConnectionFactory"</span>  </span></div><div class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.jedis.JedisConnectionFactory"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"usePool"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hostName"</span> <span class="attr">value</span>=<span class="string">"localhost"</span> /&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"6379"</span> /&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeout"</span> <span class="attr">value</span>=<span class="string">"5000"</span> /&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"database"</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"jedisPoolConfig"</span> /&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- spring封装到模板了 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisTemplate"</span>  </span></div><div class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.core.StringRedisTemplate"</span>    </span></div><div class="line"><span class="tag">        <span class="attr">p:connectionFactory-ref</span>=<span class="string">"jedisConnectionFactory"</span> &gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">        </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisBase"</span> <span class="attr">abstract</span>=<span class="string">"true"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"template"</span> <span class="attr">ref</span>=<span class="string">"redisTemplate"</span>/&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </div><div class="line">    </div><div class="line">  </div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>java操作redis</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ApplicationContext context = <span class="keyword">new</span> FileSystemXmlApplicationContext(<span class="string">"src\\redis.xml"</span>);</div><div class="line">	<span class="keyword">final</span> RedisTemplate&lt;Serializable, Serializable&gt; redis = (RedisTemplate&lt;Serializable, Serializable&gt;) context.getBean(<span class="string">"redisTemplate"</span>);</div><div class="line">	<span class="keyword">final</span> JedisConnectionFactory rf = (JedisConnectionFactory) context.getBean(<span class="string">"jedisConnectionFactory"</span>);</div><div class="line">	 Jedis con = rf.getConnection().getNativeConnection();<span class="comment">//获得了redis对象可以直接操作</span></div><div class="line"><span class="comment">//其实也可以使用spring的模板但是感觉不方便</span></div><div class="line"><span class="comment">//spring模板存储对象的时候比较好</span></div><div class="line">		</div><div class="line">	System.out.println(con.get(<span class="string">"spring"</span>));</div><div class="line">	System.out.println(con.keys(<span class="string">"*"</span>));</div><div class="line">	con.set(<span class="string">"jedis"</span>, <span class="string">"success"</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="dubbo-server的xml配置如下"><a href="#dubbo-server的xml配置如下" class="headerlink" title="dubbo server的xml配置如下"></a>dubbo server的xml配置如下</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span></span></div><div class="line"><span class="tag">	<span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">	<span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span> </span></div><div class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></div><div class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd</span></span></div><div class="line"><span class="tag"><span class="string">	http://code.alibabatech.com/schema/dubbo  </span></span></div><div class="line"><span class="tag"><span class="string">    http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"server"</span> <span class="attr">class</span>=<span class="string">"dubboServer.DubboServer"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">	</div><div class="line">	<span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"xixi_provider"</span>/&gt;</span></div><div class="line">	</div><div class="line">	 <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"dubbo.RegisterService"</span> <span class="attr">ref</span>=<span class="string">"server"</span> /&gt;</span>	</div><div class="line">	</div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="dubbo-client配置"><a href="#dubbo-client配置" class="headerlink" title="dubbo client配置"></a>dubbo client配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span></span></div><div class="line"><span class="tag">	<span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">	<span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span> </span></div><div class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></div><div class="line"><span class="tag"><span class="string">	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd</span></span></div><div class="line"><span class="tag"><span class="string">	http://code.alibabatech.com/schema/dubbo  </span></span></div><div class="line"><span class="tag"><span class="string">    http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></div><div class="line"></div><div class="line">	</div><div class="line">	<span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"hehe_provider"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span> /&gt;</span> 	</div><div class="line">	<span class="tag">&lt;<span class="name">dubbo:reference</span>  <span class="attr">id</span>=<span class="string">"RegisterService"</span> <span class="attr">interface</span>=<span class="string">"dubbo.RegisterService"</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;DUBBO远程调用框架&quot;&gt;&lt;a href=&quot;#DUBBO远程调用框架&quot; class=&quot;headerlink&quot; title=&quot;DUBBO远程调用框架&quot;&gt;&lt;/a&gt;DUBBO远程调用框架&lt;/h1&gt;&lt;h3 id=&quot;spring配置方式&quot;&gt;&lt;a href=&quot;#spring配
    
    </summary>
    
    
      <category term="总结" scheme="http://xu1009.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>javaWeb基本知识</title>
    <link href="http://xu1009.github.io/2017/06/22/javaWeb%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/"/>
    <id>http://xu1009.github.io/2017/06/22/javaWeb基本知识/</id>
    <published>2017-06-22T06:45:49.000Z</published>
    <updated>2017-06-22T06:45:49.694Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spring相关内容总结</title>
    <link href="http://xu1009.github.io/2017/06/22/Spring%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://xu1009.github.io/2017/06/22/Spring相关内容总结/</id>
    <published>2017-06-22T01:47:22.000Z</published>
    <updated>2017-09-25T13:05:59.952Z</updated>
    
    <content type="html"><![CDATA[<h3 id="spring的特点"><a href="#spring的特点" class="headerlink" title="spring的特点"></a>spring的特点</h3><ul>
<li>非入侵框架，应用程序对框架依赖更小</li>
<li>提供了一种在任何环境下都可以使用的编程模型，代码和环境分离</li>
<li>提高代码重用性</li>
</ul>
<h3 id="反向控制和依赖注入"><a href="#反向控制和依赖注入" class="headerlink" title="反向控制和依赖注入"></a>反向控制和依赖注入</h3><ul>
<li>spring剥夺了调用者创建被调用者的权利，这叫反向控制，也叫依赖注入，这些都是在xml中进行实例化，调用者再通过xml引入，这样调用者和被调用者之间的耦合度就降低了。</li>
<li>反向控制的具体实现就是在xml中实例化，然后引入该xml</li>
<li>方向控制的核心思想就是建立对象的过程在对象工厂外面进行，对象工厂通过多态的方式来建立相应对象</li>
<li>调用者依赖spring IOC容器来获得（注入）对象实例</li>
<li>这里面有点设计模式的感觉，就是类之间的直接引用导致代码耦合度过高，不便于维护和拓展，这里就应该降低耦合度，所以需要在外部创建另一个类的实例，另一个类再引用就行了。</li>
<li>spring默认实例化bean的时候是单例模式，<strong>scope属性</strong>可以更改</li>
<li>spring加入构造函数的参数时，所有参数默认都是string类型进行查找</li>
<li>还可以通过autowire进行自动装配，这个是通过类型名字等装配属性或者构造函数的参数<h4 id="spring装配时的属性编辑器"><a href="#spring装配时的属性编辑器" class="headerlink" title="spring装配时的属性编辑器"></a>spring装配时的属性编辑器</h4></li>
<li>属性编辑器就是使用一些基本类型的数据来装配其它类型的属性，比如URL url，本来url属性是个对象，但是实际使用的时候可以直接使用string类型来装配，这就是属性编辑器的功能。</li>
<li>属性编辑器需要继承那个类然后覆盖响应的方法，最后在xml中进行装配该属性编辑器。</li>
</ul>
<hr>
<h3 id="面向切面编程AOP"><a href="#面向切面编程AOP" class="headerlink" title="面向切面编程AOP"></a>面向切面编程AOP</h3><ul>
<li>传统的OOP不能做到随时在某个类中加入某个功能实现</li>
<li>即使加上了，后期维护拓展也很难</li>
<li>AOP就是往这些类中加入一些实现，而这些实现不是在类中，而是在aspect中，这样就使得这些实现很容易维护。</li>
<li>spring有自己的AOP框架，还可以使用其他的比如 AspectJ Jboss AOP</li>
<li>Spring的事务管理就是用的这个，就是在指定方法中进行事务的代理，将改方法放到事务中处理，也就是在指定的方法中加入了事务的实现。<h4 id="面向切面编程一些基本特点"><a href="#面向切面编程一些基本特点" class="headerlink" title="面向切面编程一些基本特点"></a>面向切面编程一些基本特点</h4></li>
<li>方面（aspect）相当于OOP中的类，封装用于横插入系统的功能。</li>
<li>通知（advice）就是方面中的方法，要插入的功能实现在这里写</li>
<li>连接点（joinpoint）应用程序插入方面的地点，就是指定哪些类。</li>
<li>切入点（pointcut）这个就是指定连接点中的方法</li>
<li>目标（target）AOP的目标，要拦截的靶子</li>
<li>代理（proxy）也是一个类，相当于目标类的子类，通过这个子类来访问目标类</li>
<li>织入（weaving）在目标对象中插入方面代码的过程叫做织入</li>
</ul>
<hr>
<h4 id="前置通知（beforeadvice）"><a href="#前置通知（beforeadvice）" class="headerlink" title="前置通知（beforeadvice）"></a>前置通知（beforeadvice）</h4><ul>
<li>顾名思义，就是在目标方法之前完成的</li>
<li>这里就是拦截了指定接口中的所有方法，然后在advice中可以获取该方法，方法的参数，以及该方法所在类。</li>
<li>前置通知还可以改变拦截方法的参数</li>
</ul>
<hr>
<h4 id="后置通知（afteradvice）"><a href="#后置通知（afteradvice）" class="headerlink" title="后置通知（afteradvice）"></a>后置通知（afteradvice）</h4><ul>
<li>后置通知和前置通知原理是一样的，只不过他是在目标方法完成之后执行的</li>
</ul>
<hr>
<h4 id="环绕通知（aroundadvice）"><a href="#环绕通知（aroundadvice）" class="headerlink" title="环绕通知（aroundadvice）"></a>环绕通知（aroundadvice）</h4><ul>
<li>环绕通知有点不同的是它可以阻止目标方法的执行（这里可以使一些调试的方法在发布之后不执行，不删除，方便下次调试，发布时还不影响）</li>
<li>环绕通知还可以控制目标方法的返回值</li>
</ul>
<hr>
<h4 id="异常通知（throws-advice）"><a href="#异常通知（throws-advice）" class="headerlink" title="异常通知（throws advice）"></a>异常通知（throws advice）</h4><ul>
<li>异常通知就是在异常发生时执行</li>
<li>该异常通知处理完之后，异常仍然抛出，若想捕获还需要使用try catch进行异常的捕获。</li>
</ul>
<hr>
<h3 id="使用advisor指定切入点（就是指定拦截哪些方法）"><a href="#使用advisor指定切入点（就是指定拦截哪些方法）" class="headerlink" title="使用advisor指定切入点（就是指定拦截哪些方法）"></a>使用advisor指定切入点（就是指定拦截哪些方法）</h3><ul>
<li>前面那些是拦截了目标接口中的所有方法，这个就不能容忍，降低系统效率。</li>
<li>这个配置是有点麻烦的，下面是一个实例</li>
</ul>
<p><img src="/2017/06/22/Spring相关内容总结/pointcut.png" alt="potincut"></p>
<p>目标接口中的方法被调用之前会先调用这个match方法判断是否是指定的方法。</p>
<hr>
<h3 id="使用控制流切入点，这个是可以拦截某种情况下调用的方法，比如只拦截在某个类中调用的该方法"><a href="#使用控制流切入点，这个是可以拦截某种情况下调用的方法，比如只拦截在某个类中调用的该方法" class="headerlink" title="使用控制流切入点，这个是可以拦截某种情况下调用的方法，比如只拦截在某个类中调用的该方法"></a>使用控制流切入点，这个是可以拦截某种情况下调用的方法，比如只拦截在某个类中调用的该方法</h3><ul>
<li>这个是动态切入点最好不要使用</li>
</ul>
<hr>
<h3 id="spring的事务管理"><a href="#spring的事务管理" class="headerlink" title="spring的事务管理"></a>spring的事务管理</h3><ul>
<li>spring把事务委托给第三方管理，transactionManager类中配置事务</li>
<li>通常是通过事务模板来操作数据库</li>
<li>这里分为编程式事务和声明式事务<h5 id="编程式事务"><a href="#编程式事务" class="headerlink" title="编程式事务"></a>编程式事务</h5></li>
<li>编程式事务就是执行execut方法时回调一个方法，该方法会放在事务中执行</li>
<li>编程式事务不方便</li>
</ul>
<p><img src="/2017/06/22/Spring相关内容总结/transactionOfP.png" alt="编程式事务"></p>
<h4 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h4><ul>
<li>这个是最常用的事务管理方式，可以配置事务属性</li>
<li>不需要编程，只是在xml中进行配置，有点AOP的感觉，拦截了指定接口中的方法，并在该方法中加入事务</li>
<li>这个hibernate事务中经常用到，不过hibernate中用到的是BeanNameAutoProxyCreator，这个类中指定拦截的类，然后再在interceptorNames属性指定拦截器</li>
<li>拦截器中指定拦截的方法及事务属性，这样就能自动为指定的方法产生事务代理</li>
<li>hibernate4之后不能使用事务模板了，所以直接使用hibernate原生的方法操作数据库，也就是使用session，xml配置sessionfactory，还有就是配置hibernate DataSource时不能使用hibernate生成的那个xml了，只能在spring自己的xml中配置。</li>
</ul>
<p>下面是具体的配置</p>
<p><img src="/2017/06/22/Spring相关内容总结/autoproxytransaction.png" alt="beanname"></p>
<blockquote>
<p>spring是一个轻量级开发应用框架，一个完整的应用是由一组相互协作的对象组成，spring就是是的这些对象在完成功能的同时实现低耦合，高内聚。spring一部分功能就是管理这些对象，处理对象间的依赖关系。spring还提供像通用日志记录、性能统计、安全控制、异常处理等面向切面的能力，还有数据库事物。超级粘合平台，除了自己提供功能外，还提供粘合其它技术和框架的能力。</p>
</blockquote>
<p>spring的优点</p>
<ol>
<li>非常轻量级的容器，主要是Ioc和DI，集中管理对象和对象间依赖关系，实现低耦合。而且spring容器是非入侵式的（不需要依赖spring的类），spring不依赖环境，可以部署到很多环境。</li>
<li>AOP，面向切面编程，实现代码的复用，就是将一些通用功能提取出来，然后将这些通用功能在合适的时候织入到应用程序中。</li>
<li>简单数据库事物管理，其实用到的也是AOP的功能。</li>
</ol>
<p>spring的整体结构如下<br><img src="http://sishuok.com/forum/upload/2012/2/19/c7d3b7851018141de052e5133093873b__1.JPG" alt=""></p>
<h3 id="IOC-DI"><a href="#IOC-DI" class="headerlink" title="IOC/DI"></a>IOC/DI</h3><p>控制反转，传统方式是一个类需要其它对象，是直接使用new实例化一个，但是这种导致对象间耦合度过高，现在对象的创建交给ioc容器了，由ioc容器控制对象的创建并获得需要改对象的地方，将容器中的实例化对象注入进去。这个体现了OOP设计法则之一，好莱坞法则，别找我们，我们找你。IOC通过反射的技术来实例化对象。</p>
<p>依赖注入 bean依赖IOC容器，IOC容器注入bean依赖资源。</p>
<p>spring的延迟初始化bean(创建容器时，提前初始化singleto作用域的bean)，这个就是指不提前初始化bean，而是只有在真正使用时才创建和初始化bean<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=<span class="string">"helloApi"</span>  </div><div class="line"><span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.javass.spring.chapter2.helloworld.HelloImpl"</span>  </div><div class="line">lazy-init=<span class="string">"true"</span>/&gt;</div></pre></td></tr></table></figure></p>
<h3 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h3><p> Spring的Resource接口代表底层外部资源，提供了对底层外部资源的一致性访问接口。比如常见的加载类路径下的资源文件，还可以使用路径通配符，?匹配一个字符串，<em> 匹配零个或多个字符串，<br> *</em>匹配路径中的零个或多个目录。</p>
<h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><blockquote>
<p>OOP最大问题就是无法解耦组件进行开发，AOP为开发者提供一种进行横切关注点分离并织入的机制，把横切关注点分离，然后通过某种技术织入到系统中，从而解耦。</p>
</blockquote>
<h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ul>
<li>连接点（joinpoint）：表示在程序中插入横切关注点的拓展点，连接点可能是类初始化、方法执行、方法调用、字段调用或处理异常，spring只支持方法执行连接点，在AOP中表示在哪里干。</li>
<li>切入点（Pointcut）：连接点集合，支持正则表达式定义切入点。</li>
<li>通知（advice）：在连接点上执行的行为，这个就是具体实现，在连接点需要插入的行为。</li>
<li>方面/切面（Aspect）：横切关注点的模块化，可以认为是通知、引入和切入点的组合。</li>
<li>引入（inter-type declaretion）：也称为内部类型声明，为已有的类添加额外新的字段或方法，spring允许引入新的接口道所有被代理对象。</li>
<li>目标对象（target object）：这个就是切入点选择的对象，也是代理对象。</li>
<li>织入（weaving）：织入是一个过程，是将切面应用到目标对象从而创建出AOP代理对象的过程。</li>
</ul>
<p>下面是具体xml配置，首先指定切入点，然后定义切面，切面里面包括切入点和通知。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"point"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.xq..*.*(..))"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"aspect"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"beforeAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"point"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"afterFinallyAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"point"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><img src="http://sishuok.com/forum/upload/2012/2/21/b362f09e4812acff043a4c8bfc2ce1d0__1.JPG" alt=""><br>下面是在spring配置文件中aop的详细配置<br><img src="http://sishuok.com/forum/upload/2012/2/21/a384cf881a9a348b1bf2146232744f36__1.JPG" alt=""></p>
<p>说一下引用，引用就是直接给加方法，使得目标对象实现了某个接口，具有某个方法。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"point"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.xq..*.*(..))"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"aspect"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"beforeAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"point"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"afterFinallyAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"point"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">aop:declare-parents</span> <span class="attr">types-matching</span>=<span class="string">"com.xq..*.IHelloWorldService+"</span> <span class="attr">implement-interface</span>=<span class="string">"com.xq.aop.IntroducService"</span> <span class="attr">default-impl</span>=<span class="string">"com.xq.aop.impl.IntroducServiceImpl"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>advisor 就是只有一个通知和一个切入点的切面，然后切入点的话还是按之前的方式设置，通知类就必须实现相应的接口（入侵式），这比普通的aspect要麻烦的多。</p>
<p>还有一种使用注解的方式，不过这种方式感觉好麻烦，不建议使用，如果使用的话就是在xml配置文件中使用 <aop:aspectj-autoproxy>就能使用注解的方式了。</aop:aspectj-autoproxy></p>
<h4 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h4><ol>
<li>execution（方法表达式）匹配方法执行<br>举几个例子，这个可以在项目中慢慢体会，没啥。</li>
</ol>
<p>public <em> </em>(..)          任何公共方法执行</p>
<pre><code>* cn.javass..IPointcutService.*() cn.javass包及其子包下的IPointcutService接口中的任何无参方法。
</code></pre><ol>
<li>within 匹配指定类型内的方法执行<br>within(cn.javass..*)   cn.javass包及子包下的任何方法执行</li>
<li>this（类型权限定名）匹配当前AOP代理对象类型的执行方法。<br>this(cn.javass.spring.chapter6.service.IPointcutService)    当前AOP对象实现了 IPointcutService接口的任何方法</li>
</ol>
<p>AOP默认使用的是jdk的动态代理，这需要目标对象实现了某个接口，当目标对象没有实现接口的时候，就使用CGLIB代理来实现AOP。CGLIB不仅能进行接口代理也能进行类代理。</p>
<h3 id="spring的JDBC支持"><a href="#spring的JDBC支持" class="headerlink" title="spring的JDBC支持"></a>spring的JDBC支持</h3><blockquote>
<p>虽然这个现在基本上不会直接使用JDBC操作了，但是还是要了解一下，spring简化了jdbc编程，主要提供三种方式，一种是JDBC模板、关系数据库对象化方式和simpleJdbc，后来的orm框架都不会使用这些了。JDBC模板对事务进行了处理，操作上更简单，封装了很多方法，</p>
</blockquote>
<h3 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h3><blockquote>
<p>对象关系映射，Java对象状态自动映射到关系数据库中的数据上，从而提供透明化的持久化支持。</p>
</blockquote>
<p>当前ORM框架hibernate、JPA、mybatis、JDO等</p>
<ul>
<li>hibernate，全自动的ORM框架，能自动为对象生成相应的sql并透明化的持久化对象到数据库。通过SessionFactory获取session进行操作，必须自己控制事务，这很麻烦，所以spring还支持了hibernateTemplate模板来简化事务，这个和jdbc事务基本上差不多，由于是全自动化的，所以给程序猿的发挥空间就很少了，这是缺点</li>
<li>mybatis是一个半自动化的orm框架，可以自己写sql。比hibernate要简单的多。</li>
<li>JPA,也是一个ORM框架，spring也集成了这个。<h3 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务"></a>数据库事务</h3></li>
</ul>
<p>数据库事物属性ACID</p>
<ul>
<li>原子性：事务是不可分割的最小工作单元，事务内的操作要么全部成功，要么全部失败。</li>
<li>一致性：事务执行前数据库的数据处于正确的状态，事务执行后数据的数据还是处于正确状态。</li>
<li>隔离性：事务之间的隔离性，在一个事务内部的操作对其他事务不产生影响，这里面存在隔离级别。</li>
<li>持久性：事务一旦执行成功，它对数据的数据的改变必须是永久的。</li>
</ul>
<p>多个事务并发执行带来的问题，解决的是事务之间并发访问一个数据库的问题。</p>
<ul>
<li>脏读：一个事务看到了另一个事务未提交的更新数据</li>
<li>幻读：一个事务在执行过程中读取到了另一个事务已经提交的插入数据，即在第一个事务开始时读取到一批数据，但此后另一个事务又插入了新数据并提交，此时第一个事务又读取这批数据发现多了一条，好像发生幻觉一样。</li>
<li>丢失更新：两个事务同时更新一行数据，最后一个事务的更新会覆盖掉第一个事务的更新，没有加锁造成的。</li>
<li>不可重复读：在同一个事务中，多次读取同一数据返回不同结果，也就是有其他事务更改了这些数据。</li>
</ul>
<p>解决并发问题，这就存在了数据库隔离级别</p>
<ul>
<li>未提交读：最低隔离级别，并发的四个问题都有可能出现。</li>
<li>已提交读：可以避免丢死更新，脏读，可能能出现不可重复读，幻读，一个事务能读取到别的事务提交的更新数据，不能看到未提交的更新数据。</li>
<li>可重复读：保证同一事务先后执行的多次查询将返回同一结果，不受其他事务影响，不能避免幻读</li>
<li>可序列化：都能避免，不允许事务并发执行，必须串行执行。</li>
</ul>
<p>隔离级别越高数据库事务并发执行性能越差，实际项目开发中一般使用已提交读，不可重复读和幻读靠乐观锁或悲观锁来解决这些问题。</p>
<p>数据库事务分为本地事务和分布式事务</p>
<p>Java事务类型有JDBC事务和JTA事务</p>
<h3 id="spring内置事务"><a href="#spring内置事务" class="headerlink" title="spring内置事务"></a>spring内置事务</h3><ol>
<li>jdbc及mybatis框架事务管理器DataSourceTrancationManager</li>
<li>hibernate事务</li>
<li>jpa事务</li>
<li>jdo事务<h3 id="spring的注解"><a href="#spring的注解" class="headerlink" title="spring的注解"></a>spring的注解</h3></li>
</ol>
<p>依赖注入的装配<br>autowired根据类型，可以使用qualifier限定符限定名字，不过注册的时候也要使用这个限定符限定名字。<br>resource默认根据类型装配，也可以指定名字进行装配。<br>inject对应autowired<br>named是给bean加个名字</p>
<p>value是给加值<br>注册的注解<br>一般都使用component下的分层，这个没啥</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;spring的特点&quot;&gt;&lt;a href=&quot;#spring的特点&quot; class=&quot;headerlink&quot; title=&quot;spring的特点&quot;&gt;&lt;/a&gt;spring的特点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;非入侵框架，应用程序对框架依赖更小&lt;/li&gt;
&lt;li&gt;提供了一种在任何环
    
    </summary>
    
    
      <category term="总结" scheme="http://xu1009.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>测试一下上传图片</title>
    <link href="http://xu1009.github.io/2017/06/21/%E6%B5%8B%E8%AF%95%E4%B8%80%E4%B8%8B%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"/>
    <id>http://xu1009.github.io/2017/06/21/测试一下上传图片/</id>
    <published>2017-06-21T02:46:27.000Z</published>
    <updated>2017-06-21T04:05:11.360Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h3 id="测试一下上传图片"><a href="#测试一下上传图片" class="headerlink" title="测试一下上传图片"></a>测试一下上传图片</h3><h4 id="下面是一个图片"><a href="#下面是一个图片" class="headerlink" title="下面是一个图片"></a>下面是一个图片</h4><p><img src="/2017/06/21/测试一下上传图片/Koala.jpg" alt="考拉"></p>
<h3 id="如何使用hexo在blog中插入一张本地图片"><a href="#如何使用hexo在blog中插入一张本地图片" class="headerlink" title="如何使用hexo在blog中插入一张本地图片"></a>如何使用hexo在blog中插入一张本地图片</h3><p>1.首先是将主页配置文件_config.yml里面的post_asset_folder:这个选项设置为true<br>2.然后需要安装一个上传图片的插件</p>
<blockquote>
<p>npm install hexo-asset-image –save 这是下载dalao的git</p>
</blockquote>
<ul>
<li>再次新建博文时，就会在博文目录下生成一个同名文件夹</li>
<li>只需要将图片放到该文件夹中就行</li>
<li>引用时就是直接  <em>*</em>/name.jpg就可以</li>
</ul>
<h3 id="引入一个逗比图"><a href="#引入一个逗比图" class="headerlink" title="引入一个逗比图"></a>引入一个逗比图</h3><p><img src="http://img.blog.csdn.net/20170226154012235?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU3VnYXJfUmFpbmJvdw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="dobi"></p>
<p><img src="http://img.blog.csdn.net/20170226153729569?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU3VnYXJfUmFpbmJvdw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h3 id=&quot;测试一下上传图片&quot;&gt;&lt;a href=&quot;#测试一下上传图片&quot; class=&quot;headerlink&quot; title=&quot;测试一下上传图片&quot;&gt;&lt;/a&gt;测试一下上传图片&lt;/h3&gt;&lt;h4 id=&quot;下面是一个图片&quot;&gt;&lt;a href=&quot;#下面是一个图片&quot; 
    
    </summary>
    
    
      <category term="图片" scheme="http://xu1009.github.io/tags/%E5%9B%BE%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>hexo+githubpages搭建个人博客</title>
    <link href="http://xu1009.github.io/2017/06/21/hexo-githubpages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://xu1009.github.io/2017/06/21/hexo-githubpages搭建个人博客/</id>
    <published>2017-06-21T02:21:51.000Z</published>
    <updated>2017-06-21T04:07:15.766Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h2 id="Hexo安装，hexo基于node，首先需要安装nodejs"><a href="#Hexo安装，hexo基于node，首先需要安装nodejs" class="headerlink" title="Hexo安装，hexo基于node，首先需要安装nodejs"></a>Hexo安装，hexo基于node，首先需要安装nodejs</h2><ul>
<li>安装hexo  </li>
</ul>
<p><code>npm install -g hexo</code><br><code>hexo version</code>查看hexo版本，确定是否安装完成<br><a id="more"></a></p>
<h2 id="有关-config-yml配置"><a href="#有关-config-yml配置" class="headerlink" title="有关_config.yml配置"></a>有关_config.yml配置</h2><h3 id="Site-站点配置"><a href="#Site-站点配置" class="headerlink" title="Site 站点配置"></a>Site 站点配置</h3><ul>
<li>title: Hexo-demo #网站标题</li>
<li>subtitle: hexo is simple and easy to study #网站副标题　　</li>
<li>description: this is hexo-demo #网栈描述</li>
<li>author: pomy #你的名字</li>
<li>language: zh-CN #网站使用的语言</li>
<li><p>timezone: Asia/Shanghai #网站时区</p>
<h3 id="URL可以不用配置"><a href="#URL可以不用配置" class="headerlink" title="URL可以不用配置"></a>URL可以不用配置</h3></li>
<li><p>url: <a href="http://yoursite.com" target="_blank" rel="external">http://yoursite.com</a> #网址，搜索时会在搜索引擎中显示</p>
</li>
<li>root: / #网站根目录</li>
<li>permalink: :year/:month/:day/:title/ #永久链接格式</li>
<li>permalink_defaults: #永久链接中各部分的默认值<h3 id="Directory-目录配置"><a href="#Directory-目录配置" class="headerlink" title="Directory 目录配置"></a>Directory 目录配置</h3></li>
<li>source_dir: source #资源文件夹，这个文件夹用来存放内容</li>
<li>public_dir: public #公共文件夹，这个文件夹用于存放生成的站点文件</li>
<li>tag_dir: tags #标签文件夹</li>
<li>archive_dir: archives #归档文件夹</li>
<li>category_dir: categories #分类文件夹</li>
<li>code_dir: downloads/code #Include code 文件夹</li>
<li>i18n_dir: :lang #国际化文件夹</li>
<li>skip_render: #跳过指定文件的渲染，您可使用 glob 来配置路径<h3 id="Writing-写作配置"><a href="#Writing-写作配置" class="headerlink" title="Writing 写作配置"></a>Writing 写作配置</h3></li>
<li>new_post_name: :title.md # 新文章的文件名称</li>
<li>default_layout: post #默认布局</li>
<li>titlecase: false # Transform title into titlecase</li>
<li>external_link: true # Open external links in new tab</li>
<li>filename_case: 0 #把文件名称转换为 (1) 小写或 (2) 大写</li>
<li>render_drafts: false #显示草稿</li>
<li>post_asset_folder: false #是否启动资源文件夹</li>
<li>relative_link: false #把链接改为与根目录的相对位址</li>
<li>future: true</li>
<li>highlight: #代码块的设置</li>
<li>enable: true</li>
<li>line_number: true</li>
<li>auto_detect: true</li>
<li>tab_replace:<h3 id="Category-amp-Tag-分类-amp-标签"><a href="#Category-amp-Tag-分类-amp-标签" class="headerlink" title="Category &amp; Tag 分类 &amp; 标签"></a>Category &amp; Tag 分类 &amp; 标签</h3></li>
<li>default_category: uncategorized #默认分类</li>
<li>category_map: #分类别名</li>
<li>tag_map: #标签别名<h3 id="Date-Time-format-时间和日期"><a href="#Date-Time-format-时间和日期" class="headerlink" title="Date / Time format 时间和日期"></a>Date / Time format 时间和日期</h3></li>
<li>date_format: YYYY-MM-DD</li>
<li>time_format: HH:mm:ss<h3 id="Pagination-分页"><a href="#Pagination-分页" class="headerlink" title="Pagination 分页"></a>Pagination 分页</h3></li>
<li>per_page: 10 #每页显示的文章量 (0 = 关闭分页功能)</li>
<li>pagination_dir: page #分页目录<h3 id="Extensions-扩展"><a href="#Extensions-扩展" class="headerlink" title="Extensions 扩展"></a>Extensions 扩展</h3><h4 id="Plugins-http-hexo-io-plugins-插件"><a href="#Plugins-http-hexo-io-plugins-插件" class="headerlink" title="Plugins: http://hexo.io/plugins/ 插件"></a>Plugins: <a href="http://hexo.io/plugins/" target="_blank" rel="external">http://hexo.io/plugins/</a> 插件</h4><h4 id="Themes-http-hexo-io-themes-主题"><a href="#Themes-http-hexo-io-themes-主题" class="headerlink" title="Themes: http://hexo.io/themes/ 主题"></a>Themes: <a href="http://hexo.io/themes/" target="_blank" rel="external">http://hexo.io/themes/</a> 主题</h4></li>
<li>theme: landscape #当前主题名称<h3 id="Deployment-部署到github"><a href="#Deployment-部署到github" class="headerlink" title="Deployment #部署到github"></a>Deployment #部署到github</h3><h4 id="Docs-http-hexo-io-docs-deployment-html"><a href="#Docs-http-hexo-io-docs-deployment-html" class="headerlink" title="Docs: http://hexo.io/docs/deployment.html"></a>Docs: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">http://hexo.io/docs/deployment.html</a></h4></li>
<li>deploy:</li>
<li>type:</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h2 id=&quot;Hexo安装，hexo基于node，首先需要安装nodejs&quot;&gt;&lt;a href=&quot;#Hexo安装，hexo基于node，首先需要安装nodejs&quot; class=&quot;headerlink&quot; title=&quot;Hexo安装，hexo基于node，首先需要安装nodejs&quot;&gt;&lt;/a&gt;Hexo安装，hexo基于node，首先需要安装nodejs&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;安装hexo  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;npm install -g hexo&lt;/code&gt;&lt;br&gt;&lt;code&gt;hexo version&lt;/code&gt;查看hexo版本，确定是否安装完成&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习" scheme="http://xu1009.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>markdown语法简介</title>
    <link href="http://xu1009.github.io/2017/06/20/markdown%E8%AF%AD%E6%B3%95%E7%AE%80%E4%BB%8B/"/>
    <id>http://xu1009.github.io/2017/06/20/markdown语法简介/</id>
    <published>2017-06-20T14:39:36.000Z</published>
    <updated>2017-06-21T04:06:52.259Z</updated>
    
    <content type="html"><![CDATA[<!-- toc -->
<h1 id="这是一个测试"><a href="#这是一个测试" class="headerlink" title="这是一个测试"></a>这是一个测试</h1><h4 id="下面是列表的排序-来标记"><a href="#下面是列表的排序-来标记" class="headerlink" title="下面是列表的排序*来标记"></a>下面是列表的排序*来标记</h4><ul>
<li>1</li>
<li>2</li>
<li>3<h4 id="有序列表直接1-等等"><a href="#有序列表直接1-等等" class="headerlink" title="有序列表直接1.等等"></a>有序列表直接1.等等</h4></li>
</ul>
<ol>
<li>dasd</li>
<li>weqwe<h4 id="下面是引用"><a href="#下面是引用" class="headerlink" title="下面是引用"></a>下面是引用</h4><blockquote>
<p>这里是引用<br>撒大声地23<br>123123<br>123123</p>
<h4 id="插入连接格式是"><a href="#插入连接格式是" class="headerlink" title="插入连接格式是[] ()"></a>插入连接格式是[] ()</h4><p><a href="https://baidu.com" target="_blank" rel="external">百度</a></p>
<h4 id="插入图片格式是-！【name】（link）"><a href="#插入图片格式是-！【name】（link）" class="headerlink" title="插入图片格式是 ！【name】（link）"></a>插入图片格式是 ！【name】（link）</h4><p><img src="http://mouapp.com/Mou_128.png" alt="Mou icon"></p>
<h4 id="文字粗体是用-包围，斜体是用包围"><a href="#文字粗体是用-包围，斜体是用包围" class="headerlink" title="文字粗体是用*包围，斜体是用包围"></a>文字粗体是用<em>*包围，斜体是用</em>包围</h4><p><strong>你好</strong> 你好 <em>你好</em></p>
<h4 id="表格的生成是比较累的"><a href="#表格的生成是比较累的" class="headerlink" title="表格的生成是比较累的"></a>表格的生成是比较累的</h4></blockquote>
</li>
</ol>
<h4 id="代码使用反引号"><a href="#代码使用反引号" class="headerlink" title="代码使用反引号"></a>代码使用反引号</h4><hr>
<h4 id="表格使用这个比较麻烦"><a href="#表格使用这个比较麻烦" class="headerlink" title="表格使用这个比较麻烦"></a>表格使用这个比较麻烦</h4><table>
<thead>
<tr>
<th>表头1</th>
<th>表头2</th>
</tr>
</thead>
<tbody>
<tr>
<td>data</td>
<td>data</td>
</tr>
</tbody>
</table>
<blockquote>
<p>给出列子<br>return shell_exec(“echo $input | $markdown_script”);<br>tst   </p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a = b</div><div class="line"><span class="keyword">for</span> a <span class="keyword">in</span> b:</div><div class="line">	a = b</div></pre></td></tr></table></figure>
<h3 id="代码块的编辑"><a href="#代码块的编辑" class="headerlink" title="代码块的编辑"></a>代码块的编辑</h3>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h1 id=&quot;这是一个测试&quot;&gt;&lt;a href=&quot;#这是一个测试&quot; class=&quot;headerlink&quot; title=&quot;这是一个测试&quot;&gt;&lt;/a&gt;这是一个测试&lt;/h1&gt;&lt;h4 id=&quot;下面是列表的排序-来标记&quot;&gt;&lt;a href=&quot;#下面是列表的排序-来标记
    
    </summary>
    
    
      <category term="学习" scheme="http://xu1009.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
