<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BlogXu</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xu1009.github.io/"/>
  <updated>2018-08-27T12:57:26.647Z</updated>
  <id>http://xu1009.github.io/</id>
  
  <author>
    <name>xu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java面试</title>
    <link href="http://xu1009.github.io/2018/08/27/java%E9%9D%A2%E8%AF%95/"/>
    <id>http://xu1009.github.io/2018/08/27/java面试/</id>
    <published>2018-08-27T12:17:49.000Z</published>
    <updated>2018-08-27T12:57:26.647Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JRE 是java运行环境，包括JVM和java类库，以及一些模块等，JDK是JRE的一个超集，提供了更多工具，比如编译器、各种诊断工具等。</p></blockquote><h4 id="java是解释执行？"><a href="#java是解释执行？" class="headerlink" title="java是解释执行？"></a>java是解释执行？</h4><blockquote><p>明显不是，问题比较简单，回答不能笼统，首先是经过javac把java文件编译成字节码，也就是class文件，然后通过jvm内嵌的解释器转换成机器码，通常jvm是oracle jdk的hotspot，内嵌解释器是JIT，会将一部分热点代码编译成机器码，属于编译执行。</p></blockquote><p>java分为编译期和运行时， 编译指的是javac把源码编译成字节码文件,运行时JVM会通过类加载器加载字节码，转成机器码执行。</p><p>是这样的， javac把源码编译成字节码文件，然后JVM加载这个字节码文件，使用内部解释器进行解释执行，同时也引入了JIT技术，也就是对于某些需要反复执行的代码（热点代码）转成机器码，这样下次就不用解释执行了。然后AOT是啥呢，是通过工具直接把字节码全转换成机器码，这样就不用解释执行了，提高效率。</p><p>java通过jvm这种跨平台的抽象，屏蔽了操作系统和硬件的细节，实现一次编译，到处执行的基础，class-loader加载字节码，解释或者编译执行。</p><p>JDK8使用的是解释和编译混合的一种模式。<br>java启动参数 -Xint就是高数jvm只进行解释执行，不对代码进行编译。<br>-Xcomp 关闭解释运行，最大化优化级别。</p><p>AOT 直接将字节码文件编译成机器码，避免了类加载过程。</p><p>java蓝图：</p><p><img src="https://static001.geekbang.org/resource/image/20/32/20bc6a900fc0b829c2f0e723df050732.png" alt=""></p><h4 id="Exception和Error区别？"><a href="#Exception和Error区别？" class="headerlink" title="Exception和Error区别？"></a>Exception和Error区别？</h4><blockquote><p>都继承了Throwable类，Exception 是程序正常运行中，可以预料的意外情况，可以预料的意外情况，可能并且应该被捕获，进行相应处理。Error是指在正常情况下不大可能出现的情况，比如常见的内存泄露，不能捕获。</p></blockquote><p>说一下Exception</p><p>分为可检查异常和不检查异常，可检查异常是指在源码里面显示地进行捕获处理，编译期就会进行检查，不检查异常又称为运行时异常比如NPC等，通常这个可以编码避免错误，具体根据需要判断是否需要捕获。</p><p>看一下下面这张图：</p><p><img src="https://static001.geekbang.org/resource/image/ac/00/accba531a365e6ae39614ebfa3273900.png" alt=""></p><p>ClassNotFoundException和NoClassDefFoundError的区别?</p><h4 id="final、finally、finalize区别"><a href="#final、finally、finalize区别" class="headerlink" title="final、finally、finalize区别"></a>final、finally、finalize区别</h4><p>下面这段代码里面的finally是不会执行的，这是个特例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    System.exit(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"asd"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>finalize阻止gc，不推荐使用，回收之前干些事情，会降低回收效能。</p><h4 id="强引用、软引用、弱引用、幻想引用"><a href="#强引用、软引用、弱引用、幻想引用" class="headerlink" title="强引用、软引用、弱引用、幻想引用"></a>强引用、软引用、弱引用、幻想引用</h4><blockquote><p>不同的引用类型，主要体现的是对象的可达性状态和对垃圾收集的影响。</p></blockquote><p>看一下这个图,状态切换，软引用和弱引用多用于缓存，虚引用用于监控？<br><img src="https://static001.geekbang.org/resource/image/36/b0/36d3c7b158eda9421ef32463cb4d4fb0.png" alt=""></p><p>虚引用必须和引用队列搭配使用，主要是用于跟踪对象被垃圾回收的活动，因为虚引用所引用的对象在被垃圾回收之前,先把引用放入队列，这样可以通过判断队列是否有内容来判断对象状态，在垃圾回收之前发出通知。</p><h4 id="String、StringBuffer-StringBuilder区别"><a href="#String、StringBuffer-StringBuilder区别" class="headerlink" title="String、StringBuffer StringBuilder区别"></a>String、StringBuffer StringBuilder区别</h4><p>String 还是有很多东西的，比如给你几个用例判断创建了几个对象，还有intern()方法，以及在几个jdk版本中的区别</p><p>主要在1.7之后将对于字符串分为堆内存和常量池。</p><ul><li>String s1 = “first”;</li><li>String s2 = “se” + “cond”;</li><li>String s12 = “first” + s2;</li><li>String s3 = new String(“three”);</li><li>String s4 = new String(“fo”) + “ur”;</li><li>String s5 = new String(“fo”) + new String(“ur”);</li></ul><p>上述在内存中的存储如下：<br><img src="https://user-gold-cdn.xitu.io/2018/1/5/160c3dd4be37720c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt=""></p><p>对于 “” 这种类型是在编译期间就能确定的， 属于字符串常量，会直接在常量池中创建，对于 new String()创建的字符串引用就不会。美滋滋。</p><p>还有一个intern()方法，这个方法的作用是先看一下常量池中是否有该字符串，如果有的话就返回常量池中的，如果没有的话，就把堆中引用地址加到常量池返回的是同一个对象，或者说两个引用同一个对象。</p><h4 id="动态代理机制"><a href="#动态代理机制" class="headerlink" title="动态代理机制"></a>动态代理机制</h4><blockquote><p>java是一种强类型静态语言，静态是指在编译时检查，动态是指在运行时检查。强类型和弱类型就不用解释了。</p></blockquote><p>反射给java提供了部分动态语言的能力。</p><p>说一下动态代理，jdk本身有的利用的是反射技术，还有cglib、asm等基于字节码操作机制。</p><p>jdk动态代理确定是必须实现某个接口，以及强制写invocationHandler有点侵入式。<br>cglib基于字节码基于子类？后面再看。</p><h4 id="包装类和普通数据类型（Integer，-int）"><a href="#包装类和普通数据类型（Integer，-int）" class="headerlink" title="包装类和普通数据类型（Integer， int）"></a>包装类和普通数据类型（Integer， int）</h4><blockquote><p>装箱和拆箱，较小值缓存，比如int类型-128到127这个可以配置最大值范围。</p></blockquote><p>对象由三部分组成： 对象头、对象实例、对齐填充。</p><p>对象头第一部分存储对象自身运行时数据，比如hashcode、gc分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等，这部分称为Mark word。</p><p>第二部分是类型指针，对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p><p>实例数据就是包含真正存储的信息。</p><p>对齐填充是相当于占位符。</p><h4 id="Vector、ArrayList、LinkedList"><a href="#Vector、ArrayList、LinkedList" class="headerlink" title="Vector、ArrayList、LinkedList"></a>Vector、ArrayList、LinkedList</h4><blockquote><p>都支持按位置进行定位，添加删除等操作，集合框架中的List，都提供迭代器遍历。</p></blockquote><p>Vector：线程安全的动态数组，线程安全是通过synchronize关键字实现的，性能比较差，自动扩容，当数组满时，会创建新的数组，拷贝原有数组数据。<br>ArrayList： 非线程安全的动态数组，扩容逻辑和Vector不一样。<br>LinkedList：非线程安全的双向链表，对于删除和插入操作来说，相对比较好。<br>看一下狭义的集合框架：<br><img src="https://static001.geekbang.org/resource/image/67/c7/675536edf1563b11ab7ead0def1215c7.png" alt=""></p><p>Collections.synchronizedList(new ArrayList&lt;&gt;()) 可以将那些非线程安全的集合包装成线程安全的，怎么实现的呢，就是很简单粗暴，将那些get、set、add之类的方法全部加上synchronize关键字。</p><p>jdk内部排序，比如Arrays.sort()和Collections.sort()使用的是什么排序算法，这要根据数据类型来分。</p><p>原始数据类型使用的是快速排序的变种，对象数据类型使用的是二分和归并的变种。</p><h4 id="HashTable、hashmap、treemap"><a href="#HashTable、hashmap、treemap" class="headerlink" title="HashTable、hashmap、treemap"></a>HashTable、hashmap、treemap</h4><p>看一下map的结构，比如下图：<br><img src="https://static001.geekbang.org/resource/image/26/7c/266cfaab2573c9777b1157816784727c.png" alt=""></p><p>散列是啥，散列是根据key得到内存中的地址，key到内存地址过程叫散列，映射函数叫散列函数，映射表叫散列集。</p><p>面试必问的hashmap源码：</p><ul><li>基本实现</li><li>容量和负载因子</li><li>树化<br>看一下map的结构，数组加链表不用说了<br><img src="https://static001.geekbang.org/resource/image/1f/56/1f72306a9d8719c66790b56ef7977c56.png" alt=""></li></ul><p>具体hashmap可以看一下这个<a href="http://welkinbai.coding.me/2017/08/12/jdk-collection-3/#HashMap%EF%BC%88%E5%AE%9E%E7%8E%B0%E5%B1%82%EF%BC%89" target="_blank" rel="noopener">博客</a></p><h4 id="jdk并发包concurrenthashmap"><a href="#jdk并发包concurrenthashmap" class="headerlink" title="jdk并发包concurrenthashmap"></a>jdk并发包concurrenthashmap</h4><blockquote><p>分段式加锁，线程安全，1.7和1.8区别。</p></blockquote><p><img src="https://static001.geekbang.org/resource/image/d4/d9/d45bcf9a34da2ef1ef335532b0198bd9.png" alt=""></p><p>线程安全的list还有个copyonwriteArrayList<br>还有就是可以通过Collections提供的同步包装器，只是简单的把所有操作加上synchronize关键字</p><h4 id="java-io-nio-nio2-aio"><a href="#java-io-nio-nio2-aio" class="headerlink" title="java io nio nio2(aio)"></a>java io nio nio2(aio)</h4><blockquote><p>NIO面试的时候问的比较多一些，然后NIO(同步非阻塞)的话是1.4新加的，1.7又做了很大改变，可以称为NIO2或者AIO,异步非阻塞IO</p></blockquote><p>说一下同步和异步与阻塞和非阻塞的区别和联系</p><ul><li>同步和异步，同步是一种可靠额有序运行机制，当我们进行同步操作时，后续任务是等待当前调用返回，才会进行下一步，异步则不需要等待，通常是依赖回调机制来实现任务间的次序关系，事件驱动（感觉比阻塞非阻塞更上一层）</li><li>阻塞非阻塞，是线程级别的，和同步和非同步相比要更底层一些，上面是任务级别的。</li></ul><p>看一下java io的uml图：<br><img src="https://static001.geekbang.org/resource/image/43/8b/4338e26731db0df390896ab305506d8b.png" alt=""></p><p>NIO 使用单线程管理channel，减少了线程切换开销<br>看一下NIO的框图：</p><p><img src="https://static001.geekbang.org/resource/image/ad/a2/ad3b4a49f4c1bff67124563abc50a0a2.png" alt=""></p><p>再看一下NIO2<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">AsynchronousServerSocketChannel serverSocketChannel = AsynchronousServerSocketChannel.open().bind(<span class="keyword">new</span> InetSocketAddress(InetAddress.getLocalHost(), <span class="number">8888</span>));</span><br><span class="line">      serverSocketChannel.accept(serverSocketChannel, <span class="keyword">new</span> CompletionHandler&lt;AsynchronousSocketChannel, AsynchronousServerSocketChannel&gt;() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">completed</span><span class="params">(AsynchronousSocketChannel asynchronousSocketChannel, AsynchronousServerSocketChannel asynchronousServerSocketChannel)</span> </span>&#123;</span><br><span class="line">              System.out.println(<span class="string">"12321"</span>);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">failed</span><span class="params">(Throwable throwable, AsynchronousServerSocketChannel asynchronousServerSocketChannel)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure></p><p>和ajax很像啊，事件驱动，异步回调。</p><p>详细说一下同步异步，阻塞和非阻塞问题</p><ul><li>BIO传统的IO模型</li><li>同步非阻塞IO,默认创建的socket都是阻塞的，非阻塞IO要求socket被设置为NONBLOCK,并非是java NIO</li><li>IO多路复用，即经典的Reactor设计模式，有时也称为异步阻塞IO,java中的selector和Linux中的epoll都是这种模型</li><li>异步IO，即经典的Proactor设计模式，异步非阻塞IO</li></ul><p>同步和异步描述的是用户线程与内核的<strong>交互方式</strong>：同步是指用户线程发起IO请求后需要等待或者轮询内核IO操作完成后才能继续执行，而异步是指用户线程发起IO请求后仍继续执行，当内核IO操作完成之后通知用户，或者调用用户线程注册的回调函数。</p><p>阻塞和非阻塞的概念描述的是用户线程调用内核IO的<strong>操作方式</strong>：阻塞是指IO操作需要彻底完成后才返回到用户空间，而非阻塞是指IO操作被调用后立即返回给用户一个状态值，无需等到IO操作彻底完成。</p><p>感觉一样，看一下图：</p><p>同步阻塞IO<br>这个图还是比较形象的，被动等待，需要等待数据准备好后才能读取。<br><img src="http://images.cnitblog.com/blog/405877/201411/142330286789443.png" alt=""></p><p>同步非阻塞IO<br>同步非阻塞IO是在同步阻塞IO基础上，将socket设置为非阻塞，这样用户线程可以在发起IO请求后立即返回。这个是用户线程主动去查，不在内核阻塞，内核会立即返回，然后用户线程主动的去轮询状态。这样会导致产生大量重复请求，耗费大量CPU资源。<br><img src="http://images.cnitblog.com/blog/405877/201411/142332004602984.png" alt=""></p><p>IO多路复用<br>IO多路复用模型是建立在内核提供的多路分离函数select基础之上的，使用select函数可以避免非阻塞IO模型中轮询等待的问题。<br><img src="http://images.cnitblog.com/blog/405877/201411/142332187256396.png" alt=""></p><p>主要是把socket添加到select中，然后阻塞等待select系统调用返回，当数据到达时，socket被激活，select函数返回，用户线程正式发起read请求，读取数据并执行。这样其实也是阻塞的，阻塞在select那，只不过实现了单线程监听多个通道，提高了cpu利用率，用户可以注册自己感兴趣的socket或者IO请求，然后去做自己的事情。</p><p>其实利用的是reactor设计模式，见下图：<br><img src="http://images.cnitblog.com/blog/405877/201411/142332350853195.png" alt=""></p><p>异步阻塞，阻塞主要是调用内核那个select函数时阻塞。<br><img src="http://images.cnitblog.com/blog/405877/201411/142333254136604.png" alt=""></p><p>异步IO使用了Proactor设计模式：</p><p><img src="http://images.cnitblog.com/blog/405877/201411/151608309061672.jpg" alt=""></p><p>Proactor模式和Reactor模式在结构上比较相似，不过在用户（Client）使用方式上差别较大。Reactor模式中，用户线程通过向Reactor对象注册感兴趣的事件监听，然后事件触发时调用事件处理函数。而Proactor模式中，用户线程将AsynchronousOperation（读/写等）、Proactor以及操作完成时的CompletionHandler注册到AsynchronousOperationProcessor。AsynchronousOperationProcessor使用Facade模式提供了一组异步操作API（读/写等）供用户使用，当用户线程调用异步API后，便继续执行自己的任务。AsynchronousOperationProcessor 会开启独立的内核线程执行异步操作，实现真正的异步。当异步IO操作完成时，AsynchronousOperationProcessor将用户线程与AsynchronousOperation一起注册的Proactor和CompletionHandler取出，然后将CompletionHandler与IO操作的结果数据一起转发给Proactor，Proactor负责回调每一个异步操作的事件完成处理函数handle_event。虽然Proactor模式中每个异步操作都可以绑定一个Proactor对象，但是一般在操作系统中，Proactor被实现为Singleton模式，以便于集中化分发操作完成事件。</p><p><img src="http://images.cnitblog.com/blog/405877/201411/142333511475767.png" alt=""></p><p>异步IO模型中，用户线程直接使用内核提供的异步IO API发起read请求，且发起后立即返回，继续执行用户线程代码。不过此时用户线程已经将调用的AsynchronousOperation和CompletionHandler注册到内核，然后操作系统开启独立的内核线程去处理IO操作。当read请求的数据到达时，由内核负责读取socket中的数据，并写入用户指定的缓冲区中。最后内核将read的数据和用户线程注册的CompletionHandler分发给内部Proactor，Proactor将IO完成的信息通知给用户线程（一般通过调用用户线程注册的完成事件处理函数），完成异步IO。</p><p>有个理解比较形象，就是区分同步异步以及阻塞非阻塞。</p><p>阻塞非阻塞是对于判断数据是否就绪是由用户线程还是内核线程完成，异步还是同步由数据拷贝是由用户线程还是内核线程完成。</p><h4 id="说一下文件拷贝？"><a href="#说一下文件拷贝？" class="headerlink" title="说一下文件拷贝？"></a>说一下文件拷贝？</h4><p>说一下用户态空间和内核态空间：</p><p>系统调用时操作系统的最小功能单位。</p><p>用户态空间是指应用，内核态空间是指底层硬件资源比如cpu，内存等，为上层提供访问接口也就是“系统调用”</p><p>看一下IO操作写入和读取操作：<br>进行了多次上下文切换，先从磁盘读取到内核缓存，用户再到内核缓存去拿数据，反向同理。<br><img src="https://static001.geekbang.org/resource/image/6d/85/6d2368424431f1b0d2b935386324b585.png" alt=""></p><p>但是NIO拷贝文件实现了0拷贝，是啥呢，就是直接在内核层面操作，不涉及用户态空间。看一下下面这个图：</p><p><img src="https://static001.geekbang.org/resource/image/b0/ea/b0c8226992bb97adda5ad84fe25372ea.png" alt=""></p><h4 id="接口和抽象类"><a href="#接口和抽象类" class="headerlink" title="接口和抽象类"></a>接口和抽象类</h4><p>接口中只能包含public方法或者public static final 常量，可以实现多个接口，不能实例化，1.8有自己的实现default方法。</p><p>抽象类，不能实例化，不能多继承，可以有抽象方法，也可以没有，子类必须实现抽象方法。</p><h4 id="synchronize关键字和reentrantLock"><a href="#synchronize关键字和reentrantLock" class="headerlink" title="synchronize关键字和reentrantLock"></a>synchronize关键字和reentrantLock</h4><p>再入锁，表示一个线程试图获取一个他已经获取的锁时，这个获取动作自动完成，锁的持有是以线程为单位而不是基于调用次数。</p><p>再入锁要比synchronized关键字能实现更加细腻的操作，比如公平性，实现带有超时的锁，条件变量。通过CAS操作，将线程对象放到一个双向链表中，然后每次取出双向链表中的头结点和当前线程相比。</p><p>synchronized 是基于monitor实现的，monitorenter和monitorexit，jdk 1.6之后对synchronized进行了优化，实现了三种不同的锁： 偏斜锁，轻量级锁，重量级锁。</p><p>并发包将锁分为读写锁，因为读之间是不需要同步的。</p><h4 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h4><blockquote><p>线程是系统调度的最小单元，一个进程可以包含多个线程，作为任务真正的执行者，有自己的栈，寄存器和本地存储，但是会和进程内其他线程共享文件描述符、虚拟地址空间等。</p></blockquote><p>线程状态： 新创建，可运行，阻塞，等待，计时等待，终止。</p><p>状态转移看下图：<br><img src="https://static001.geekbang.org/resource/image/31/dc/3169b7ca899afeb0359f132fb77c29dc.png" alt=""></p><p>死锁发生条件就是循环依赖,详情见下面代码，下面还有检测死锁的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.company.interview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.management.ManagementFactory;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.ThreadInfo;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.ThreadMXBean;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockSample</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String lockA;</span><br><span class="line">    <span class="keyword">private</span> String lockB;</span><br><span class="line">    LockSample(String name, String lockA, String lockB)&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.lockA = lockA;</span><br><span class="line">        <span class="keyword">this</span>.lockB = lockB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lockA)&#123;</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.getName() + <span class="string">"   "</span> + lockA);</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"before "</span> + <span class="keyword">this</span>.getName());</span><br><span class="line"><span class="comment">//                Thread.sleep(1000L);</span></span><br><span class="line">                System.out.println(<span class="string">"after "</span> + <span class="keyword">this</span>.getName());</span><br><span class="line">                <span class="keyword">synchronized</span> (lockB)&#123;</span><br><span class="line">                    System.out.println(<span class="keyword">this</span>.getName() + <span class="string">"   "</span> + lockB);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        ThreadMXBean mxBean = ManagementFactory.getThreadMXBean();</span><br><span class="line">        Runnable dlCheck = () -&gt; &#123;</span><br><span class="line">          <span class="keyword">long</span>[] threadIds = mxBean.findDeadlockedThreads();</span><br><span class="line">          <span class="keyword">if</span> (threadIds != <span class="keyword">null</span>)&#123;</span><br><span class="line">              ThreadInfo[] threadInfo = mxBean.getThreadInfo(threadIds);</span><br><span class="line">              <span class="keyword">for</span> (ThreadInfo threadInfo1 : threadInfo)&#123;</span><br><span class="line">                  System.out.println(threadInfo1.getThreadName());</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line">        scheduledExecutorService.scheduleAtFixedRate(dlCheck, <span class="number">5</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">        String lockA = <span class="string">"1"</span>;</span><br><span class="line">        String lockB = <span class="string">"2"</span>;</span><br><span class="line">        LockSample lockSample1 = <span class="keyword">new</span> LockSample(<span class="string">"THREAD1"</span>, lockA, lockB);</span><br><span class="line">        LockSample lockSample2 = <span class="keyword">new</span> LockSample(<span class="string">"THREAD2"</span>, lockB, lockA);</span><br><span class="line">        lockSample1.start();</span><br><span class="line">        lockSample2.start();</span><br><span class="line">        lockSample1.join();</span><br><span class="line">        lockSample2.join();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>copyonwrite 的操作是是不修改原来的数组，直接copy之后修改然后替换。</p><p>信号量是啥就是允许同一时间多少线程可以运行，类似于线程池？</p><p>countdownLatch有点像定时器中断？</p><h4 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h4><p>命令式编程和函数式编程，命令式编程就是那种在代码上很明显一步步实现功能，函数式是更抽象的描述，高阶函数，让函数像数据一样进行传递，而且函数内部不依赖于外部变量，利于单测，感觉就像高阶函数，传递的是函数，函数又像java匿名内部类那种，代码简洁。</p><p>命令式： 完全自己一步步实现</p><p>声明式： 底层一部分实现依赖于库</p><p>函数式： 基于声明式，加入高阶函数</p><p>函数式编程的特点：</p><ol><li>函数可以作为参数传递给另一个函数（高阶函数）</li><li>只用表达式不用语句，这里和js很像，expression和statement的区别，表达式有返回值，语句没有，函数式编程要求只用表达式</li><li>没有副作用，就是不修改外部变量，是个独立模块，每次都是返回新值</li></ol><p>函数式编程意义：</p><ol><li>代码简洁</li><li>接近自然语言</li><li>方便做单元测试，因为是独立模块，不依赖于外部。</li><li>易于并发编程，因为是独立模块，不修改外部变量，都是自己局部变量。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;JRE 是java运行环境，包括JVM和java类库，以及一些模块等，JDK是JRE的一个超集，提供了更多工具，比如编译器、各种诊断工具等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;java是解释执行？&quot;&gt;&lt;a href=&quot;#java是
      
    
    </summary>
    
    
      <category term="java 基础 面试" scheme="http://xu1009.github.io/tags/java-%E5%9F%BA%E7%A1%80-%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>AI在路上</title>
    <link href="http://xu1009.github.io/2018/01/17/AI%E5%9C%A8%E8%B7%AF%E4%B8%8A/"/>
    <id>http://xu1009.github.io/2018/01/17/AI在路上/</id>
    <published>2018-01-17T14:52:54.000Z</published>
    <updated>2018-08-27T11:30:41.290Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>看了李沐的博士这五年，心中感慨万千，哈哈哈，跟着沐哥学学。</p></blockquote><p>机器学习通常是写一个灵活的程序，一个模型，用数据来训练即系学习模型，利用数据编程。<br><img src="https://zh.gluon.ai/_images/ml-loop.png" alt=""><br>机器学习四个要素：数据、转换数据的模型、衡量模型好坏的损失函数和一个调整模型权重来最小化损失函数的算法。</p><p>监督学习和非监督学习</p><p>监督学习通常是训练数据，对数据分类标注，最后结果是每幅图片会被标注，而非监督学习主要是聚类，把一堆数据点分成若干类，从而使得同类数据点相似。</p><h4 id="线性回归-最简单的神经网络"><a href="#线性回归-最简单的神经网络" class="headerlink" title="线性回归-最简单的神经网络"></a>线性回归-最简单的神经网络</h4><p>神经网络是由一个节点（神经元）和有向边组成的集合，一般把一些节点组成层，每一层使用下一层节点作为输入，并输出给上一层节点使用，为了计算节点值，我们将输入节点做加权和，然后再加上一个激活函数。线性回归两层神经网络，如下<br><img src="https://zh.gluon.ai/_images/simple-net-linear.png" alt=""></p><p>这个怎么说呢，就是输入到输出中间有某种关系，这个把数据塞进去之后，不断的去寻找校正这个关系，找出输入到输出之间一个大致关系。加标注的图片训练集也是，图片是输入，标注是输出，找出这两个之间的关系。当有新的输入时，经过这个模型出来的输出就是之前输出多代表的意思。</p><p>上面那个是单类输出的，只有一层，看看下面，多类输出，和多个隐藏层的。</p><p><img src="https://zh.gluon.ai/_images/simple-softmax-net.png" alt=""></p><p>下面是多层感知机，中间加入了隐藏层</p><p><img src="https://zh.gluon.ai/_images/multilayer-perceptron.png" alt=""></p><blockquote><p>欠拟合与过拟合，无法得到比较低的训练误差叫做欠拟合，训练误差远远小于泛化误差叫做过拟合，在模型和数据集上要好好选择。</p></blockquote><p>一般高阶多项式函数比低阶多项式函数具有更强的拟合能力，这样就会在训练数据集上得到比较低的训练误差，但是过高的拟合会导致过拟合，从而导致泛化误差比较大，也就是太符合训练数据集了，最后导致测试数据集不是很符合了。</p><p>下图是一模型复杂度和误差的关系<br><img src="https://zh.gluon.ai/_images/error_model_complexity.png" alt=""></p><p>还有一个就是训练数据集的大小</p><p>训练数据集过小，特别是比模型参数数量更小时，过拟合更容易发生，其它趋势，训练数据集越大都会越小的</p><p><img src="https://zh.gluon.ai/_images/model_vs_data.png" alt=""></p><p>一阶多项式拟合又叫线性拟合</p><ul><li>正则化来应对过拟合</li></ul><p>loss加上模型参数平方，最后使得整体最小化，这样可以消除过拟合的影响。</p><p>丢弃法应对过拟合，主要是对输入层或者隐藏层做以下操作：</p><ul><li>随机选择一部分该层的输出作为丢弃元素</li><li>把丢弃元素乘0</li><li>把非丢弃元素拉伸</li></ul><blockquote><p>监督式学习，训练模型，模型输出和真实结果相比，不断调整模型参数，然后使得模型预测结果达到预期的准确率，常见的监督式学习应用场景是分类和回归，常见算法有LR和BPNN</p></blockquote><blockquote><p>非监督式学习就和监督式学习不一样，费监督式学习主要是聚类.</p></blockquote><h3 id="机器学习的主要算法"><a href="#机器学习的主要算法" class="headerlink" title="机器学习的主要算法"></a>机器学习的主要算法</h3><ul><li>回归算法，试图采用对误差的衡量来探索变量之间的关系的一类算法，回归算法是统计机器学习的利器。</li><li>基于实例的算法，KNN算法，SOM算法（自组织映射算法）</li><li>决策树算法，根据数据的属性采用树结构建立决策模型，决策树模型常常用来解决分类和回归问题。</li><li>贝叶斯算法，基于贝叶斯定理的一类算法，主要解决分类和回归问题。</li><li>基于核的算法把输入数据映射到一个高阶的向量空间，在这些高阶向量空间里，有些分类或者回归问题能够更容易的解决。常见算法包括：支持向量机（SVM），径向基函数（RBF）,以及线性判别分析（LDA）</li><li>聚类算法，对数据进行聚类，归类，按照最大的共同点将数据进行归类。常见算法包括K-Means算法和EM算法</li><li>人工神经网络，模拟生物神经网络，是一类模式匹配算法。其中深度学习就是其中一类算法，重要的人工神经网络算法包括：感知神经网络,反向传递，Hopefield网络。</li><li>深度学习，</li></ul><blockquote><p>机器学习是面向数据编程的，通常就是使用一个模型来不断的训练达到预期的效果。成功的机器学习有四个要素：数据、转换数据的模型、衡量数据好坏的损失函数、和一个调整模型权重来最小化损失函数的算法。最小化损失函数，不一定能保证测试集数据的输出表现良好，这里就存在训练误差和测试误差。</p></blockquote><h4 id="优化算法"><a href="#优化算法" class="headerlink" title="优化算法"></a>优化算法</h4><p>最小化损失函数的一种算法，现在比较常见的是SGD随机梯度下降，将参数向减小损失的方向调整。</p><ul><li>回归分析是监督学习里最简单的一类任务，输入时任意离散或者连续的，单一或多个变量，输出是连续的数值。Netflix的一百万大奖就是你的了；预测病人会在医院停留的时间也是一个回归问题。一条经验就是，问题中如果包含“多少？”，这类问题一般是回归问题。“这次手术需要几个小时？”……回归分析。“这张照片里有几只狗？”……回归分析。不过，如果问题能够转化为“这是一个____吗？”，那这很有可能是一个分类，或者属于其余我们将会谈及的问题。</li><li>回归分析所关注的预测可以解答输出为连续数值的问题，当预测的输出是离散的类别时，这个监督学习任务就叫做分类。</li><li>标注，比如一张图片中有多种物体，对物体进行标注，而不是简单的对整个图片进行分类。</li><li>强化学习RL,用机器学习开发一个能与周围环境交互并产生影响的智能体，比如AlphaGo击败了围棋世界冠军，和周围环境有交互，从环境收到观察数据，智能体做出action，最后从环境获得一个奖励，RL智能体的行为受到策略约束。<br><img src="https://zh.gluon.ai/_images/rl-environment.png" alt=""></li></ul><h3 id="机器学习过程"><a href="#机器学习过程" class="headerlink" title="机器学习过程"></a>机器学习过程</h3><ol><li>初始化一个模型</li><li>训练集进入模型，其中包括数据和label，然后数据进入模型得到的输出和label进行比较，得到损失函数，更新模型参数使得损失往小的方向发展，不断进行迭代，直到模型达到预期的要求。</li></ol><blockquote><p>成功的机器学习有四个要素：数据、模型、损失函数、减小损失函数的算法。复杂的非线性模型比其他机器学习需要更多的数据。</p></blockquote><p>机器学习中比较常见的优化损失函数的算法是SGD，梯度下降。损失函数关于模型参数的梯度指向一个可以降低损失函数的方向，每次都是通过反向梯度来更新模型参数从而优化损失函数。</p><h3 id="线性回归从0开始"><a href="#线性回归从0开始" class="headerlink" title="线性回归从0开始"></a>线性回归从0开始</h3><blockquote><p>线性回归和分类还不是一样的，回归问题的输出是连续的，比如输出是多少，预测输出多少，分类通常问题是这个是什么吗？</p></blockquote><p>线性模型是最简单的神经网络，一个神经网络就是由节点（神经元）和有向边组成的集合，为了计算一个节点值，我们将输入节点值做加权和，然后再加上一个激活函数。<br>下图所示是线性回归的神经网络，两层结构，第一层是输入（从下往上），每个节点对应输入数据点的一个维度，第二层是输出节点。<br><img src="https://zh.gluon.ai/_images/simple-net-linear.png" alt=""></p><p>输入有几个特征就对应几个节点，然后每个节点都有权重，下一层输出节点是上层节点加权和然后还有位移还有激活函数最后得到输出，多层节点也是这样推导下去，每个层节点都是上层节点加权和加上位移还有激活函数什么的组成的。</p><p>一般多分类中，输出数量是类别个数，然后结果是输入每个类别的概率，他们相加为1，然后这种时候求损失函数，一般使用交叉熵损失函数，求对应那个输出概率的对数，如果概率为1的话，损失就为0，概率越大，输出就越小。这个可以很好的衡量损失函数。</p><p>学习率在gluon中现在发现都是0.1，这个和batch_size有关，一般是.1 / batch_size;</p><p>多层感知机如下图所示，多层就是在输入和输出之间加入了隐藏层，其中隐藏层的节点数也是由自己定义，然后的话，整个系统要是没有激活函数的话仍然是线性的，所以一般层之间加入了激活函数，而且是非线性的激活函数，激活函数就是当前节点的值不仅是上层节点的加权和加上位移还要经过这个激活函数进行处理。这个非线性函数在gluon中选取的是和0进行比较，如果比0大就取否则就为0，这个就是常见的激活函数relu = max（x， 0）。<br><img src="https://zh.gluon.ai/_images/multilayer-perceptron.png" alt=""></p><h3 id="有关拟合"><a href="#有关拟合" class="headerlink" title="有关拟合"></a>有关拟合</h3><p>欠拟合和过拟合，模型复杂度和数据量大小影响训练误差和测试误差（泛化误差）。其中如果模型比较复杂的话会导致过拟合，模型比较简单就会导致欠拟合，同样对于数据量来说，如果数据比较少的话就会导致过拟合，数据量大的话对泛化误差和训练误差来说都是有优化的作用的。</p><p>输入层是不用加到神经网络定义的，框架会判断输入具有多少特征，然后初始化权重。然后要做的就是进入神经网络不断的迭代优化这个模型，</p><p>正则化解决过拟合的问题，范数正则化，之前在训练的时候最小的化的是损失函数，现在最小化的是损失函数加上权重和偏移的平方，这里范数正则化试图惩罚较大绝对值的参数值。就是在过拟合学到的参数的绝对值要比真实参数的绝对值要大一些。要再减小这些，所以将参数的平方加到损失函数中了，这样加了一个会导致梯度变化，梯度是会增大的，在SGD中就可以使得下次的参数是比较小的，逐渐逼近那个最小的损失函数，达到最优。</p><blockquote><p>丢弃法应对过拟合，在现代神经网络中，我们所指的丢弃法，通常是对输入层或者隐藏层做一下几件事情。</p></blockquote><ul><li>随机选择一部分该层的输出作为丢弃元素</li><li>把丢弃元素乘0</li><li>把非丢弃元素拉伸（保证期望）</li><li>模拟集成学习，集成学习就是将样本有放回的采样若干次，分别训练若干个不同的分类器，把这些分类器的结果集成一下作为最终分类结果。一个使用了丢弃法的神经网络就是相当于是原始神经网络的子集。只不过这些子集使用的是一套参数，这个相当于在对输入层或者隐藏层的参数进行正则化。<br><img src="https://zh.gluon.ai/_images/dropout.png" alt=""></li></ul><h3 id="Kaggle比赛"><a href="#Kaggle比赛" class="headerlink" title="Kaggle比赛"></a>Kaggle比赛</h3><blockquote><p>K折交叉验证就是将数据分成K份，然后其中K-1份作为训练集剩下一个作为测试集进行训练测试，最后是将每个都轮流作为测试集进行训练，这种方法是为了得到可靠的稳定模型，之前看的这个gluon把数据搞成迭代器的形式进行随机排序，每次都是一个batch。</p></blockquote><h3 id="gluon基础"><a href="#gluon基础" class="headerlink" title="gluon基础"></a>gluon基础</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;看了李沐的博士这五年，心中感慨万千，哈哈哈，跟着沐哥学学。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;机器学习通常是写一个灵活的程序，一个模型，用数据来训练即系学习模型，利用数据编程。&lt;br&gt;&lt;img src=&quot;https://zh.gluon.a
      
    
    </summary>
    
    
      <category term="dp gluon" scheme="http://xu1009.github.io/tags/dp-gluon/"/>
    
  </entry>
  
  <entry>
    <title>总结一哈java中一些问题</title>
    <link href="http://xu1009.github.io/2018/01/17/%E6%80%BB%E7%BB%93%E4%B8%80%E5%93%88java%E4%B8%AD%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <id>http://xu1009.github.io/2018/01/17/总结一哈java中一些问题/</id>
    <published>2018-01-17T14:48:49.000Z</published>
    <updated>2018-08-27T11:30:41.342Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java-NIO-Overview"><a href="#Java-NIO-Overview" class="headerlink" title="Java NIO Overview"></a>Java NIO Overview</h3><ol><li>channel </li><li>buffer</li><li>selector<blockquote><p>channel与selector搭配使用，必须将selector配置成非阻塞模式，但是filechannel只能配置成阻塞模式，所以不能和selector搭配使用。</p></blockquote></li></ol><h4 id="非阻塞式服务器"><a href="#非阻塞式服务器" class="headerlink" title="非阻塞式服务器"></a>非阻塞式服务器</h4><p>非阻塞是IO管道（pipeline）<br><img src="http://ifeve.com/wp-content/uploads/2017/04/non-blocking-server-1.png" alt=""></p><blockquote><p>非阻塞式管道和阻塞式管道最大的区别是他们如何从地城channel（socket或者file）读取数据</p></blockquote><p>IO管道从流中读取数据，并将这些数据拆分为一系列连贯的消息，这个功能模块成为消息读取器，messageReader。<br><img src="http://ifeve.com/wp-content/uploads/2017/04/non-blocking-server-2.png" alt=""><br>阻塞式的消息读取器就很简单，它从流中每次一个字节的读取，而且读和写都是阻塞的，只有当前的读或者写完成才会返回，对于部分数据读取写入不用考虑,但是阻塞式有一个缺点就是每个线程只能处理一个IO,只有等这个io完成之后才能被释放，这样就会造成为每个操作维护一个线程，每个线程都会占用栈32bit-64bit的内存。所以一百万个线程占用的内存将会达到1TB！虽然可以使用线程池，但是最后还是会有很多问题，而且线程之间上下文的切换的开销也很大。</p><h4 id="基础非阻塞是IO管道设计"><a href="#基础非阻塞是IO管道设计" class="headerlink" title="基础非阻塞是IO管道设计"></a>基础非阻塞是IO管道设计</h4><p>一个非阻塞式IO管道可以使用一个单独的线程向多个流读取数据。这需要流可以被切换到非阻塞模式。在非阻塞模式下，当你读取流信息时可能会返回0个字节或更多字节的信息。如果流中没有数据可读就返回0字节，如果流中有数据可读就返回1+字节。</p><p>这个检查的过程NIO 的selector帮我们完成了，这就节省了很大的工作量，channel都向selector注册，当你调用Selector的select()或者 selectNow() 方法它只会返回有数据读取的SelectableChannel的实例.<br><img src="http://ifeve.com/wp-content/uploads/2017/04/non-blocking-server-4.png" alt=""></p><blockquote><p>非阻塞，有个问题就是数据完整性，messageReader需要判断当前消息是否是完整的，这样部分消息就存储到buffer中了，这就是缓冲区。</p></blockquote><p>关于非阻塞写数据</p><p>引入messageWrite，每次写入的字节数不确定，非阻塞是直接返回的，这就是挑战：跟踪部分写入的消息，以便最终可以发送一条消息的所有字节。</p><p>当一个消息被写入Message Writer，Message Writer向Selector注册其相关Channel（如果尚未注册）。</p><p>当你的服务器有时间时，它检查Selector以查看哪些注册的Channel实例已准备好进行写入。 对于每个写就绪Channel，请求其关联的Message Writer将数据写入Channel。 如果Message Writer将其所有消息写入其Channel，则Channel将再次从Selector注册。</p><h3 id="NIO-和-IO的区别"><a href="#NIO-和-IO的区别" class="headerlink" title="NIO 和 IO的区别"></a>NIO 和 IO的区别</h3><p>IO                NIO<br>面向流            面向缓冲<br>阻塞IO            非阻塞IO<br>无                选择器</p><p>面向流与面向缓冲</p><p>NIO面向缓冲的，读取的数据首先放到缓冲区，需要时可在缓冲区中前后移动。这就增加了处理过程中的灵活性。但是，还需要检查是否该缓冲区中包含所有您需要处理的数据。</p><p>IO面向流意味着每次从流中读一个或多个字节，直至读取所有字节，它们没有被缓存在任何地方。此外，它不能前后移动流中的数据。如果需要前后移动从流中读取的数据，需要先将它缓存到一个缓冲区。</p><p>阻塞与非阻塞</p><p>IO中当读取或者写入数据时，必须等待当前写入或者读取完成，不然当前线程会一直被阻塞，不能处理其它事情，而NIO则不是这样，写和读都是立即返回的。</p><p>selector</p><p>Java NIO的选择器允许一个单独的线程来监视多个输入通道，你可以注册多个通道使用一个选择器，然后使用一个单独的线程来“选择”通道：这些通道里已经有可以处理的输入，或者选择已准备写入的通道。这种选择机制，使得一个单独的线程很容易来管理多个通道。</p><h3 id="应用环境"><a href="#应用环境" class="headerlink" title="应用环境"></a>应用环境</h3><p>NIO的好处就是非阻塞可以实现单线程管理多通道，但是数据的解析就非常麻烦，而IO就是读取全部的数据返回给你，完全没有这个问题。因此应用场合要选好。</p><p>一般 NIO适用于数据量少，但是连接量大的，如果需要管理同时打开的成千上万个连接，这些连接每次只是发送少量的数据，例如聊天服务器，实现NIO的服务器可能是一个优势。同样，如果你需要维持许多打开的连接到其他计算机上，如P2P网络中，使用一个单独的线程来管理你所有出站连接，可能是一个优势。</p><p>IO的话正好相反，少量连接和大量数据的情况下。</p><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><blockquote><p>反射可以让我们在编译期之外的运行期检查类，接口，变量以及方法的信息，在运行期实例化对象，调用方法，通过调用get/set方法获取变量的值。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reflection</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Method[] methods = Reflection.class.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods)&#123;</span><br><span class="line">            System.out.println(method.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">main</span><br><span class="line">wait</span><br><span class="line">wait</span><br><span class="line">wait</span><br><span class="line">equals</span><br><span class="line">toString</span><br><span class="line">hashCode</span><br><span class="line">getClass</span><br><span class="line">notify</span><br><span class="line">notifyAll</span><br><span class="line">除了main，其它都是从object类继承来的</span><br></pre></td></tr></table></figure><p>反射获取的方法和域都是public的。</p><p>反射获取public的方法，然后可以传参数执行。</p><ul><li>反射访问私有变量和私有方法</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Java-NIO-Overview&quot;&gt;&lt;a href=&quot;#Java-NIO-Overview&quot; class=&quot;headerlink&quot; title=&quot;Java NIO Overview&quot;&gt;&lt;/a&gt;Java NIO Overview&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;chan
      
    
    </summary>
    
    
      <category term="java NIO 反射" scheme="http://xu1009.github.io/tags/java-NIO-%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis一些原理</title>
    <link href="http://xu1009.github.io/2018/01/17/Mybatis%E4%B8%80%E4%BA%9B%E5%8E%9F%E7%90%86/"/>
    <id>http://xu1009.github.io/2018/01/17/Mybatis一些原理/</id>
    <published>2018-01-17T14:46:32.000Z</published>
    <updated>2018-08-27T11:30:41.300Z</updated>
    
    <content type="html"><![CDATA[<p>mybatis是以一个sqlsessionFactory的实例为中心，sqlsessionfactory可以通过sqlsessionfactoryBuilder获得，主要是Mybatis可以使用自己的Resource工具类来从xml文件获得，然后使用那个builder生成factory</p><p>从sqlsessionfactory获取sqlsession的实例，这个sqlsession完全包含了面向数据库执行sql命令所需的所有方法，开始会话，结束会话，中间是操作，sqlsession可以通过映射器类找到对应映射sql语句，最后调用这个sql，一般映射的sql语句都是配置到xml文件中，或者简单的sql语句也可以使用注解，这样比xml文件要简单的多，但是大量复杂的sql语句还是放到xml文件中比较靠谱。</p><p>还有一个类型转换，Java类型到数据库类型之间的转换，有自己内部的类型转换处理器，也可以自定义类型处理器，在配置文件中指定处理器就行。一般都是使用的内部的处理器，根据数据库类型转换成Java类型，比较特殊的可以使用自定义处理器。</p><p>数据库连接池</p><p>这个是为了避免创建新的实例时所必需的初始化和认证时间，这样再有请求过来就会被阻塞，所以就存在了数据库连接池，这是一种使得并发Web请求能够快速响应的流行处理方式。</p><p>配置文件主要是这些，mybatis+spring的话基本上不会使用这个配置文件，配置都在spring里面了，比如数据库连接池，映射文件配置，事务处理，这些完全都是在spring里面</p><p>数据库范式</p><p>抽象定义：符合某一种级别的关系模式的集合，表示一个关系内部各属性之间的联系的合理化程度。</p><p>粗略理解为一张数据表结构所符合的某种设计标准的级别。</p><p>设计的规范级别，就像装修买建材，最环保的是E0,然后依次类推，数据库设计也分为几个级别：<br>    1NF   2NF   3NF    BCNF   4NF  5NF<br>一般我们设计关系型数据库的时候，最多考虑到BCNF就够了，符合高级别的范式设计必定符合低级别的关系范式。</p><p>第一范式（1NF）<br>每个属性都不可再分，就是数据表中的属性不能有子属性。下图所示的就不满足这个范式。第一范式是关系型数据库必须满足的最基本要求,关系型数据库必须满足这个设计标准，属性不可分，数据表中的属性不能有子属性,表头不能有子属性。<br><img src="https://lh3.googleusercontent.com/5H4tf_qdCeL2TWuAE4VQnoX0ePxGqCVHQEy3gpMkh0_hH7HPcvmVTAe0IgyioQp1KJSOkQ=s170" alt=""></p><p>第二范式（2NF）<br>仅仅符合1NF的设计，仍然会存在数据冗余过大，插入异常，删除异常，修改异常等问题，<br><img src="https://lh3.googleusercontent.com/RLIBLMIyGGd-wVTY_QTjQUdG2gqEDS2xCa6ASqIjJXhP07_4Yl3rhwrzzuK4It7wNjzFVXQ=s162" alt=""></p><blockquote><p>这里有四个概念，函数依赖、码、非主属性、与部分函数依赖。</p></blockquote><ul><li>函数依赖<br>若在一张表中，在属性X确定的情况下，必定能确定属性Y的值，那么久可以说Y函数依赖于X，写作X-&gt;Y。也就是说在数据表中，不存在任意两条记录，它们在X属性上的值相同，而在Y属性上的值不相同，一一对应的函数关系，比如上表中，学号和姓名就是函数依赖关系，姓名依赖于学号，但是学号不依赖于姓名，因为存在同名的情况。</li><li>完全函数依赖<br>X -&gt; Y,但是X的任意一个真子集，它的补集和Y不是函数依赖关系。</li></ul><p>还有两个部分函数依赖和传递函数依赖没啥，部分函数依赖就是是函数依赖不是完全函数依赖，传递函数依赖就是传递依赖。</p><ul><li><p>码<br>设K为某表中的一个属性或属性组，若除K之外的所有属性都完全依赖于K，那么我们称K为候选码，简称为码，K确定的情况下，该表除K之外的所有属性的值也随之确定，那么K就是码。</p></li><li><p>非主属性<br>包含在任何一个码中的属性为主属性，其它就是非主属性</p></li></ul><p>最后第二范式怎么判断呢，就是看数据表中是否存在非主属性对于码的部分函数依赖，若存在，则数据表最高只符合1NF。</p><p>第二范式消除非主属性对于码的部分依赖。要有主键，其它字段依赖于主键，主键保证数据表中每个记录的唯一性，能够准确定位到该条数据，通过主键定位到该条记录，然后其它字段依赖于主键，也就是主键确定，其它字段也是唯一确定的。</p><ul><li><p>第三范式（3NF）<br>为了消除非主属性对于码的依赖函数传递，就是为了消除冗余，信息放在一张表中，不在其他表中重复出现，表之间可以通过外键进行联系。</p></li><li><p>BCNF范式<br>在满足第二第三范式的情况下，主属性内部也不能部分或传递依赖。判断方法：箭头左边的必须是候选码，不是候选码的就不是BC范式。</p></li><li>第四范式（4NF）<br>没有多值依赖</li></ul><p><img src="https://pic3.zhimg.com/7a768d67d14aae13e7b785c5307f414e_r.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;mybatis是以一个sqlsessionFactory的实例为中心，sqlsessionfactory可以通过sqlsessionfactoryBuilder获得，主要是Mybatis可以使用自己的Resource工具类来从xml文件获得，然后使用那个builder生成f
      
    
    </summary>
    
    
      <category term="mybatis orm" scheme="http://xu1009.github.io/tags/mybatis-orm/"/>
    
  </entry>
  
  <entry>
    <title>RPC相关</title>
    <link href="http://xu1009.github.io/2018/01/17/RPC%E7%9B%B8%E5%85%B3/"/>
    <id>http://xu1009.github.io/2018/01/17/RPC相关/</id>
    <published>2018-01-17T14:42:15.000Z</published>
    <updated>2018-08-27T11:30:41.306Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>序列化就是将对象转化为二进制流，不同序列化框架会将对象转成不同二进制流。在RPC调用中，不可避免的要接触到数据的序列化和解序列化。Java对象在一个网络节点中序列化好，放到网络中传输，到另一个网络节点时必须能够反序列化，对象得到正确的解析，这是RPC里的最基本问题。</p></blockquote><h3 id="Java序列化机制"><a href="#Java序列化机制" class="headerlink" title="Java序列化机制"></a>Java序列化机制</h3><ul><li>Java序列化的对象需要实现serialabel接口，没有特殊指定的话，就是用默认的序列化方式，该序列化方式会将对象本身，及对象的引用全部序列化，开销比较大，（深拷贝的应用）依赖于jvm，可以实现不同平台之间的序列化和反序列化。</li><li>Java序列化就是将对象转换成一堆byte，就是二进制的序列化。<br>Java序列化后包含的信息是：</li></ul><ol><li>所有非静态且未声明未transient的成员；</li><li>类的固有信息，如字段名，方法名，版本等；</li><li>父类的序列化信息；</li><li>对象成员变量的序列化信息。</li></ol><h3 id="hessian序列化"><a href="#hessian序列化" class="headerlink" title="hessian序列化"></a>hessian序列化</h3><ul><li>hessian主要用于java序列化。它的实现机制是着重于数据，附带简单的类型信息的方法</li><li>对于简单的数据类型。就像Integer a = 1，hessian会序列化成I 1这样的流，I表示int or Integer，1就是数据内容</li><li>对于复杂对象，通过Java的反射机制，hessian把对象所有的属性当成一个Map来序列化，产生类似M className propertyName1 I 1 propertyName S stringValue</li><li>对于引用对象，在序列化过程中，如果一个对象之前出现过，hessian会直接插入一个R index这样的块来表示一个引用位置，从而省去再次序列化和反序列化的时间<h3 id="thrift序列化"><a href="#thrift序列化" class="headerlink" title="thrift序列化"></a>thrift序列化</h3>Thrift是Facebook开源提供的一个高性能，轻量级RPC服务框架，其产生正是为了满足当前大数据量、分布式、跨语言、跨平台数据通讯的需求。 但是，Thrift并不仅仅是序列化协议，而是一个RPC框架。相对于JSON和XML而言，Thrift在空间开销和解析性能上有了比较大的提升，对于对性能要求比较高的分布式系统，它是一个优秀的RPC解决方案；但是由于Thrift的序列化被嵌入到Thrift框架里面，Thrift框架本身并没有透出序列化和反序列化接口，这导致其很难和其他传输层协议共同使用（例如HTTP）。<h3 id="protobuf序列化"><a href="#protobuf序列化" class="headerlink" title="protobuf序列化"></a>protobuf序列化</h3>序列化数据非常简洁，紧凑，析速度非常快，提供了非常友好的动态库。使用简介，反序列化只需要一行代码。但是在JavaBean和proto之间的转换较麻烦。<h3 id="avro序列化"><a href="#avro序列化" class="headerlink" title="avro序列化"></a>avro序列化</h3></li><li>Avro的产生解决了JSON的冗长和没有IDL的问题。 Avro提供两种序列化格式：JSON格式或者Binary格式。Binary格式在空间开销和解析性能方面可以和Protobuf媲美，JSON格式方便测试阶段的调试。</li><li>动态类型：Avro并不需要生成代码，模式和数据存放在一起，而模式使得整个数据的处理过程并不生成代码、静态数据类型等等。这方便了数据处理系统和语言的构造。</li><li>未标记的数据：由于读取数据的时候模式是已知的，那么需要和数据一起编码的类型信息就很少了，这样序列化的规模也就小了。</li><li>不需要用户指定字段号：即使模式改变，处理数据时新旧模式都是已知的，所以通过使用字段名称可以解决差异问题。</li></ul><h3 id="thrift"><a href="#thrift" class="headerlink" title="thrift"></a>thrift</h3><p>thrift是目前使用比较多的rpc框架，使用IDL中间语言编写相关，然后再生成相应语言，因此可以实现跨语言的框架。</p><ul><li>基于二进制的高性能编解码</li><li>基于NIO的底层通信</li><li>相对简单的服务调用模型</li><li>使用IDL支持跨平台<br>thrif核心组件有：</li><li>TProtocol 协议和编解码组件</li><li>TTransport 传输组件</li><li>TProcessor 服务调用组件</li><li>TServer，Client 服务器和客户端组件</li></ul><p>RPC中客户端和服务器药传输的数据有：<br>客户端</p><ul><li>方法名称，包括类名称和方法名称</li><li>方法参数，包括参数类型和参数值</li><li>附加数据，包括附件，超时信息，自定义的控制信息。<br>服务器</li><li>调用的返回码</li><li>返回值</li><li>异常信息<br>发送消息的组合方式在IDL中都定义好了，服务器和客户端是一一对应的，所以不会存在解析问题。</li></ul><ol><li><p>writeMessgeBegin方法写了消息头，包括4字节的版本号和类型信息，字符串类型的方法名，４字节的序列号seqId</p></li><li><p>writeFieldBegin，写了１个字节的字段数据类型，和2个字节字段的顺序号</p></li></ol><p>序列化消息头加消息体的格式，先写消息头再写消息体，消息头包括4字节的版本号和调用方法的类型，字符串类型的方法名，4字节的序列号，消息体就是写方法的参数，接下来就是写字段，传入的具体参数类型及数值。方法参数的顺序服务器和客户端保持一致，客户端写的顺序和服务器端读的顺序一致，也就是按照方法入口参数的顺序来写的。</p><p>thrift中IDL支持的数据类型<br>bool 布尔型<br>byte ８位整数<br>i16  16位整数<br>i32  32位整数<br>i64  64位整数<br>double 双精度浮点数<br>string 字符串<br>binary 字节数组<br>list<i16> List集合，必须指明泛型<br>map&lt;string, string&gt; Map类型，必须指明泛型<br>set<i32> Set集合，必须指明泛型 </i32></i16></p><p>IDL生成的类主要有5个部分</p><ul><li>接口类型，服务端使用它作为顶层接口，编写接口实现，客户端用它作为生成代理的服务接口。</li><li>客户端类型，一个同步客户端，一个异步客户端。</li><li>processor，用来支持方法调用，服务的实现类都要使用processor注册。</li><li>方法参数封装类。</li><li>方法返回值封装类。</li></ul><ol><li><p>TProcessor就定义了一个顶层的调用方法process，参数是输入流和输出流</p></li><li><p>抽象类TBaseProcessor提供了TProcessor的process的默认实现，先读消息头，拿到要调用的方法名，然后从维护的一个Map中取ProcessFunction对象。ProcessFunction对象是实际方法的抽象，调用它的process方法，实际是调用了实际的方法。</p></li><li><p>Processor类是自动生成了，它依赖Iface接口，负责把实际的方法实现和方法的key关联起来，放到Map中维护<br>核心类：</p></li><li>自动生成的Iface接口，是远程方法的顶层接口</li><li><p>自动生成的Processor类及相关父类，包括TProcessor接口，TBaseProcess抽象类</p></li><li><p>ProcessFunction抽象类，抽象了一个具体的方法调用，包含了方法名信息，调用方法的抽象过程等</p></li><li><p>TNonblcokingServer，是NIO服务器的默认实现，通过Args参数来配置Processor等信息</p></li><li>FrameBuffer类，服务器NIO的缓冲区对象，这个对象在服务器端收到全包并解码后，会调用Processor去完成实际的方法调用</li><li>服务器端的方法的具体实现类，实现Iface接口</li></ol><p>TProcessor 是一个接口，只定义了一个方法，process，TBaseProcessor实现了该接口，首先读取消息头，拿到要调用的方法名，然后根据方法名从Map中拿出一个processFunction对象，该对象是具体方法的抽象，调用它的process方法就是调用了该方法，framebuffer用于NIO服务器保存中间态，<br><img src="http://img.blog.csdn.net/20140930104345373?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSVRlcl9aQw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><h3 id="frameBuffer"><a href="#frameBuffer" class="headerlink" title="frameBuffer"></a>frameBuffer</h3><p>这个是NIO的服务端的核心组件，一方面是缓冲区，另一方面承担了RPC方法调用。framebuffer提供了invoke方法，当读满包时，就会通过他管理的processor来完成实际方法的调用。<br><img src="http://img.blog.csdn.net/20140930114738752?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSVRlcl9aQw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>framebuffer 写消息体responseReady()</p><ol><li>创建ByteBuffer</li><li>修改状态到AWAITING_REGISTER_WRITE</li><li>调用requestSelecinterestChange()注册change的写事件。</li><li>Selector会根据状态调用FrameBuffer的write方法</li></ol><h3 id="Transport传输层分析"><a href="#Transport传输层分析" class="headerlink" title="Transport传输层分析"></a>Transport传输层分析</h3><p>TIOStreamTransport和TSocket是阻塞同步IO,TSocket封装了Socket接口。</p><p>TNonblockingTransport，TNonblockingSocket对应非阻塞IO。</p><p>thrift协议和具体的传输对象绑定的。使用具体的transport来读写数据。thrift使用NIO服务器读取数据，每次先读取消息头，消息头是封装了消息的长度，然后再读取消息体，所以在客户端发送消息时，消息的封装也使用了相同的方式，这里都是使用TframedTransport包装流来传输数据</p><h3 id="TServer服务器分析"><a href="#TServer服务器分析" class="headerlink" title="TServer服务器分析"></a>TServer服务器分析</h3><p>Thrift使用Tserver作为服务器的抽象，使用TServerTransport作为服务器的acceptor抽象，监听端口，创建客户端socket连接，TServerTransport分为两种，阻塞和非阻塞。</p><ol><li>TNonblockingServerTransport和TNonblockingServerSocket作为非阻塞IO的Acceptor,封装了ServerSocketChannel</li><li>TServerSocket作为阻塞同步IO的Acceptor，封装了ServerSocket</li></ol><p>TProtocol序列化</p><ol><li><p>write/read Message，读写消息头，消息头包含了方法名，序列号等信息</p></li><li><p>write/read Struct，将RPC方法的参数/返回值封装成结构体，读写结构体即表示要读写RPC方法参数了</p></li><li><p>write/read Field，每一个参数都被抽象成Field，Field主要包含了字段的索引信息，类型信息等</p></li><li><p>write/read Type，即读写各种具体的数据<br>来一段服务器和客户端的代码感受一下，下面是TNonBlockingServer</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yangyang.thrift.tnonblockingserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yangyang.thrift.api.HelloService;</span><br><span class="line"><span class="keyword">import</span> com.yangyang.thrift.service.HelloServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.TException;</span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.TProcessor;</span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.protocol.TCompactProtocol;</span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.server.TNonblockingServer;</span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.transport.TFramedTransport;</span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.transport.TNonblockingServerSocket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * **</span></span><br><span class="line"><span class="comment"> * 注册服务端</span></span><br><span class="line"><span class="comment"> *  使用非阻塞式IO，服务端和客户端需要指定 TFramedTransport 数据传输的方式。 TNonblockingServer</span></span><br><span class="line"><span class="comment"> * Created by chenshunyang on 2016/10/31.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloTNonblockingServer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 注册端口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SERVER_PORT = <span class="number">8080</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> TException</span>&#123;</span><br><span class="line">        <span class="comment">//处理器</span></span><br><span class="line">        TProcessor processor = <span class="keyword">new</span> HelloService.Processor&lt;HelloService.Iface&gt;(<span class="keyword">new</span> HelloServiceImpl());</span><br><span class="line">        <span class="comment">// 传输通道 - 非阻塞方式</span></span><br><span class="line">        TNonblockingServerSocket serverTransport = <span class="keyword">new</span> TNonblockingServerSocket(SERVER_PORT);</span><br><span class="line">        <span class="comment">//异步IO，需要使用TFramedTransport，它将分块缓存读取。</span></span><br><span class="line">        TNonblockingServer.Args tArgs = <span class="keyword">new</span> TNonblockingServer.Args(serverTransport);</span><br><span class="line">        tArgs.processor(processor);</span><br><span class="line">        <span class="comment">// 使用非阻塞式IO，服务端和客户端需要指定TFramedTransport数据传输的方式</span></span><br><span class="line">        tArgs.transportFactory(<span class="keyword">new</span> TFramedTransport.Factory());</span><br><span class="line">        <span class="comment">//使用高密度二进制协议</span></span><br><span class="line">        tArgs.protocolFactory(<span class="keyword">new</span> TCompactProtocol.Factory());</span><br><span class="line"></span><br><span class="line">        TNonblockingServer server = <span class="keyword">new</span> TNonblockingServer(tArgs);</span><br><span class="line">        System.out.println(<span class="string">"HelloTNonblockingServer start...."</span>);</span><br><span class="line">        server.serve();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yangyang.thrift.tnonblockingserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yangyang.thrift.api.HelloService;</span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.TException;</span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.protocol.TCompactProtocol;</span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.protocol.TProtocol;</span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.transport.TFramedTransport;</span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.transport.TSocket;</span><br><span class="line"><span class="keyword">import</span> org.apache.thrift.transport.TTransport;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 客户端调用HelloTNonblockingServer,HelloTHsHaServer</span></span><br><span class="line"><span class="comment"> * 非阻塞</span></span><br><span class="line"><span class="comment"> * Created by chenshunyang on 2016/10/31.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloTNonblockingClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVER_IP = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SERVER_PORT = <span class="number">8080</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIMEOUT = <span class="number">30000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> TException</span>&#123;</span><br><span class="line">        <span class="comment">//设置传输通道，对于非阻塞服务，需要使用TFramedTransport，它将数据分块发送</span></span><br><span class="line">        TTransport transport = <span class="keyword">new</span> TFramedTransport(<span class="keyword">new</span> TSocket(SERVER_IP,SERVER_PORT,TIMEOUT));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 协议要和服务端HelloTNonblockingServer一致,使用高密度二进制协议</span></span><br><span class="line">        TProtocol protocol = <span class="keyword">new</span> TCompactProtocol(transport);</span><br><span class="line"></span><br><span class="line">        HelloService.Client client = <span class="keyword">new</span> HelloService.Client(protocol);</span><br><span class="line">        transport.open();</span><br><span class="line">        String result = client.hello(<span class="string">"jack"</span>);</span><br><span class="line">        System.out.println(<span class="string">"result : "</span> + result);</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        transport.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;序列化就是将对象转化为二进制流，不同序列化框架会将对象转成不同二进制流。在RPC调用中，不可避免的要接触到数据的序列化和解序列化。Java对象在一个网络节点中序列化好，放到网络中传输，到另一个网络节点时必须能够反序列化，对象得到正确的解析，这是RP
      
    
    </summary>
    
    
      <category term="RPC 序列化" scheme="http://xu1009.github.io/tags/RPC-%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>ReactJs之路</title>
    <link href="http://xu1009.github.io/2018/01/17/ReactJs%E4%B9%8B%E8%B7%AF/"/>
    <id>http://xu1009.github.io/2018/01/17/ReactJs之路/</id>
    <published>2018-01-17T14:36:17.000Z</published>
    <updated>2018-08-27T11:30:41.308Z</updated>
    
    <content type="html"><![CDATA[<ul><li>包管理器 npm</li><li>构建器 webpack</li><li>编译器 babel<br>JSX 语法</li></ul><p>javascrip拓展语言，可以写html可以写js，js用大括号就行。<br>组件名称必须大写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function Welcome(props) &#123;</span><br><span class="line">  return &lt;h1&gt;Hello, &#123;props.name&#125;&lt;/h1&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const element = &lt;Welcome name=&quot;Sara&quot; /&gt;;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  element,</span><br><span class="line">  document.getElementById(&apos;root&apos;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><welcome>这个是组件，开头大写的，react遇到组件时，他会将属性作为单个对象传递给该组件，这个对象称为props，function那个是定义的组件，这样sara会被传入组件然后渲染到那个root中。</welcome></p><p>props是当你引用组件时的一个对象，你可以使用这个对象中的属性，当然这个属性也是你定义过的。</p><p>使用es6类就允许我们使用其它特性，例如局部状态，生命周期钩子。</p><p>es6 类中使用局部状态就是自己的私有属性，不用再通过props进行传参数了，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;example&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">        function tick() &#123;</span><br><span class="line">            ReactDOM.render(</span><br><span class="line">                    &lt;h1&gt;Hello, world!&#123;new Date().toLocaleTimeString()&#125;&lt;/h1&gt;,</span><br><span class="line">                document.getElementById(&apos;example&apos;)</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        setInterval(tick, 1000);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="react-Router"><a href="#react-Router" class="headerlink" title="react Router"></a>react Router</h3><blockquote><p>他可以让你向应用中快速地添加视图和数据流，同时保持页面与URL间的同步。这个是因为这里只有一个根元素的，就是拿不同组件去渲染，所以前端才会用路由，对于不同url使用不同的组件组合去渲染那个根元素？目前看起来是这样子的，这样做的话就可以实现模块复用，模块化更灵活。其中前端怎么get到url的，这个是通过window这个全局对象get到的。其中hash部分是url的#之后的部分。router是建立在history之上的，他会监听浏览器地址栏的变化，并解析这个url为location对象，然后router使用它匹配到路由，正确的渲染相应的组件。</p></blockquote><p>根DOM节点，里面的一切都是react DOM掌控，<br>ReactDOM.render()两个参数，第一个是react element，第二个是根节点DOM，这样就能将元素加到这个根节点中，react元素不可变，因为本来就定义成const啊。</p><p>arrow functions，简单实用，关键是使用箭头函数不用再手动绑定当前类的this了。</p><blockquote><p>React是一个采用声明式，高效而且灵活的用来构建用户界面的框架，React当中包含了一些不同的组件，各种模块化，实现高度复用。</p></blockquote><p>单独定义组件，使用es6 class或者使用类似于js的函数function。</p><p>JSX是一种很特殊的语法，全部混合到一起了，在js中写html，JSX也使用camelCase命名。<br>Babel转译器会把JSX转换成一个名为Reac.createElement()的方法调用。</p><p>JSX浏览器是不会认识的，这就需要Babel将其转译成js代码。</p><p>组件尽量最大可能的模块化，从而达到更高的复用。</p><p>props只能像纯函数一样去使用，就是只读，不能修改，但是应用界面随时间变化，这就需要一个新的东西，这就是state。</p><h3 id="state"><a href="#state" class="headerlink" title="state"></a>state</h3><blockquote><p>State可以在不违反上述规则的情况下，根据用户操作、网络响应、或者其他状态变化，使组件动态的响应并改变组件的输出。</p></blockquote><p>这个可以改变，然后呢这时候定义组件就只能使用es6类来了，因为定义成类的话就可以使用面向对象的一些特性，比如私有属性，生命期钩子。</p><p>父组件或子组件都不知道某个组件时有状态还是无状态，并且他们不应该关心某组件是被定义为一个函数还是一个类。一个组件可以将自己的属性传给下一个组件，下一个组件对于这个是无感知的，数据自顶向下。</p><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><blockquote><p>react元素的事件处理和DOM元素的很相似，但是有几点不同，首先react事件绑定属性的命名采用驼峰写法，而不是小写，如果采用JSX的语法你需要传入一个函数作为事件处理函数，而不是一个字符串。</p></blockquote><p>更新状态的时候可以传入函数，这样就可以对传入的值进行二次计算。</p><p>回调函数需要绑定this，这个是因为，其实我也没明白，就是react中的和普通的html不太一样，或者js。</p><p>有关向事件处理程序传递参数，这里面有个e是合成事件，可以使用e进行事件响应取消，如不跳转。</p><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><blockquote><p>在REACT中，你可以创建不同的组件封装你需要的行为，然后还可以根据应用的状态变化只渲染其中的一部分。</p></blockquote><p>可以使用js中的if逻辑判断，<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">UserLogin</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>welcome!!!!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">UserNotLogin</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>you are not login!!!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">CheckLogin</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">const</span> isLogin = props.isLogin;</span><br><span class="line">          <span class="keyword">if</span> (isLogin)&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">UserLogin</span>/&gt;</span></span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">UserNotLogin</span>/&gt;</span></span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></p><p>箭头函数中用小括号将函数体括起来可以在调用时返回这个。</p><h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><blockquote><p>现代js应用程序的模块打包器，递归构建一个依赖关系图，这个关系图包含应用程序需要的每个模块，然后将所有这些模块打包成一个或者多个bundle。</p></blockquote><ul><li>入口（entry）</li><li>输出（output）</li><li>loader</li><li>插件（plugins）</li></ul><h4 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h4><p>入口起点（entry point）指示webpack应该使用哪个模块来作为构建其内部依赖图的开始。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.esports = &#123;</span><br><span class="line">    entry: <span class="string">'./path/file.js'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h4 id="出口"><a href="#出口" class="headerlink" title="出口"></a>出口</h4><blockquote><p>output属性告诉webpack在哪里输出它所构建的bundles，以及如何命名这些文件，你可以通过在配置中指定一个output字段，来配置。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./path/file.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        filename: <span class="string">'my-first-webpack.js'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>分离应用程序（app）和第三方（vendor）入口<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/app.js'</span>,</span><br><span class="line">    vendors: <span class="string">'./src/vendors.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>从入口开始创建依赖图，依赖图完全是分离，相互独立的，只有一个入口起点的单页面应用。</p><p>多页面应用<br>配置文件如下所示<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    pageOne: <span class="string">'./src/pageOne/index.js'</span>,</span><br><span class="line">    pageTwo: <span class="string">'./src/pageTwo/index.js'</span>,</span><br><span class="line">    pageThree: <span class="string">'./src/pageThree/index.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>上面就是配置了三个独立分离的依赖图，多页面就是有多个根元素多个html，切换界面的话就需要重新加载文档，并且资源被重新下载。</p><h4 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h4><blockquote><p>这个能够去处理那些非js文件（webpack本身只能理解js），loader可以将所有类型的文件转换为webpack能够处理的有效模块，然后打包处理。<br>loader有两个目标，识别出应该被对应的loader进行转换的那些文件。（test属性），转换这些文件，从而使其能够被添加到依赖图中（并且最终添加到bundle中）（use属性）<br>loader用于对模块的源代码进行转换，loader可以使你在import或加载模块时预处理文件，因此，loader类似于其它构建工具中的task。</p></blockquote><p>首先你要使用npm安装依赖包，比如这里的不同的loader加载不同的格式文件。</p><p>使用loader，这里有三种使用loader的方式：</p><ul><li>配置：在配置文件中指定loader</li><li>内联：在每个import语句中显示指定loader。</li><li>CLI:在shell命令中指定。</li></ul><h4 id="mainfest"><a href="#mainfest" class="headerlink" title="mainfest"></a>mainfest</h4><blockquote><p>一旦你的应用程序中，形如index.html文件，一些bundle和各种资源加载到浏览器，之前的工程目录结构都不存在了，所以这就需要了mainfest，这是让webpack管理各个模块之间怎么交互。当编译器开始执行，解析和映射应用程序时，他会保留所有模块的详细要点，这个数据集合称为Mainfest，当打包完成并发送到浏览器时，会在运行时通过Mainfest来解析和加载模块。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: <span class="string">'./path/to/my/entry/file.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'my-first-webpack.bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>, <span class="attr">use</span>: <span class="string">'raw-loader'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 这个全是使用的正则吧，转换以.txt结尾的文件转换。</span></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure><p>“嘿，webpack 编译器，当你碰到「在 require()/import 语句中被解析为 ‘.txt’ 的路径」时，在你对它打包之前，先使用 raw-loader 转换一下。</p><h4 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h4><blockquote><p>想要使用一个插件，你只需要require()它，然后把它添加到pulgins数组中，多数插件可以通过选项自定义，你也可以在一个配置文件中因为不同目的而多次使用一个插件。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>); <span class="comment">// 通过 npm 安装</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>); <span class="comment">// 用于访问内置插件</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: <span class="string">'./path/to/my/entry/file.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'my-first-webpack.bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.txt$/</span>, <span class="attr">use</span>: <span class="string">'raw-loader'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;<span class="attr">template</span>: <span class="string">'./src/index.html'</span>&#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure><h3 id="模块热替换（hot-module-replacement）"><a href="#模块热替换（hot-module-replacement）" class="headerlink" title="模块热替换（hot module replacement）"></a>模块热替换（hot module replacement）</h3><blockquote><p>模块热替换功能会在应用程序运行过程中替换，添加或删除模块，而无需重新加载整个页面，这就是传说中的热部署，更改完就会自己重新替换更改的部分，然后发布。就是更新webpack-dev-server的配置，使用webpack内置的HMR插件。</p></blockquote><h3 id="webpack-作用"><a href="#webpack-作用" class="headerlink" title="webpack 作用"></a>webpack 作用</h3><blockquote><p>没有webpack之前，每个js都要在html中引用，这个会导致有些没用的什么的都会被下载，效率低下，自己还要把握引入的顺序，顺序不一致就会导致错误，这就需要webpack去处理这些依赖关系，最后打包成若干个bundle，这样的话，在开发环境中就将依赖关系和需要的js文件之类的全部搞定了，这样在线上的时候就会加载的比较快。</p></blockquote><p>依赖是通过npm构建好的，这里也有一个配置文件，省的你去一个个安装，这个是package.json,每次手动安装的时候可以使用–save参数，这样就会在配置文件中写入，下次换个环境，直接npm install就可以实现自动扫描配置文件中的依赖，下载了。都在node_module中，然后自己在js中需要啥就引用啥就行了。</p><p>然后就是这些依赖如果有需要自己在js中引用就行了，这就是后来的react组件，最后就是使用webpack处理好这些依赖关系，打包成bundle，这样就行了。</p><p>体验了一下全部使用webpack命令打包的感觉，这样，的确不是很方便，这就引入了配置文件，取代CLI(命令接口)，然后那个配置文件呢，只是定义了入口和出口，还要运行很麻烦的webpack指令，这就引入了npm 脚本，在npm配置文件中，定义这个脚本，然后还不用指定依赖的绝对路径。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   ./node_modules/.bin/webpack src/index.js dist/bundle.js  <span class="comment">//直接使用命令的方式</span></span><br><span class="line">   </span><br><span class="line">./node_modules/.bin/webpack --config webpack.config.js  <span class="comment">// 使用配置文件的时候</span></span><br><span class="line">   </span><br><span class="line"><span class="string">"build"</span>: <span class="string">"webpack"</span>  <span class="comment">// 直接 npm run build就行</span></span><br></pre></td></tr></table></figure></p><p>webpack之前只是看的处理依赖的库，现在看看webpack怎么整合其他资源，比如图像。</p><p>在js中import css文件，然后给element添加这个样式，这样webpack就会自己打包这个css到js中，然后在线解析的时候将css样式加到head中去，不过现在常使用的是将css进行分离，这样会提高生产环境的加载速度，两个bundle文件是并行加载的。</p><p>处理图像文件，同样的方式需要loader，然后</p><p>webpack通过运行一个或者多个npm脚本时，会在本地node_modules目录中查找安装的webpack</p><p>source map作用是将编译后的代码映射到原始代码，这样就是方便定位错误。</p><p>生产环境和开发环境配置文件分开，其中公共部分独立出来，然后merge，这样可以实现复用。</p><h3 id="创建一个webpack工程的基本步骤"><a href="#创建一个webpack工程的基本步骤" class="headerlink" title="创建一个webpack工程的基本步骤"></a>创建一个webpack工程的基本步骤</h3><ul><li>首先初始化npm目录结构，npm init -y</li><li>安装webpack（本地安装开发环境依赖）</li><li>构建出目录结构src/index.js dist/index.html</li></ul><p>webpack打包可以通过CLI的方式，不过这种很麻烦，这就有了配置文件，配置文件就是定义打包的一些参数。</p><p>配置文件中有啥呢</p><ul><li>常用的有入口，出口，loader，plugin等。</li><li>不同的loader可以让js引用不同类型文件</li></ul><p>打包之后生成的bundle可以用HtmlWebpackPlugin插件自动的加入到html中去，就是重新生成了html。</p><p>clean-webpack-plugin插件打包之前先清理一下相应目录。</p><h4 id="一个开发工具"><a href="#一个开发工具" class="headerlink" title="一个开发工具"></a>一个开发工具</h4><blockquote><p>代码变化时需要自动编译代码，这里有几个工具，webpac‘s Watch Mode、webpack-dev-server、webpack-dev-middleware，现在大部分都是使用webpack-dev-server。</p></blockquote><p>其中watch的话就是”watch”: “webpack –watch”脚本就行，他会观察当前的文件，如果有变化的话就会重新编译。但是不会自动刷新浏览器界面。</p><ul><li>webpack-dev-server这个比较常见，启动一个server默认在8080端口，详细配置是HMR。</li><li>webpack-dev-middleware</li></ul><p>HRM只是为了不全局刷新，局部更新替换某个模块。</p><h3 id="CSS中的Box-Model"><a href="#CSS中的Box-Model" class="headerlink" title="CSS中的Box Model"></a>CSS中的Box Model</h3><ul><li>margin 边距</li><li>border 边框</li><li>padding 间隙</li><li>content 内容</li></ul><ul><li>边距属性 (margin) 是用来设置一个元素所占空间的边缘到相邻元素之间的距离</li><li>边框属性 (border) 用来设定一个元素的边线</li><li>间隙属性 (padding) 是用来设置元素内容到元素边框的距离</li><li>CSS 背景属性指的是 content 和 padding 区域</li><li>CSS 属性中的 width 和 height 指的是 content 区域的宽和高</li></ul><ul><li>有关webpack-dev-server的代理，转发dev-server的请求，调试很方便。</li></ul><h3 id="Jquery的deferred对象"><a href="#Jquery的deferred对象" class="headerlink" title="Jquery的deferred对象"></a>Jquery的deferred对象</h3><blockquote><p>为了回调函数出现的，链式写法，done，fail，可以多个回调函数，多个事件的同一个回调函数。<br>用处</p></blockquote><h3 id="有关CSS样式优先级问题"><a href="#有关CSS样式优先级问题" class="headerlink" title="有关CSS样式优先级问题"></a>有关CSS样式优先级问题</h3><blockquote><p>优先级就是分配给指定的CSS声明的一个权重，它由匹配的选择器中的每一种选择器类型的数值决定。而当优先级与多个css声明中任意一个声明的优先级相等的时候，css中最后的那个声明将会被应用到元素上。当同一个元素有多个声明的时候，优先级才会有意义，因为每一个直接作用于元素的css规则总是会接管或者覆盖改元素从祖先元素继承而来的规则。</p></blockquote><h4 id="选择器类型"><a href="#选择器类型" class="headerlink" title="选择器类型"></a>选择器类型</h4><ul><li>类型选择器（例如，h1）和伪元素（例如，::before）</li><li>类选择器（class selectors） (例如,.example)，属性选择器（attributes selectors）（例如, [type=”radio”]），伪类（pseudo-classes）（例如, :hover）</li><li>ID选择器（例如, #example）具有更高优先级</li></ul><p>给元素添加的内联样式 (例如, style=”font-weight:bold”) 总会覆盖外部样式表的任何样式 ，因此可看作是具有最高的优先级</p><p>Babel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。</p><p>es6中的let声明的变量，只在当前代码块有效。这是和var的不同。</p><p>变量提升var输出的是undefined然后let直接抛出错误。</p><p>const 增加了常量</p><h3 id="reacjs"><a href="#reacjs" class="headerlink" title="reacjs"></a>reacjs</h3><blockquote><p>几个概念说一下，jsx是一种格式，就像xml，js等这些，在这个格式中可以把html和js混合写在一起，是javascript的语法的拓展，这个更像js，所以在里面写的一些html需要变化一些，比如html中的标签属性之类，class变成className，使用小驼峰命名法。es6是一种规范，一种标准，是js的标准或者规范，增加了一些新特性。</p></blockquote><p>事件中如果回调函数使用的是箭头函数的话就可以不用绑定。</p><p>jsx只是为React.createElement()方法提供的语法糖。这样在写的时候会方便一些，下面复杂的编译通过babel编译器进行。</p><h3 id="react一些基础常识"><a href="#react一些基础常识" class="headerlink" title="react一些基础常识"></a>react一些基础常识</h3><p>其实我也觉得react会很快，总觉得这种局部刷新的，要完爆其它一切框架，但是实际上却不是这样，官方文档说过react尽量达到跟非react版本相当的性能。</p><p>这里react组件渲染分为初始化渲染和更新渲染（对应相应的生命周期方法）</p><p>首先在初始化渲染的时候回调用根组件下的所有组件的render方法进行渲染，如下图（绿色表示已渲染）</p><p><img src="https://sfault-image.b0.upaiyun.com/407/896/4078962238-585142242e316_articlex" alt=""></p><p>但是当我们要更新某个子组件的时候，如下图的绿色组件（从根组件传递下来应用在绿色组件上的数据发生改变）：</p><p><img src="https://sfault-image.b0.upaiyun.com/168/734/1687340203-5851427977a39_articlex" alt=""></p><p>我们的理想状态只是调用关键路径上组件的render，如下图：</p><p><img src="https://sfault-image.b0.upaiyun.com/254/013/2540130692-585142a91eb77_articlex" alt=""></p><p>但是react默认做法是调用所有组件的render，再对生成的虚拟DOM进行对比，如不变则不进行更新，这样的render和虚拟DOM的对比明显是在浪费，如下图（黄色表示浪费的render和虚拟DOM对比）,这个明显做了很多无用功啊，如果这个树的深度很深，那就会导致性能上巨差。</p><p><img src="https://sfault-image.b0.upaiyun.com/150/116/1501167720-5851433ff1174_articlex" alt=""></p><blockquote><p>拆分组件是有利于复用和组件优化的，生成虚拟DOM并进行比对发生在render()后，而不是render()前</p></blockquote><h4 id="更新阶段的生命周期"><a href="#更新阶段的生命周期" class="headerlink" title="更新阶段的生命周期"></a>更新阶段的生命周期</h4><ul><li>componentWillReceiveProps(object nextProps)：当挂载的组件接收到新的props时被调用。此方法应该被用于比较this.props 和 nextProps以用于使用this.setState()执行状态转换。（组件内部数据有变化，使用state，但是在更新阶段又要在props改变的时候改变state，则在这个生命周期里面）</li><li>shouldComponentUpdate(object nextProps, object nextState)： -boolean 当组件决定任何改变是否要更新到DOM时被调用。作为一个优化实现比较this.props 和 nextProps 、this.state 和 nextState ，如果React应该跳过更新，返回false。</li><li>componentWillUpdate(object nextProps, object nextState)：在更新发生前被立即调用。你不能在此调用this.setState()。</li><li>componentDidUpdate(object prevProps, object prevState)： 在更新发生后被立即调用。（可以在DOM更新完之后，做一些收尾的工作）</li></ul><blockquote><p>React的优化是基于shouldComponentUpdate的，该生命周期默认返回true，所以一旦prop或state有任何变化，都会引起重新render。</p></blockquote><p>所以shouldComponentUpdate就很重要，这里讲一下这个方法，react在每个组件生命周期更新的时候都会调用一个shouldComponentUpdate(nextProps, nextState)函数，它的职责就是返回true或者false，true表示需要更新，false表示不需要，默认返回为true，即便你没有显示的定义shouldComponentUpdate函数。这就不难解释上面发生的资源浪费了（默认都是true所以组件都会更新的）</p><p>为了进一步说明问题，我们再引用一张官网的图来解释，如下图（ SCU表示shouldComponentUpdate，绿色表示返回true(需要更新)，红色表示返回false(不需要更新)；vDOMEq表示虚拟DOM比对，绿色表示一致(不需要更新)，红色表示发生改变(需要更新)）：</p><p><img src="https://sfault-image.b0.upaiyun.com/146/798/1467989449-5851f3865be3b_articlex" alt=""></p><p>根据渲染流程，首先会判断shouldComponentUpdate(SCU)是否需要更新。如果需要更新，则调用组件的render生成新的虚拟DOM（就是根据这个方法来判断是否更新），然后再与旧的虚拟DOM对比(vDOMEq)，如果对比一致就不更新，如果对比不同，则根据最小粒度改变去更新DOM(这也是一个优点，最小粒度更新)；如果SCU不需要更新，则直接保持不变，同时其子元素也保持不变。然后自己需要控制SCU?</p><p>每当组件的props或state改变时，react会重新创建一个虚拟DOM，并拿这个DOM与上一个作对比，如果发现两个虚拟DOM不完全相同，则React就会做reconcile（校正？），把有差异的地方更新到真实的DOM上（这当然是建立在SCU方法返回true的前提下），react中父组件更新默认触发所有子组件更新。</p><ul><li>C1根节点，绿色SCU (true)，表示需要更新，然后vDOMEq红色，表示虚拟DOM不一致，需要更新。</li><li>C2节点，红色SCU (false)，表示不需要更新，所以C4,C5均不再进行检查</li><li>C3节点同C1，需要更新</li><li>C6节点，绿色SCU (true)，表示需要更新，然后vDOMEq红色，表示虚拟DOM不一致，更新DOM。</li><li>C7节点同C2</li><li>C8节点，绿色SCU (true)，表示需要更新，然后vDOMEq绿色，表示虚拟DOM一致，不更新DOM。</li></ul><h4 id="一些带坑的写法"><a href="#一些带坑的写法" class="headerlink" title="一些带坑的写法"></a>一些带坑的写法</h4><ul><li>{…this.props} (不要滥用，请只传递component需要的props，传得太多，或者层次传得太深，都会加重shouldComponentUpdate里面的数据比较负担，因此，请慎用spread attributes（<component {...props}="">）)。</component></li><li>::this.handleChange()。(请将方法的bind一律置于constructor)</li><li>复杂的页面不要在一个组件里面写完。</li><li>请尽量使用const element。</li><li>map里面添加key，并且key不要使用index（可变的）具体可参考<a href="http://levy.work/2016-08-31-debug-react-key-with-performance-tool/" target="_blank" rel="noopener">使用Perf工具研究React Key对渲染的影响</a></li><li>尽量少用setTimeOut或不可控的refs、DOM操作。</li><li>props和state的数据尽可能简单明了，扁平化。</li><li>使用return null而不是CSS的display:none来控制节点的显示隐藏。保证同一时间页面的DOM节点尽可能的少。</li></ul><h4 id="一个react优化的点"><a href="#一个react优化的点" class="headerlink" title="一个react优化的点"></a>一个react优化的点</h4><blockquote><p>react经常会让你给标签加一个key，不然会有警告，这里研究一下这个优化方向。React本身就非常关注性能，其提供的虚拟DOM搭配上Diff算法，实现对DOM操作最小粒度的改变也是非常的高效。然而其组件渲染机制，也决定了在对组件进行更新时还可以进行更细致的优化。</p></blockquote><p>主要包括两个点：</p><ol><li>父组件更新默认触发所有子组件更新</li><li>列表类型的组件默认更新方式非常复杂</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;包管理器 npm&lt;/li&gt;
&lt;li&gt;构建器 webpack&lt;/li&gt;
&lt;li&gt;编译器 babel&lt;br&gt;JSX 语法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;javascrip拓展语言，可以写html可以写js，js用大括号就行。&lt;br&gt;组件名称必须大写&lt;/p&gt;
&lt;figu
      
    
    </summary>
    
    
      <category term="前端 react" scheme="http://xu1009.github.io/tags/%E5%89%8D%E7%AB%AF-react/"/>
    
  </entry>
  
  <entry>
    <title>Spring持续更新</title>
    <link href="http://xu1009.github.io/2017/10/21/Spring%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
    <id>http://xu1009.github.io/2017/10/21/Spring持续更新/</id>
    <published>2017-10-21T14:20:17.000Z</published>
    <updated>2018-08-27T11:30:41.322Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>spring是一个轻量级开发应用框架，一个完整的应用是由一组相互协作的对象组成，spring就是是的这些对象在完成功能的同时实现低耦合，高内聚。spring一部分功能就是管理这些对象，处理对象间的依赖关系。spring还提供像通用日志记录、性能统计、安全控制、异常处理等面向切面的能力，还有数据库事物。超级粘合平台，除了自己提供功能外，还提供粘合其它技术和框架的能力。</p></blockquote><p>spring的优点</p><ol><li>非常轻量级的容器，主要是Ioc和DI，集中管理对象和对象间依赖关系，实现低耦合。而且spring容器是非入侵式的（不需要依赖spring的类），spring不依赖环境，可以部署到很多环境。</li><li>AOP，面向切面编程，实现代码的复用，就是将一些通用功能提取出来，然后将这些通用功能在合适的时候织入到应用程序中。</li><li>简单数据库事物管理，其实用到的也是AOP的功能。</li></ol><p>spring的整体结构如下<br><img src="http://sishuok.com/forum/upload/2012/2/19/c7d3b7851018141de052e5133093873b__1.JPG" alt=""></p><h3 id="IOC-DI"><a href="#IOC-DI" class="headerlink" title="IOC/DI"></a>IOC/DI</h3><p>控制反转，传统方式是一个类需要其它对象，是直接使用new实例化一个，但是这种导致对象间耦合度过高，现在对象的创建交给ioc容器了，由ioc容器控制对象的创建并获得需要改对象的地方，将容器中的实例化对象注入进去。这个体现了OOP设计法则之一，好莱坞法则，别找我们，我们找你。IOC通过反射的技术来实例化对象。</p><p>依赖注入 bean依赖IOC容器，IOC容器注入bean依赖资源。</p><p>spring的延迟初始化bean(创建容器时，提前初始化singleto作用域的bean)，这个就是指不提前初始化bean，而是只有在真正使用时才创建和初始化bean<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"helloApi"</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.javass.spring.chapter2.helloworld.HelloImpl"</span>  </span><br><span class="line">lazy-init=<span class="string">"true"</span>/&gt;</span><br></pre></td></tr></table></figure></p><h3 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h3><p> Spring的Resource接口代表底层外部资源，提供了对底层外部资源的一致性访问接口。比如常见的加载类路径下的资源文件，还可以使用路径通配符，?匹配一个字符串，* 匹配零个或多个字符串，<br> **匹配路径中的零个或多个目录。</p><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><blockquote><p>OOP最大问题就是无法解耦组件进行开发，AOP为开发者提供一种进行横切关注点分离并织入的机制，把横切关注点分离，然后通过某种技术织入到系统中，从而解耦。</p></blockquote><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>连接点（joinpoint）：表示在程序中插入横切关注点的拓展点，连接点可能是类初始化、方法执行、方法调用、字段调用或处理异常，spring只支持方法执行连接点，在AOP中表示在哪里干。</li><li>切入点（Pointcut）：连接点集合，支持正则表达式定义切入点。</li><li>通知（advice）：在连接点上执行的行为，这个就是具体实现，在连接点需要插入的行为。</li><li>方面/切面（Aspect）：横切关注点的模块化，可以认为是通知、引入和切入点的组合。</li><li>引入（inter-type declaretion）：也称为内部类型声明，为已有的类添加额外新的字段或方法，spring允许引入新的接口道所有被代理对象。</li><li>目标对象（target object）：这个就是切入点选择的对象，也是代理对象。</li><li>织入（weaving）：织入是一个过程，是将切面应用到目标对象从而创建出AOP代理对象的过程。</li></ul><p>下面是具体xml配置，首先指定切入点，然后定义切面，切面里面包括切入点和通知。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"point"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.xq..*.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"aspect"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"beforeAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"point"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"afterFinallyAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"point"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="http://sishuok.com/forum/upload/2012/2/21/b362f09e4812acff043a4c8bfc2ce1d0__1.JPG" alt=""><br>下面是在spring配置文件中aop的详细配置<br><img src="http://sishuok.com/forum/upload/2012/2/21/a384cf881a9a348b1bf2146232744f36__1.JPG" alt=""></p><p>说一下引用，引用就是直接给加方法，使得目标对象实现了某个接口，具有某个方法。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"point"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.xq..*.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"aspect"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"beforeAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"point"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"afterFinallyAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"point"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:declare-parents</span> <span class="attr">types-matching</span>=<span class="string">"com.xq..*.IHelloWorldService+"</span> <span class="attr">implement-interface</span>=<span class="string">"com.xq.aop.IntroducService"</span> <span class="attr">default-impl</span>=<span class="string">"com.xq.aop.impl.IntroducServiceImpl"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>advisor 就是只有一个通知和一个切入点的切面，然后切入点的话还是按之前的方式设置，通知类就必须实现相应的接口（入侵式），这比普通的aspect要麻烦的多。</p><p>还有一种使用注解的方式，不过这种方式感觉好麻烦，不建议使用，如果使用的话就是在xml配置文件中使用 <a href="aop:aspectj-autoproxy/" target="_blank" rel="noopener">aop:aspectj-autoproxy/</a>就能使用注解的方式了。</p><h4 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h4><ol><li>execution（方法表达式）匹配方法执行<br>举几个例子，这个可以在项目中慢慢体会，没啥。</li></ol><p>public <em> </em>(..)          任何公共方法执行</p><pre><code>* cn.javass..IPointcutService.*() cn.javass包及其子包下的IPointcutService接口中的任何无参方法。</code></pre><ol start="2"><li>within 匹配指定类型内的方法执行<br>within(cn.javass..*)   cn.javass包及子包下的任何方法执行</li><li>this（类型权限定名）匹配当前AOP代理对象类型的执行方法。<br>this(cn.javass.spring.chapter6.service.IPointcutService)    当前AOP对象实现了 IPointcutService接口的任何方法</li></ol><p>AOP默认使用的是jdk的动态代理，这需要目标对象实现了某个接口，当目标对象没有实现接口的时候，就使用CGLIB代理来实现AOP。CGLIB不仅能进行接口代理也能进行类代理。</p><h3 id="spring的JDBC支持"><a href="#spring的JDBC支持" class="headerlink" title="spring的JDBC支持"></a>spring的JDBC支持</h3><blockquote><p>虽然这个现在基本上不会直接使用JDBC操作了，但是还是要了解一下，spring简化了jdbc编程，主要提供三种方式，一种是JDBC模板、关系数据库对象化方式和simpleJdbc，后来的orm框架都不会使用这些了。JDBC模板对事务进行了处理，操作上更简单，封装了很多方法，</p></blockquote><h3 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h3><blockquote><p>对象关系映射，Java对象状态自动映射到关系数据库中的数据上，从而提供透明化的持久化支持。</p></blockquote><p>当前ORM框架hibernate、JPA、mybatis、JDO等</p><ul><li>hibernate，全自动的ORM框架，能自动为对象生成相应的sql并透明化的持久化对象到数据库。通过SessionFactory获取session进行操作，必须自己控制事务，这很麻烦，所以spring还支持了hibernateTemplate模板来简化事务，这个和jdbc事务基本上差不多，由于是全自动化的，所以给程序猿的发挥空间就很少了，这是缺点</li><li>mybatis是一个半自动化的orm框架，可以自己写sql。比hibernate要简单的多。</li><li>JPA,也是一个ORM框架，spring也集成了这个。<h3 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务"></a>数据库事务</h3></li></ul><p>数据库事物属性ACID</p><ul><li>原子性：事务是不可分割的最小工作单元，事务内的操作要么全部成功，要么全部失败。</li><li>一致性：事务执行前数据库的数据处于正确的状态，事务执行后数据的数据还是处于正确状态。</li><li>隔离性：事务之间的隔离性，在一个事务内部的操作对其他事务不产生影响，这里面存在隔离级别。</li><li>持久性：事务一旦执行成功，它对数据的数据的改变必须是永久的。</li></ul><p>多个事务并发执行带来的问题，解决的是事务之间并发访问一个数据库的问题。</p><ul><li>脏读：一个事务看到了另一个事务未提交的更新数据</li><li>幻读：一个事务在执行过程中读取到了另一个事务已经提交的插入数据，即在第一个事务开始时读取到一批数据，但此后另一个事务又插入了新数据并提交，此时第一个事务又读取这批数据发现多了一条，好像发生幻觉一样。</li><li>丢失更新：两个事务同时更新一行数据，最后一个事务的更新会覆盖掉第一个事务的更新，没有加锁造成的。</li><li>不可重复读：在同一个事务中，多次读取同一数据返回不同结果，也就是有其他事务更改了这些数据。</li></ul><p>解决并发问题，这就存在了数据库隔离级别</p><ul><li>未提交读：最低隔离级别，并发的四个问题都有可能出现。</li><li>已提交读：可以避免丢死更新，脏读，可能能出现不可重复读，幻读，一个事务能读取到别的事务提交的更新数据，不能看到未提交的更新数据。</li><li>可重复读：保证同一事务先后执行的多次查询将返回同一结果，不受其他事务影响，不能避免幻读</li><li>可序列化：都能避免，不允许事务并发执行，必须串行执行。</li></ul><p>隔离级别越高数据库事务并发执行性能越差，实际项目开发中一般使用已提交读，不可重复读和幻读靠乐观锁或悲观锁来解决这些问题。</p><p>数据库事务分为本地事务和分布式事务</p><p>Java事务类型有JDBC事务和JTA事务</p><h3 id="spring内置事务"><a href="#spring内置事务" class="headerlink" title="spring内置事务"></a>spring内置事务</h3><ol><li>jdbc及mybatis框架事务管理器DataSourceTrancationManager</li><li>hibernate事务</li><li>jpa事务</li><li>jdo事务<h3 id="spring的注解"><a href="#spring的注解" class="headerlink" title="spring的注解"></a>spring的注解</h3></li></ol><p>依赖注入的装配<br>autowired根据类型，可以使用qualifier限定符限定名字，不过注册的时候也要使用这个限定符限定名字。<br>resource默认根据类型装配，也可以指定名字进行装配。<br>inject对应autowired<br>named是给bean加个名字</p><p>value是给加值<br>注册的注解<br>一般都使用component下的分层，这个没啥</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;spring是一个轻量级开发应用框架，一个完整的应用是由一组相互协作的对象组成，spring就是是的这些对象在完成功能的同时实现低耦合，高内聚。spring一部分功能就是管理这些对象，处理对象间的依赖关系。spring还提供像通用日志记录、性能统计
      
    
    </summary>
    
    
      <category term="spring" scheme="http://xu1009.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper</title>
    <link href="http://xu1009.github.io/2017/09/25/zookeeper/"/>
    <id>http://xu1009.github.io/2017/09/25/zookeeper/</id>
    <published>2017-09-25T13:04:57.000Z</published>
    <updated>2018-08-27T11:30:41.338Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>zookeeper是一种为分布式应用设计的高可用，高性能且一致的开源协调服务，他提供了一项基本服务：分布式锁服务，还有配置维护，组维护，分布式消息队列，分布式通知/协调。一致性、可用性和容错性，使用的是Zab协议，数据结构Znode，原语、通知机制–watch机制。</p></blockquote><h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p>zk拥有一个层次的命名空间，如下：<br><img src="http://images.cnitblog.com/blog/671563/201411/301534562152768.png" alt=""></p><ul><li>Znode通过路径引用，就像Unix中的文件路径，路径必须是绝对的，因为他们必须由斜杠字符来开头，还必须是唯一的，/zookeeper用来保存管理信息，比如关键配额信息。</li><li>Znode兼具文件和目录两种特点，每个znode由三部分组成，首先是stat，表示状态信息，描述该节点的版本，权限等信息，然后是data，这个是当前节点存储的数据，最后是children，表示Znode下的子节点。<br>节点存储的信息也是很小的，最大只能是1M，通常情况下要比这个小的多，存储的都是配置信息，状态信息，汇集位置等等，管理调度数据。</li><li>数据访问，存储的数据要被原子性操作，要么完成要么失败，每个节点还有自己的ACL,规定了用户权限。</li><li>节点类型，临时节点，该节点就是存活在回话还没结束的情况下，一旦回话结束，临时节点就会被自动删除，临时节点不允许有子节点。还有就是顺序节点，除非用户删除，不然会一直存在。顺序节点，路径结尾加一个递增的计数，这个计数对于此节点父节点是唯一的，计数值大于一定值时，计数器会溢出。</li><li>watch，客户端可以在节点上设置watch，这就是监视器，当该节点的状态发生变化时，将会触发watch对应的操作，然后会向客户端发送一条通知，然后watch失效，客户端需要重新注册。<h3 id="zk中的时间"><a href="#zk中的时间" class="headerlink" title="zk中的时间"></a>zk中的时间</h3></li><li>Zxid，使得zk节点状态改变的每一个操作将使节点接收到一个Zxid格式的时间戳，时间戳全局有序，每个节点维护三个Zxid值，分别为：cZxid、mZxid、pZxid，分别是节点创建的时间戳，节点修改时间，第三个不知道是啥。Zxid是一个64位的数字，高32位是epoch用来标识leader关系是否改变，每次一个leader被选出来，它都会有一个新的epoch，低32位是个递增数。版本号，对节点每一个操作都致使这个节点版本号增加，每个节点维护着三个版本号，首先是version节点数据版本号，cversion节点版本号，aversion节点所拥有的acl版本号。<br>节点属性如下：</li></ul><p><img src="http://images.cnitblog.com/blog/671563/201411/301534569026625.png" alt=""></p><h3 id="zk服务中的操作"><a href="#zk服务中的操作" class="headerlink" title="zk服务中的操作"></a>zk服务中的操作</h3><p><img src="http://images.cnitblog.com/blog/671563/201411/301534572468352.png" alt=""></p><p>更新ZooKeeper操作是有限制的。delete或setData必须明确要更新的Znode的版本号，我们可以调用exists找到。如果版本号不匹配，更新将会失败。</p><p>更新ZooKeeper操作是非阻塞式的。因此客户端如果失去了一个更新(由于另一个进程在同时更新这个Znode)，他可以在不阻塞其他进程执行的情况下，选择重新尝试或进行其他操作</p><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><blockquote><p>ZooKeeper可以为所有的读操作设置watch，这些读操作包括：exists()、getChildren()及getData()。watch事件是一次性的触发器，当watch的对象状态发生改变时，将会触发此对象上watch所对应的事件。watch事件将被异步地发送给客户端，并且ZooKeeper为watch机制提供了有序的一致性保证。理论上，客户端接收watch事件的时间要快于其看到watch对象状态变化的时间。</p></blockquote><p>① 一个成功的setData操作将触发Znode的数据watch</p><p>② 一个成功的create操作将触发Znode的数据watch以及孩子watch</p><p>③ 一个成功的delete操作将触发Znode的数据watch以及孩子watch</p><p>ZooKeeper所管理的watch可以分为两类：</p><p>① 数据watch(data  watches)：getData和exists负责设置数据watch<br>② 孩子watch(child watches)：getChildren负责设置孩子watch</p><h3 id="Master选举"><a href="#Master选举" class="headerlink" title="Master选举"></a>Master选举</h3><p>在分布式锁服务中，有一种最典型应用场景，就是通过对集群进行Master选举，来解决分布式系统中的单点故障。什么是分布式系统中的单点故障：通常分布式系统采用主从模式，就是一个主控机连接多个处理节点。主节点负责分发任务，从节点负责处理任务，当我们的主节点发生故障时，那么整个系统就都瘫痪了，那么我们把这种故障叫作单点故障。</p><p>传统方式是使用备用主机，不断向master发送ping包，来确定master是否存活，如果没收到ack就认为master挂了，自己会启动一个新实例，但是这样会存在一个问题，那就是网络问题，其实master没有挂，但是由于网络问题，备用主机没有收到master的ack，这时候自己会启动实例，这就会导致服务存在双master，导致系统混乱。</p><p>看看zk的解决方式，虽然不能解决网络问题，但是能保证每个时刻只存在一个master</p><p><img src="http://images.cnitblog.com/blog/671563/201411/301535008567950.png" alt=""></p><p>选取编号最小的节点为主节点，主节点挂掉之后会重新触发一次选举。</p><p>下面是配置文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># The number of milliseconds of each tick</span><br><span class="line">tickTime=2000</span><br><span class="line"></span><br><span class="line"># The number of ticks that the initial</span><br><span class="line"># synchronization phase can take</span><br><span class="line"></span><br><span class="line">initLimit=10</span><br><span class="line">follower和leader连接同步到leader的初始化连接时间。</span><br><span class="line"></span><br><span class="line"># The number of ticks that can pass between</span><br><span class="line"># sending a request and getting an acknowledgement</span><br><span class="line">syncLimit=5</span><br><span class="line">leader和follower之间发送消息时，请求和应答时间长度</span><br><span class="line"># the directory where the snapshot is stored.</span><br><span class="line">dataDir=D:/softinstall/zk/zookeeper-3/temp/zookeeper/</span><br><span class="line">这个目录下需要创建myid存储服务器编号</span><br><span class="line"># the port at which the clients will connect</span><br><span class="line">clientPort=2183</span><br><span class="line">zk监听端口</span><br><span class="line">#the location of the log file</span><br><span class="line">dataLogDir=D:/softinstall/zk/zookeeper-3/temp/log/</span><br><span class="line">日志</span><br><span class="line">server.0=localhost:2287:3387</span><br><span class="line">server.1=localhost:2288:3388</span><br><span class="line">server.2=localhost:2289:3389</span><br><span class="line"></span><br><span class="line">server.A=B：C：D</span><br><span class="line">A：其中 A 是一个数字，表示这个是服务器的编号</span><br><span class="line">B：是这个服务器的 ip 地址；</span><br><span class="line">C：Leader选举的端口；</span><br><span class="line">D：Zookeeper服务器之间的通信端口。</span><br></pre></td></tr></table></figure></p><p>zookeeper不支持递归的删除操作，因此在删除父节点之前必须先删除子节点，delete操作要先比较版本号，乐观锁机制，delete的第二个参数设置为-1可以绕过这个版本检测机制。</p><h3 id="zk异常"><a href="#zk异常" class="headerlink" title="zk异常"></a>zk异常</h3><ul><li>InterruptedException异常<br>如果操作被中断，就会抛出这个异常，在Java语言中取消阻塞方法会调用interrupt()方法，如果成功取消阻塞方法的话就会抛出这个异常，通常使用这种方法来取消zookeeper操作。</li><li>KeeperException异常<br>Zookeeper服务器发出一个错误信号或者服务器存在通信问题，抛出的是这个异常。</li></ul><p>这个异常通常非为3类：</p><ol><li>状态异常，操作不能作用于znode树而导致失败，通常是同一时间有另外一个进程正在修改znode，根据版本号这个操作就会失败。</li><li>可恢复异常，能够在同一个zookeeper回话中恢复的异常，对于这种异常的处理，要分情况，幂等操作和非幂等操作，幂等是指多次执行不会有影响，比如读请求和更新值，这种就简单重试就行，非幂等操作就不行，因为他们一次操作的结果和多次操作的结果可能不一样。</li><li>不可恢复异常，比如会话失效，这种只能重新连接。<h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3>同一台机器上，在相同jvm情况下，锁是靠jvm内部机制实现，但是在分布式系统中，多个进程分布在不同的机器上，这就需要新的锁机制了，zk就有这种功能，分布式锁可以在大型分布式系统中实现领导者选举（这个选举和zk自己的领导选举不一样，主要是为了与主进程保持一致的分布式系统设计），持有锁的那个进程就是系统的领导者。</li></ol><ul><li>一般情况下分布式锁的实现，首先是创建一个作为锁的znode（永久），然后希望获得锁的客户端创建临时顺序子节点作为这个节点的子节点，在任何时间都是顺序号最小的客户端持有锁。</li><li>上诉方法会导致羊群效应，什么是羊群效应呢，就是当客户端数量比较大的情况下，每客户端都会在那个节点下创建子节点，并在锁znode上设置观察，每次锁被释放的时候，观察会被触发，zk需要向所有客户端发出通知，但是实际上只又很少一部分需要处理这一事件，最后只有一个客户端成功获得锁，zk发送大量通知会产生峰值流量，这会对zk服务器造成压力，解决这个问题方法是只有前一个顺序号的子节点消失时才需要通知下一个客户端，而不是删除或者创建任何子节点时都需要通知。就是每个子节点只观察自己上一个znode。</li><li>这个还有一个问题就是，不能处理因连接丢失而导致的creat操作失败。就是我们创建过程中，连接丢失了，但是我们又不知道是否创建成功，这时候不能简单的重试，因为如果第一次创建成功，重试的话，就会导致有一个节点根本没有进程和他对应，这个节点也就不会被删除，除非会话结束，最后导致死锁，这个解决方法就是在子节点名称中加入ID，自己可以分辨的ID,比如zk提供了获取当前会话的id，这个可以加到里面，这个id是全局唯一的，这样就可以在创建之前检查一下了。<h3 id="zookeeper实现共享锁"><a href="#zookeeper实现共享锁" class="headerlink" title="zookeeper实现共享锁"></a>zookeeper实现共享锁</h3></li></ul><blockquote><p>serverA 和 serverB同时访问serverC上的文件，并同时对该文件执行写操作，如果没有锁的话，导致写入的顺序会混乱，这就需要共享锁了。</p></blockquote><ul><li>利用节点的唯一性，比如加锁时就床架某个节点，其它机器尝试获得锁的时候也创建同样的节点，但是由于节点的唯一性导致无法创建成功，解锁的时候，只需要删除这个节点就行，这个在公司做那个定时任务时，由于服务器的集群，要保证同一时刻只有一个定时任务触发，这就需要共享锁了，这个是将自己ip存到那个节点，每次其它机器都是读取节点的内容和自己的ip对比，释放锁的时候是结束回话，那个临时节点会被自动删除。<br><img src="http://www.uml.org.cn/zjjs/images/2014111912.png" alt=""></li><li>利用顺序节点来创建共享锁，这个和前面一样啊，就是节点顺序号最小的获得锁，羊群效应</li></ul><h3 id="zk简述"><a href="#zk简述" class="headerlink" title="zk简述"></a>zk简述</h3><blockquote><p>zk不是用来存储数据的，他的数据都是在replicateddatabase中，这也是一个内存数据库，一般可想而知就不会很大，zk主要存储的是配置信息元数据，协调功能，主要作用是用来维护和监控存储数据的状态变化，通过监控这些数据状态的变化，可以达到基于数据的集群管理，关心的数据，数据量还不是很大的。HDFS则是存储在磁盘上。</p></blockquote><p>zk作用:</p><ol><li>集群管理：利用临时节点特性，节点关联的是机器的主机名，ip地址等相关信息，集群单点故障也属于该范畴。</li><li>统一命名：利用节点的唯一性和目录节点树结构。</li><li>配置管理：节点关联的是配置信息。</li><li>分布式锁：节点关联的是要竞争的资源。</li></ol><h4 id="数据发布和订阅"><a href="#数据发布和订阅" class="headerlink" title="数据发布和订阅"></a>数据发布和订阅</h4><blockquote><p>这个就是所谓的配置管理，配置数据发布到zk上，订阅者动态获取数据，实现配置信息的集中式管理和动态更新，比如全局配置信息，地址列表。集中式配置管理在应用集群中是非常常见的，通过在节点上设置watch，在节点状态发生变化时会通知客户端。</p></blockquote><p>相关应用</p><ol><li>索引信息和集群中机器节点状态存放在zk一些指定节点，供各个客户端订阅使用。</li><li>系统日志（经过处理后）存储，这些日志通常2-3天后被清除</li><li>应用中用到的一些全局变量，比如一些消息中间件的消息队列通常有个offset，这个offset存放在zk上，这样集群中每个发送者都能知道当前的发送进度。</li><li>配置信息集中管理，应用其中的时候主动获取一次，并在节点上注册一个watcher。</li></ol><p>如下所示：配置信息放到一个节点，其它客户端设置watcher<br><img src="http://img.blog.csdn.net/20170829141216394?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvRzI5MDA5NTE0Mg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><h4 id="统一命名服务"><a href="#统一命名服务" class="headerlink" title="统一命名服务"></a>统一命名服务</h4><blockquote><p>这个一般都是在rpc框架中使用的，就是通过一个服务名来获得资源服务的地址和提供者信息。像soa上，自己手动在zk上写入的服务名和服务名下的接口名和响应的ip地址和端口，消费者根据服务名和接口名获得相关的服务提供者的地址和端口</p></blockquote><h4 id="分布通知-协调"><a href="#分布通知-协调" class="headerlink" title="分布通知/协调"></a>分布通知/协调</h4><blockquote><p>zk中特有watcher注册与异步通知机制能够很好的实现分布式环境下不同系统之间的通知与协调，实现对数据变更的实时处理。</p></blockquote><p>相关应用：</p><ol><li>心跳检测机制：检测系统和被检测系统通过zk上某个节点关联。</li><li>系统调度模式：控制台和推送系统，控制台控制推送系统进行相应的推送工作，其实就是使用的watcher</li><li>工作汇报模式：就是子任务启动后，会注册一个临时节点，然后去修改这个节点，管理者可以获取这个节点信息。</li></ol><h4 id="集群管理"><a href="#集群管理" class="headerlink" title="集群管理"></a>集群管理</h4><ol><li>集群机器监控<br>实时检测集群机器是否存活<br>master选举<br>相同的业务分布在不同的机器上，有些业务逻辑，例如一些耗时的计算，往往只需要整个集群中的某一台机器进行执行，其余共享这个结果，减少重复劳动，提高性能。</li></ol><p>这个master选举和锁一样啊？？？？？？？？？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;zookeeper是一种为分布式应用设计的高可用，高性能且一致的开源协调服务，他提供了一项基本服务：分布式锁服务，还有配置维护，组维护，分布式消息队列，分布式通知/协调。一致性、可用性和容错性，使用的是Zab协议，数据结构Znode，原语、通知机制
      
    
    </summary>
    
    
      <category term="zookeeper" scheme="http://xu1009.github.io/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>java并发常见问题</title>
    <link href="http://xu1009.github.io/2017/09/18/java%E5%B9%B6%E5%8F%91%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <id>http://xu1009.github.io/2017/09/18/java并发常见问题/</id>
    <published>2017-09-18T06:09:18.000Z</published>
    <updated>2018-08-27T11:30:41.336Z</updated>
    
    <content type="html"><![CDATA[<h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><blockquote><p>volatile 就是为了保证可见性和有序性，并不能保证原子性，多用于一个写线程，多个读线程的情况。</p></blockquote><ul><li>将当前处理器缓存行的数据会写回到系统内存。</li><li>这个写回内存的操作会引起在其他CPU里缓存了该内存地址的数据无效，强制其它处理器重新从主存中加载。<h2 id="synchronize"><a href="#synchronize" class="headerlink" title="synchronize"></a>synchronize</h2><blockquote><p>同步关键字，jdk内部机制，1.6优化了很多，可重入锁。</p></blockquote></li></ul><p>加锁对象</p><ul><li>对于同步方法，锁是当前实例对象。</li><li>对于静态同步方法，锁是当前对象的Class对象。</li><li>对于同步方法块，锁是Synchonized括号里配置的对象。</li></ul><p>同步机制</p><p>JVM基于进入和退出Monitor来实现方法和代码块同步，每个对象都对应一个monitor，当monitor被持有后，他就被锁定，其它线程执行monitorenter指令时，就会被阻塞。</p><p>锁分类和升级</p><p>1.6中为了减少获得锁和释放锁所带来的性能消耗，引入了偏向锁和轻量级锁，这样锁的状态就有四种了，无锁状态，偏向锁，轻量级锁，重量级锁，而且锁只能升级不能降级。</p><blockquote><p>偏向锁，当一个线程访问同步块并获取到锁时，会在对象头和栈帧中的锁记录里存储锁偏向的线程ID，以后该线程进入和退出同步块时不需要花费CAS操作来加锁解锁，，而只需简单的测试一下对象头的Mark Word里是否存储着指向当前线程的偏向锁，如果测试成功，表示线程已经获得了锁，如果测试失败，则需要再测试下Mark Word中偏向锁的标识是否设置成1（表示当前是偏向锁），如果没有设置，则使用CAS竞争锁，如果设置了，则尝试使用CAS将对象头的偏向锁指向当前线程。<br>偏向锁的撤销：偏向锁使用了一种等到竞争出现才释放锁的机制，所以当其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁。偏向锁的撤销，需要等待全局安全点（在这个时间点上没有字节码正在执行），它会首先暂停拥有偏向锁的线程，然后检查持有偏向锁的线程是否活着，如果线程不处于活动状态，则将对象头设置成无锁状态，如果线程仍然活着，拥有偏向锁的栈会被执行，遍历偏向对象的锁记录，栈中的锁记录和对象头的Mark Word要么重新偏向于其他线程，要么恢复到无锁或者标记对象不适合作为偏向锁，最后唤醒暂停的线程。下图中的线程1演示了偏向锁初始化的流程，线程2演示了偏向锁撤销的流程。<br><img src="http://ifeve.com/wp-content/uploads/2012/10/%E5%81%8F%E5%90%91%E9%94%81%E7%9A%84%E6%92%A4%E9%94%80.png" alt=""></p></blockquote><ul><li><p>轻量级锁<br>轻量级锁加锁：线程在执行同步块之前，JVM会先在当前线程的栈桢中创建用于存储锁记录的空间，并将对象头中的Mark Word复制到锁记录中，官方称为Displaced Mark Word。然后线程尝试使用CAS将对象头中的Mark Word替换为指向锁记录的指针。如果成功，当前线程获得锁，如果失败，表示其他线程竞争锁，当前线程便尝试使用自旋来获取锁。</p><p>  轻量级锁解锁：轻量级解锁时，会使用原子的CAS操作来将Displaced Mark Word替换回到对象头，如果成功，则表示没有竞争发生。如果失败，表示当前锁存在竞争，锁就会膨胀成重量级锁。下图是两个线程同时争夺锁，导致锁膨胀的流程图。<br><img src="http://ifeve.com/wp-content/uploads/2012/10/%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81.png" alt=""></p></li></ul><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>线程池好处</p><ul><li>降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗</li><li>提高响应速度。当任务到达时，任务可以不需要的等到线程创建就能立即执行</li><li>提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控</li></ul><p>线程池的流程</p><p><img src="http://ifeve.com/wp-content/uploads/2012/12/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%B8%BB%E8%A6%81%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.jpg" alt=""></p><ol><li>首先判断基本线程池满了没，如果满了，就进入下一个流程，没满就创建新线程执行任务。</li><li>判断队列是否满了，满了进入下一个流程，没满就将任务放入阻塞队列。</li><li>判断最大线程池满了没，满了就执行饱和策略，没满就创建新线程执行任务。</li></ol><p>线程池就是和阻塞队列搭配使用，限制了线程的数量，将任务放到阻塞队列中，然后线程池中的线程从阻塞队列中取出任务执行。</p><h3 id="concurrentHashMap"><a href="#concurrentHashMap" class="headerlink" title="concurrentHashMap"></a>concurrentHashMap</h3><blockquote><p>hash 算法是一种将任意内容输入转换成相同长度输出的加密方式，其输出被称为哈希值。</p></blockquote><blockquote><p>哈希表 根据设定的hash函数和处理冲突方法将一组关键字映射到一个有限的地址区间上，这个哈希值作为记录在表中的存储位置，这种表称为hash表或者散列，所得存储位置称为哈希地址或者散列地址。</p></blockquote><ul><li>hashMap不是线程安全的，主要是看内部源码实现，这个内部是数组+链表的拉链式存储结构，数组中的位置通过散列来确定，还有就是超过一定容量要进行再散列。</li><li>hashtable 效率很低下，因为他使用的是synchronize来保证线程安全的，在线程竞争激烈的情况下效率非常低下，当一个线程添加元素时，其它线程既不能添加也不能读取元素，所以效率非常低下。</li><li>concurrentHashMap，实现分段式加锁，数据进行分段，每一段数据配一把锁，这样就不会造成所有线程竞争一把锁，</li></ul><p>segment数组，数组内容是类似于hashmap的存储结构，这里segment实现了锁，数组长度就相当于将数据分段了。</p><p>concurrencyLevel决定segment数组长度，segment数组长度必须是2的N次幂，为了方便通过按位与的算法确定元素在数组中的位置。concurrencyLevel最大为65535，这也就说明，segment数组的长度最大为65536。</p><p>对于segment就和hashmap差不多了，有负载因子，初始化concurrentHashMap的时候，会有一个初始化容量，知道segment的长度就可以确定每个segment中的hashentry的长度，这个也是2的N次幂，这个容量有个阈值，就是理论长度和负载因子成绩，超过这个就会进行再散列。</p><p>concurrentHashMap的再散列，极大避免了散列冲突。</p><p>get操作不需要加锁，get操作中要使用的共享变量都定义成volatile，保证每次读取到的都是最新的值，写操作是单线程的。</p><p>put操作共享变量时必须加锁，put的时候先判断是否需要对segment里的hashentry数组进行扩容，然后再插入数据到数组中。</p><p>concurrentHashMap的扩容是对单个segment进行扩容的。</p><h3 id="原子操作"><a href="#原子操作" class="headerlink" title="原子操作"></a>原子操作</h3><p>32位IA-32处理器使用基于对缓存加锁或总线加锁的方式来实现多处理器之间的原子操作。</p><h4 id="Java中的原子操作"><a href="#Java中的原子操作" class="headerlink" title="Java中的原子操作"></a>Java中的原子操作</h4><blockquote><p>java中可以通过锁和循环CAS的方式来实现原子操作。</p></blockquote><p>自旋CAS就是不断循环直进行CAS操作直到成功为止。</p><p>CAS的问题</p><ul><li>ABA问题，因为CAS需要在操作值的时候检查下值有没有发生变化，如果没有发生变化则更新，但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时会发现它的值没有发生变化，但是实际上却变化了。ABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加一，那么A－B－A 就会变成1A-2B－3A。atmoic包里提供了一个类AtomicStampedReference来解决ABA问题，这个类的cas会检查引用和标志是否都相等。</li><li>循环时间长开销大，主要是如果自旋cas长时间不成功，那么就会给cpu带来非常大的开销。</li><li>只能保证一个共享变量的原子操作，从Java1.5开始JDK提供了AtomicReference类来保证引用对象之间的原子性，你可以把多个变量放在一个对象里来进行CAS操作。</li></ul><h3 id="ConcurrentLinkedQueue非阻塞队列线程安全"><a href="#ConcurrentLinkedQueue非阻塞队列线程安全" class="headerlink" title="ConcurrentLinkedQueue非阻塞队列线程安全"></a>ConcurrentLinkedQueue非阻塞队列线程安全</h3><blockquote><p>基于链节点的无界线程安全队列，FIFO。采用非阻塞的方式实现了这个线程安全队列。</p></blockquote><p>head节点和tail节点，如果tail节点的next节点为空，那么tail节点不变，入队节点设置成tail节点的next节点，如果tail节点next非空，那么入队节点就紧跟着，然后tail节点设置成入队节点。</p><ul><li>入队过程<br>入队过程主要是干了两件事，一个是确定尾节点，另一个是使用CAS算法将入队节点设置成尾节点的next，不成功就会不断重试，循环CAS。</li></ul><p>尾节点不是设置成入队节点，为了减少cas循环次数，每次都更新tail节点就会在每次入队节点时都会使用cas去更新tail，这样会降低效率，所以设置了hops来控制tail和尾节点之间的距离。<br><img src="http://ifeve.com/wp-content/uploads/2013/01/ConcurrentLinekedQueue%E9%98%9F%E5%88%97%E5%85%A5%E9%98%9F%E7%BB%93%E6%9E%84%E5%8F%98%E5%8C%96%E5%9B%BE.jpg" alt=""></p><ul><li>出队过程<br><img src="http://ifeve.com/wp-content/uploads/2013/01/%E5%87%BA%E9%98%9F%E5%88%97.jpg" alt=""></li></ul><p>出队更新的是head节点，但不是每次出队都会更新head节点，也和tail一样使用hops来控制的，提高出队效率。</p><h3 id="线程安全阻塞队列"><a href="#线程安全阻塞队列" class="headerlink" title="线程安全阻塞队列"></a>线程安全阻塞队列</h3><p>阻塞队列就是加了两个附加操作，队列满时加入任务就会阻塞，队列空时取元素会阻塞。</p><ul><li>ArrayBlockingQueue 数组实现的有界阻塞队列，FIFO</li><li>LinkedBlockingQueue 有界，FIFO</li><li>PriorityBlockingQueue 无界，</li><li>DelayQueue 支持延时获取元素的无界阻塞队列，应用场景通常是缓存和定时任务。</li><li>LinkedBlockingDeque，双向阻塞队列</li></ul><h3 id="Fork-Join框架"><a href="#Fork-Join框架" class="headerlink" title="Fork/Join框架"></a>Fork/Join框架</h3><blockquote><p>Fork/Join框架就是将一个大任务分割成若干个小任务，最终汇总每个小任务结果后得到大任务结果的框架。</p></blockquote><ul><li>工作窃取算法（work-stealing）<br>某个线程从其他队列里窃取任务来执行。</li></ul><p>比如一个大任务，分割成若干个子任务，为了减少线程间的竞争，把这些子任务分配到不同队列中，然后每个队列创建一个线程来处理队列中的任务，当处理完自己的任务时，这个线程可以去其它队列中窃取任务执行，而且为了减少线程的竞争，这些队列通常是双端队列，窃取任务的线程和正常的线程分别从两端取任务执行。</p><p>Fork/Join框架步骤</p><ol><li>fork类把大任务分割成小任务</li><li>执行任务合并结果，分割的子任务放到双端队列里，启动几个线程去到队列里面取任务执行。子任务执行完的结果都统一放到一个队列里面，然后启动一个线程去合并这些结果。<br>下面是简单的例子<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Forkjoin</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> start;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> end;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> THREAD = <span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Forkjoin</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> canCompute = (end - start) &lt;= THREAD;</span><br><span class="line">        <span class="keyword">if</span> (canCompute)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= end; i++)</span><br><span class="line">                sum += i;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> middle = (end + start) / <span class="number">2</span>;</span><br><span class="line">            Forkjoin task1 = <span class="keyword">new</span> Forkjoin(start, middle);</span><br><span class="line">            Forkjoin task2 = <span class="keyword">new</span> Forkjoin(middle + <span class="number">1</span>, end);</span><br><span class="line">            task1.fork();</span><br><span class="line">            task2.fork();</span><br><span class="line">            <span class="keyword">int</span> res1 = (<span class="keyword">int</span>) task1.join();</span><br><span class="line">            <span class="keyword">int</span> res2 = (<span class="keyword">int</span>) task2.join();</span><br><span class="line">            sum = res1 + res2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        ForkJoinPool forkJoinPool = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line">        Forkjoin forkjoin = <span class="keyword">new</span> Forkjoin(<span class="number">1</span>,<span class="number">1000</span>);</span><br><span class="line">        Future future = forkJoinPool.submit(forkjoin);</span><br><span class="line">        System.out.println(future.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>调用fork方法时，程序调用pushTask方法异步的执行这个任务，然后立即返回结果，先将任务存到queue里，然后再唤醒或者创建一个工作线程执行这个任务。</p><p>join的话就是阻塞当前线程并等待获取结果。</p><h3 id="Copy-Ob-Write"><a href="#Copy-Ob-Write" class="headerlink" title="Copy-Ob-Write"></a>Copy-Ob-Write</h3><blockquote><p>写时复制的容器，当我们往一个容器添加元素的时候，不直接往当前元素添加，而是先将当前容器进行copy，然后将元素添加到新的copy里面，最后将原来的容器的引用指向新的容器。读写分离，读和写不同的容器，好处是进行并发读不需要加锁。</p></blockquote><p>CopyOnWrite并发容器用于读多写少的并发场景。</p><blockquote><p>谈一下并发为什么会出问题呢，首先说一下原子操作，并发情况下，调度算法会分给每个操作一个时间段，这就会导致不是原子操作的情况下，操作会被中断然后被另一个线程占用，这就会出现问题，所以要保证原子操作，一个是使用锁或者同步关键字，最后就是concurrent并发包中的原子类，CAS操作，然后就是由于Java的内存模型，各线程有自己的工作内存，然后还有一个主内存，线程直接交互的是自己的工作内存，这就导致在并发情况下的缓存一致性问题，解决这个问题有两种办法，一种就是加锁，另一个就是缓存一致性协议，比如volatile修饰的变量，每次这个变量被写入的时候，会被立即刷新到主内存，其它线程对这个变量的缓存都会失效，然后会从主内存中从新读取，这样是很轻量级的同步，这里就引入了happens before原则，volatile就满足Java先天的满足这个原则的，这个说明的是，前面操作的结果对后一个操作的结果可见，这个只是说明的前一个操作结果对后一个的影响，没有说明时间上发生的顺序，时间上发生的前后并不一定满足这个原则，所以加上volatile就会保证这个可见性。还有一个问题就是因为编译器和系统环境的优化问题，会存在几个重排序，一个是编译器级别的重排序，一个是系统给的重排序，这个在单线程中不会导致什么问题，但是在并发情况下还会出现问题，解决这个问题目前最常见的是volatile关键字，这个关键字底层的实现就是编译器加了一个内存屏障，这个内存屏障的作用就是保证该条操作的前后的顺序不会改变，但是不保证前面或者后面的顺序，就是他会保证程序顺序情况下，在他前面发生的还是在他前面发生，后面的也是，但是不保证前后的单独部分的重排序问题。所以其实volatile解决了两个问题，一个是缓存一致性问题，一个是重排序的问题，其中缓存一致性问题只是保证了当前变量的写入会被立即刷新到主内存，而且其它未发生的读取线程的对于该变量的缓存会失效，重新读取。但是你要是想看到这个结果，实际上，就必须要求那个变量的写入在读的操作之前。那些文章中说的happens before原则不一定是前后发生的，这个是因为重排序问题导致的。说的只是同一个线程内部肯定满足happens before原子，但是又因为重排序的问题才会说这个的，其实和那个volatile没关系。并发最后就是让在并发情况下的发生的结果和顺序情况下的一样。这样就显得很明了了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;volatile&quot;&gt;&lt;a href=&quot;#volatile&quot; class=&quot;headerlink&quot; title=&quot;volatile&quot;&gt;&lt;/a&gt;volatile&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;volatile 就是为了保证可见性和有序性，并不能保证原子性，多
      
    
    </summary>
    
    
      <category term="并发 Java" scheme="http://xu1009.github.io/tags/%E5%B9%B6%E5%8F%91-Java/"/>
    
  </entry>
  
  <entry>
    <title>java并发基础</title>
    <link href="http://xu1009.github.io/2017/09/18/java%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/"/>
    <id>http://xu1009.github.io/2017/09/18/java并发基础/</id>
    <published>2017-09-18T06:07:52.000Z</published>
    <updated>2018-08-27T11:30:41.335Z</updated>
    
    <content type="html"><![CDATA[<h3 id="线程控制逃逸规则"><a href="#线程控制逃逸规则" class="headerlink" title="线程控制逃逸规则"></a>线程控制逃逸规则</h3><p>如果一个资源的创建，使用，销毁都在同一个线程内完成，且永远不会脱离该线程的控制，则该资源的使用就是线程安全的。</p><p>竞态条件：当多个线程同时访问同一个资源，并且其中改的一个或者多个线程对这个资源进行了写操作，才会产生静态条件，多个线程同时读取一个资源不会产生竞态条件。</p><h3 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h3><p>线程独享栈，线程共享堆<br><img src="http://tutorials.jenkov.com/images/java-concurrency/java-memory-model-1.png" alt=""></p><p>下面是栈和堆的存储类型</p><p><img src="http://tutorials.jenkov.com/images/java-concurrency/java-memory-model-2.png" alt=""></p><p>Java内存模型和硬件内存架构之间的关系</p><p>通常情况下，当一个CPU需要读取主存时，它会将主存的部分读到CPU缓存中。它甚至可能将缓存中的部分内容读到它的内部寄存器中，然后在寄存器中执行操作。当CPU需要将结果写回到主存中去时，它会将内部寄存器的值刷新到缓存中，然后在某个时间点将值刷新回主存。</p><p>Java内存模型与硬件内存架构之间存在差异。硬件内存架构没有区分线程栈和堆。对于硬件，所有的线程栈和堆都分布在主内中。部分线程栈和堆可能有时候会出现在CPU缓存中和CPU内部的寄存器中。如下图所示：<br><img src="http://tutorials.jenkov.com/images/java-concurrency/java-memory-model-5.png" alt=""></p><p>这样的内存模型会带来一些问题</p><ul><li>线程对共享变量修改的可见性（volatile）</li><li>读写和检查共享变量时出现竞争条件（同步）<h3 id="同步关键字（synchronize）"><a href="#同步关键字（synchronize）" class="headerlink" title="同步关键字（synchronize）"></a>同步关键字（synchronize）</h3></li></ul><p>同步代码块保证一次只有一个线程可以进入，同时保证变量的修改会被立即刷新到主存，读取也是从主存中先刷新到缓存，就是保证了可见性。</p><p>其实就是对于一些非原子操作保证其线程安全</p><p>同步块包括四种：</p><ol><li>实例方法</li><li>静态方法</li><li>实例方法中的同步块</li><li>静态方法中的同步块</li></ol><p>实例方法同步<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.count += value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Java实例方法同步是同步在拥有该方法的对象上。这样，每个实例其方法同步都同步在不同的对象上，即该方法所属的实例。只有一个线程能够在实例方法同步块中运行。如果有多个实例存在，那么一个线程一次可以在一个实例同步块中执行操作。一个实例一个线程。</p><p>静态方法同步</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"> count += value;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>静态方法的同步是指同步在该方法所在的类对象上。因为在Java虚拟机中一个类只能对应一个类对象，所以同时只允许一个线程执行同一个类中的静态同步方法。</p><p>实例方法中的同步块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</span><br><span class="line">       <span class="keyword">this</span>.count += value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>注意Java同步块构造器用括号将对象括起来。在上例中，使用了“this”，即为调用add方法的实例本身。在同步构造器中用括号括起来的对象叫做监视器对象。上述代码使用监视器对象同步，同步实例方法使用调用方法本身的实例作为监视器对象。</p><p>静态方法中的同步块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">log1</span><span class="params">(String msg1, String msg2)</span></span>&#123;</span><br><span class="line">       log.writeln(msg1);</span><br><span class="line">       log.writeln(msg2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">log2</span><span class="params">(String msg1, String msg2)</span></span>&#123;</span><br><span class="line">       <span class="keyword">synchronized</span>(MyClass.class)&#123;</span><br><span class="line">          log.writeln(msg1);</span><br><span class="line">          log.writeln(msg2);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>如果第二个同步块不是同步在MyClass.class这个对象上。那么这两个方法可以同时被线程访问。</p><p>同步的对象不一样，一个同步的是类，一个同步的是类对象的实例，这个很关键。</p><h4 id="线程间的通信"><a href="#线程间的通信" class="headerlink" title="线程间的通信"></a>线程间的通信</h4><ul><li>通过共享对象通信<br>最简单的方式，线程共享一个对象，一个线程修改对象状态，其它线程读取对象状态，</li><li>忙等待<br>准备处理数据的线程B正在等待数据变为可用。换句话说，它在等待线程A的一个信号，这个信号使hasDataToProcess()返回true。线程B运行在一个循环里，以等待这个信号：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> MySignal sharedSignal = ...</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!sharedSignal.hasDataToProcess())&#123;</span><br><span class="line">  <span class="comment">//do nothing... busy waiting</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>wait()，notify()，notifyAll()<br>忙等待没有对运行等待线程的CPU进行有效的利用，除非平均等待时间非常短。否则，让等待线程进入睡眠或者非运行状态更为明智，直到它接收到它等待的信号。<br>Java有一个内建的等待机制来允许线程在等待信号的时候变为非运行状态。java.lang.Object 类定义了三个方法，wait()、notify()和notifyAll()来实现这个等待机制。</li></ul><p>这个就是线程调用wait方法时进入等待状态，并释放了监视器锁，让其它线程去竞争锁，如果有线程调用了notify方法，则随机一个线程会被唤醒，当然唤醒之后还要去竞争锁，只有竞争到了锁才能推出wait方法。notifyAll是唤醒所有当前对象的等待状态的线程</p><ul><li>丢失的信号<br>notify()和notifyAll()方法不会保存调用它们的方法，因为当这两个方法被调用时，有可能没有线程处于等待状态。通知信号过后便丢弃了。因此，如果一个线程先于被通知线程调用wait()前调用了notify()，等待的线程将错过这个信号。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWaitNotify2</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  MonitorObject myMonitorObject = <span class="keyword">new</span> MonitorObject();</span><br><span class="line">  <span class="keyword">boolean</span> wasSignalled = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWait</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(myMonitorObject)&#123;</span><br><span class="line">      <span class="keyword">if</span>(!wasSignalled)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">          myMonitorObject.wait();</span><br><span class="line">         &#125; <span class="keyword">catch</span>(InterruptedException e)&#123;...&#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//clear signal and continue running.</span></span><br><span class="line">      wasSignalled = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doNotify</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(myMonitorObject)&#123;</span><br><span class="line">      wasSignalled = <span class="keyword">true</span>;</span><br><span class="line">      myMonitorObject.notify();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>留意doNotify()方法在调用notify()前把wasSignalled变量设为true。同时，留意doWait()方法在调用wait()前会检查wasSignalled变量。事实上，如果没有信号在前一次doWait()调用和这次doWait()调用之间的时间段里被接收到，它将只调用wait()。</p><ul><li>假唤醒<br>由于莫名其妙的原因，线程有可能在没有调用过notify()和notifyAll()的情况下醒来。这就是所谓的假唤醒（spurious wakeups）。无端端地醒过来了。</li></ul><p>如果在MyWaitNotify2的doWait()方法里发生了假唤醒，等待线程即使没有收到正确的信号，也能够执行后续的操作。这可能导致你的应用程序出现严重问题。</p><p>为了防止假唤醒，保存信号的成员变量将在一个while循环里接受检查，而不是在if表达式里。这样的一个while循环叫做自旋锁（校注：这种做法要慎重，目前的JVM实现自旋会消耗CPU，如果长时间不调用doNotify方法，doWait方法会一直自旋，CPU会消耗太大）。被唤醒的线程会自旋直到自旋锁(while循环)里的条件变为false。以下MyWaitNotify2的修改版本展示了这点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWaitNotify3</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  MonitorObject myMonitorObject = <span class="keyword">new</span> MonitorObject();</span><br><span class="line">  <span class="keyword">boolean</span> wasSignalled = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWait</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(myMonitorObject)&#123;</span><br><span class="line">      <span class="keyword">while</span>(!wasSignalled)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">          myMonitorObject.wait();</span><br><span class="line">         &#125; <span class="keyword">catch</span>(InterruptedException e)&#123;...&#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//clear signal and continue running.</span></span><br><span class="line">      wasSignalled = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doNotify</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(myMonitorObject)&#123;</span><br><span class="line">      wasSignalled = <span class="keyword">true</span>;</span><br><span class="line">      myMonitorObject.notify();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>多个线程等待相同信号<br>如果你有多个线程在等待，被notifyAll()唤醒，但只有一个被允许继续执行，使用while循环也是个好方法。每次只有一个线程可以获得监视器对象锁，意味着只有一个线程可以退出wait()调用并清除wasSignalled标志（设为false）。一旦这个线程退出doWait()的同步块，其他线程退出wait()调用，并在while循环里检查wasSignalled变量值。但是，这个标志已经被第一个唤醒的线程清除了，所以其余醒来的线程将回到等待状态，直到下次信号到来。</li></ul><h4 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h4><p>和线程绑定，每个线程都有自己的私有ThreadLocal<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadTst</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">       <span class="keyword">private</span> ThreadLocal&lt;Integer&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;Integer&gt;();</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            threadLocal.set((<span class="keyword">int</span>) (Math.random() * <span class="number">100</span>D));</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + threadLocal.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        MyThread tst = <span class="keyword">new</span> MyThread();</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(tst,<span class="string">"tt"</span>);</span><br><span class="line">        thread1.start();</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(tst,<span class="string">"rr"</span>);</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread1.join();</span><br><span class="line">        thread2.join();</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="死锁及避免死锁"><a href="#死锁及避免死锁" class="headerlink" title="死锁及避免死锁"></a>死锁及避免死锁</h4><pre><code>循环等待条件会导致死锁，就是A,B两个方法，线程1获得A的锁，然后尝试获得B的锁，线程2获得B的锁然后尝试获得A的锁，这就会形成循环等待，最后形成死锁。</code></pre><p>避免死锁的方法</p><ul><li>加锁顺序<br>按照顺序加锁，按照顺序加锁是一种有效的死锁预防机制。但是，这种方式需要你事先知道所有可能会用到的锁(译者注：并对这些锁做适当的排序)，但总有些时候是无法预知的。每次线程都同时竞争同一个锁。</li><li><p>加锁时限<br>另外一个可以避免死锁的方法是在尝试获取锁的时候加一个超时时间，这也就意味着在尝试获取锁的过程中若超过了这个时限该线程则放弃对该锁请求。若一个线程没有在给定的时限内成功获得所有需要的锁，则会进行回退并释放所有已经获得的锁，然后等待一段随机的时间再重试。这段随机的等待时间让其它线程有机会尝试获取相同的这些锁，并且让该应用在没有获得锁的时候可以继续运行。线程比较多的情况下可能等待时间是一样的。</p></li><li><p>死锁检测<br>  每当一个线程获得了锁，会在线程和锁相关的数据结构中（map、graph等等）将其记下。除此之外，每当有线程请求锁，也需要记录在这个数据结构中。</p><p>  当一个线程请求锁失败时，这个线程可以遍历锁的关系图看看是否有死锁发生。例如，线程A请求锁7，但是锁7这个时候被线程B持有，这时线程A就可以检查一下线程B是否已经请求了线程A当前所持有的锁。如果线程B确实有这样的请求，那么就是发生了死锁（线程A拥有锁1，请求锁7；线程B拥有锁7，请求锁1）。<br>  检测出死锁就进行回退，释放所有锁。</p></li></ul><h4 id="饥饿与公平"><a href="#饥饿与公平" class="headerlink" title="饥饿与公平"></a>饥饿与公平</h4><p>饥饿原因</p><ul><li>高优先级吞噬所有低优先级线程的CPU时间</li><li>线程被永久堵塞在一个等待进入同步块的状态。</li><li>线程在等待一个本身也处于永久等待完成的对象(比如调用这个对象的wait方法)。<h4 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h4>阻塞队列与普通队列的区别在于，当队列是空的时，从队列中获取元素的操作将会被阻塞，或者当队列是满时，往队列里添加元素的操作会被阻塞。</li></ul><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><p>保持一定线程数量，线程池内线程一直在运行，避免线程频繁建立和销毁，内部实现是阻塞队列，空闲线程从队列中取出任务执行，</p><h4 id="CAS-乐观锁-非阻塞"><a href="#CAS-乐观锁-非阻塞" class="headerlink" title="CAS 乐观锁 非阻塞"></a>CAS 乐观锁 非阻塞</h4><p>CAS（Compare and swap）比较和替换是设计并发算法时用到的一种技术。简单来说，比较和替换是使用一个期望值和一个变量的当前值进行比较，如果当前变量的值与我们期望的值相等，就使用一个新值替换当前变量的值。</p><p>volatile多用于单个线程写，多线程读的情况。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;线程控制逃逸规则&quot;&gt;&lt;a href=&quot;#线程控制逃逸规则&quot; class=&quot;headerlink&quot; title=&quot;线程控制逃逸规则&quot;&gt;&lt;/a&gt;线程控制逃逸规则&lt;/h3&gt;&lt;p&gt;如果一个资源的创建，使用，销毁都在同一个线程内完成，且永远不会脱离该线程的控制，则该资源的使
      
    
    </summary>
    
    
      <category term="并发 Java" scheme="http://xu1009.github.io/tags/%E5%B9%B6%E5%8F%91-Java/"/>
    
  </entry>
  
  <entry>
    <title>head first design pattern</title>
    <link href="http://xu1009.github.io/2017/09/05/head-first-design-pattern/"/>
    <id>http://xu1009.github.io/2017/09/05/head-first-design-pattern/</id>
    <published>2017-09-05T13:45:31.000Z</published>
    <updated>2018-08-27T11:30:41.332Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>　设计模式就是让代码写的规范，什么是规范呢，就是松耦合，高复用，易维护，易拓展，虽然现在很少在平时的代码中考虑这些，不过设计模式并不是一种强制，就如本书作者所说如果发现一种更为简单的方式，就没必要生搬硬套的使用设计模式，设计模式的初衷是让程序猿从复杂的工作中解脱，而不是进入另一个怪圈。</p></blockquote><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><blockquote><p>策略模式定义了算法族，分别封装起来，让他们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。</p></blockquote><p>正式的定义往往都那么抽象，策略模式就是封装变化，</p><p>策略模式</p><p>工厂模式</p><p>抽象工厂</p><p>装饰器</p><p>适配器</p><p>外观</p><p>观察者模式</p><p>单例模式</p><p>命令模式</p><p>代理模式</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;　设计模式就是让代码写的规范，什么是规范呢，就是松耦合，高复用，易维护，易拓展，虽然现在很少在平时的代码中考虑这些，不过设计模式并不是一种强制，就如本书作者所说如果发现一种更为简单的方式，就没必要生搬硬套的使用设计模式，设计模式的初衷是让程序猿从复
      
    
    </summary>
    
    
      <category term="design pattern" scheme="http://xu1009.github.io/tags/design-pattern/"/>
    
  </entry>
  
  <entry>
    <title>记录一下大神给推荐的书籍哈</title>
    <link href="http://xu1009.github.io/2017/09/04/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E5%A4%A7%E7%A5%9E%E7%BB%99%E6%8E%A8%E8%8D%90%E7%9A%84%E4%B9%A6%E7%B1%8D%E5%93%88/"/>
    <id>http://xu1009.github.io/2017/09/04/记录一下大神给推荐的书籍哈/</id>
    <published>2017-09-04T14:23:51.000Z</published>
    <updated>2018-08-27T11:30:41.352Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h1><h3 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h3><ul><li>高性能MySQL第三版</li><li>MySQL性能调优与架构设计</li></ul><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><ul><li><a href="http://hedengcheng.com/" target="_blank" rel="noopener">http://hedengcheng.com/</a></li><li><a href="http://mysql.taobao.org/monthly/2016/01/01/" target="_blank" rel="noopener">http://mysql.taobao.org/monthly/2016/01/01/</a></li></ul><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h3 id="书籍-1"><a href="#书籍-1" class="headerlink" title="书籍"></a>书籍</h3><ul><li>Redis设计与实现</li><li>Redis in Action</li></ul><h3 id="Redis源码注释版"><a href="#Redis源码注释版" class="headerlink" title="Redis源码注释版"></a>Redis源码注释版</h3><ul><li><a href="https://github.com/huangz1990/redis-3.0-annotated" target="_blank" rel="noopener">https://github.com/huangz1990/redis-3.0-annotated</a></li></ul><h3 id="Redis文档"><a href="#Redis文档" class="headerlink" title="Redis文档"></a>Redis文档</h3><ul><li><a href="http://doc.redisfans.com/" target="_blank" rel="noopener">http://doc.redisfans.com/</a></li></ul><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h3 id="书籍-2"><a href="#书籍-2" class="headerlink" title="书籍"></a>书籍</h3><ul><li>阿里巴巴Java开发手册</li><li>Java特种兵</li><li>Effective Java</li></ul><h1 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h1><h3 id="书籍-3"><a href="#书籍-3" class="headerlink" title="书籍"></a>书籍</h3><ul><li>从PAXOS到ZOOKEEPER分布式一致性原理与实践</li></ul><h3 id="博客-1"><a href="#博客-1" class="headerlink" title="博客"></a>博客</h3><ul><li><a href="http://nileader.blog.51cto.com/1381108/d-16" target="_blank" rel="noopener">http://nileader.blog.51cto.com/1381108/d-16</a></li><li><a href="http://www.cnblogs.com/sunddenly/p/4138580.html" target="_blank" rel="noopener">http://www.cnblogs.com/sunddenly/p/4138580.html</a></li></ul><h1 id="分布式原理"><a href="#分布式原理" class="headerlink" title="分布式原理"></a>分布式原理</h1><h3 id="书籍-4"><a href="#书籍-4" class="headerlink" title="书籍"></a>书籍</h3><ul><li>分布式系统原理介绍（百度 刘杰 文档）</li><li>大型分布式网站架构设计与实践</li></ul><h1 id="Java并发"><a href="#Java并发" class="headerlink" title="Java并发"></a>Java并发</h1><h3 id="书籍-5"><a href="#书籍-5" class="headerlink" title="书籍"></a>书籍</h3><ul><li>Java并发编程实战</li><li>Java并发编程的艺术</li></ul><h3 id="博客-2"><a href="#博客-2" class="headerlink" title="博客"></a>博客</h3><ul><li><a href="http://ifeve.com/" target="_blank" rel="noopener">http://ifeve.com/</a></li></ul><h1 id="Java虚拟机"><a href="#Java虚拟机" class="headerlink" title="Java虚拟机"></a>Java虚拟机</h1><h3 id="书籍-6"><a href="#书籍-6" class="headerlink" title="书籍"></a>书籍</h3><ul><li>深入理解Java虚拟机：JVM高级特性与最佳实践</li></ul><h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><ul><li><a href="http://www.mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">http://www.mybatis.org/mybatis-3/zh/index.html</a></li></ul><h3 id="博客-3"><a href="#博客-3" class="headerlink" title="博客"></a>博客</h3><ul><li><a href="http://blog.csdn.net/column/details/mybatis-principle.html" target="_blank" rel="noopener">http://blog.csdn.net/column/details/mybatis-principle.html</a></li></ul><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h3 id="书籍-7"><a href="#书籍-7" class="headerlink" title="书籍"></a>书籍</h3><ul><li>精通Spring 4.x -企业应用开发实战</li></ul><h3 id="文档-1"><a href="#文档-1" class="headerlink" title="文档"></a>文档</h3><ul><li><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/</a></li></ul><h3 id="博客-4"><a href="#博客-4" class="headerlink" title="博客"></a>博客</h3><ul><li><a href="http://jinnianshilongnian.iteye.com/" target="_blank" rel="noopener">http://jinnianshilongnian.iteye.com/</a></li></ul><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h3 id="书籍-8"><a href="#书籍-8" class="headerlink" title="书籍"></a>书籍</h3><ul><li>设计模式–可复用面向对象软件的基础</li></ul><h1 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h1><h3 id="书籍-9"><a href="#书籍-9" class="headerlink" title="书籍"></a>书籍</h3><ul><li>Netty权威指南</li></ul><h1 id="高并发"><a href="#高并发" class="headerlink" title="高并发"></a>高并发</h1><h3 id="书籍-10"><a href="#书籍-10" class="headerlink" title="书籍"></a>书籍</h3><ul><li>亿级流量网站架构核心技术</li></ul><h1 id="Java性能优化"><a href="#Java性能优化" class="headerlink" title="Java性能优化"></a>Java性能优化</h1><h3 id="书籍-11"><a href="#书籍-11" class="headerlink" title="书籍"></a>书籍</h3><ul><li>Java性能优化权威指南</li></ul><h1 id="Java-NIO"><a href="#Java-NIO" class="headerlink" title="Java NIO"></a>Java NIO</h1><h3 id="博客-5"><a href="#博客-5" class="headerlink" title="博客"></a>博客</h3><ul><li><a href="http://ifeve.com/java-nio-all/" target="_blank" rel="noopener">http://ifeve.com/java-nio-all/</a></li></ul><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h3 id="书籍-12"><a href="#书籍-12" class="headerlink" title="书籍"></a>书籍</h3><ul><li>算法导论</li><li>编程之美</li><li>剑指offer</li></ul><h3 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h3><ul><li><a href="https://leetcode.com/" target="_blank" rel="noopener">https://leetcode.com/</a></li></ul><h1 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h1><h3 id="thrift"><a href="#thrift" class="headerlink" title="thrift"></a>thrift</h3><ul><li><a href="http://blog.csdn.net/column/details/thrift.html" target="_blank" rel="noopener">http://blog.csdn.net/column/details/thrift.html</a></li></ul><h3 id="dubbo"><a href="#dubbo" class="headerlink" title="dubbo"></a>dubbo</h3><ul><li><a href="http://blog.csdn.net/u010311445/article/category/2745121" target="_blank" rel="noopener">http://blog.csdn.net/u010311445/article/category/2745121</a></li></ul><h3 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h3><ul><li><a href="http://microservices.io/patterns/index.html" target="_blank" rel="noopener">http://microservices.io/patterns/index.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MYSQL&quot;&gt;&lt;a href=&quot;#MYSQL&quot; class=&quot;headerlink&quot; title=&quot;MYSQL&quot;&gt;&lt;/a&gt;MYSQL&lt;/h1&gt;&lt;h3 id=&quot;书籍&quot;&gt;&lt;a href=&quot;#书籍&quot; class=&quot;headerlink&quot; title=&quot;书籍&quot;&gt;&lt;/a&gt;书
      
    
    </summary>
    
    
      <category term="程序猿的书" scheme="http://xu1009.github.io/tags/%E7%A8%8B%E5%BA%8F%E7%8C%BF%E7%9A%84%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>Spring随笔记录</title>
    <link href="http://xu1009.github.io/2017/09/02/Spring%E9%9A%8F%E7%AC%94%E8%AE%B0%E5%BD%95/"/>
    <id>http://xu1009.github.io/2017/09/02/Spring随笔记录/</id>
    <published>2017-09-02T05:27:56.000Z</published>
    <updated>2018-08-27T11:30:41.330Z</updated>
    
    <content type="html"><![CDATA[<h4 id="spring-FctoryBean-and-InitializingBean"><a href="#spring-FctoryBean-and-InitializingBean" class="headerlink" title="spring FctoryBean and InitializingBean"></a>spring FctoryBean and InitializingBean</h4><blockquote><p>Spring中有两种类型的Bean，一种是普通Bean，另一种是工厂Bean，即FactoryBean，这两种Bean都被容器管理，但工厂Bean跟普通Bean不同，其返回的对象不是指定类的一个实例，其返回的是该FactoryBean的getObject方法所返回的对象。</p></blockquote><p> FactoryBean接口有3个方法：</p><p>Object getObject():返回本工厂创建的对象实例。此实例也许是共享的，依赖于该工厂返回的是单例或者是原型。<br>boolean isSingleton():如果FactoryBean返回的是单例,该方法返回值为true,否则为false<br>Class getObjectType():返回对象类型。对象类型是getObject()方法返回的对象的类型，如果不知道的类型则返回null。<br>FactoryBean概念和接口在Spring框架中大量使用。Spring内置的有超过50个实现。</p><p>当使用ApplicationContext的getBean()方法获取FactoryBean实例本身而不是它所产生的bean，则要使用&amp;符号+id。比如，现有FactoryBean，它有id，在容器上调用getBean(“myBean”)将返回FactoryBean所产生的bean，调用getBean(“&amp;myBean”)将返回FactoryBean它本身的实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> spring4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by javajidi_com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"myFactoryBean"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Compent</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Compent <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Compent();<span class="comment">//这里可以进行负责的对象创建逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> Compent.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//是否是单列</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> spring4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by javajidi_com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arg)</span></span>&#123;</span><br><span class="line">        <span class="comment">//初始化spring容器，由于使用的是注解，没有xml文件，所有不再使用ClasspathXmlApplicationContext</span></span><br><span class="line">        ApplicationContext context=<span class="keyword">new</span> AnnotationConfigApplicationContext(Config.class);</span><br><span class="line">        Object o1=context.getBean(<span class="string">"myFactoryBean"</span>);</span><br><span class="line">        Object o2=context.getBean(<span class="string">"&amp;myFactoryBean"</span>);</span><br><span class="line">        System.out.println(o1.getClass());</span><br><span class="line">        System.out.println(o2.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">spring4</span>.<span class="title">Compent</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">spring4</span>.<span class="title">MyFactoryBean</span></span></span><br></pre></td></tr></table></figure><blockquote><p>InitializingBean 和前面的fatorybean一样是一个接口，该接口只有一个方法，afterPropertiesSet()，该方法在bean注册到spring容器的时候就自动执行，所以多用来做一些初始化的工作，</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sogou.nsd.factorybean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"factorybean"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryBeanTest</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>, <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"this is a factorybean"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"this method execute after bean xml file init!!!!!!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="springMVC-HttpServletRequestWrapper"><a href="#springMVC-HttpServletRequestWrapper" class="headerlink" title="springMVC HttpServletRequestWrapper"></a>springMVC HttpServletRequestWrapper</h4><blockquote><p>通常在filter中需要读取请求的参数，这个当请求是post的时候，就会存在问题，request的inputStream只能读取一次，当在controller中时就无法再次读取post的表单数据。这个时候就需要对request进行包装，每次读取的是request数据流的一个copy这样就不会存在问题，详细代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sogou.nsd.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.misc.IOUtils;</span><br><span class="line"><span class="keyword">import</span> sun.nio.ch.IOUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletInputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiReadHttpServletReuest</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ByteArrayOutputStream cachedBytes;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MultiReadHttpServletReuest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletInputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cachedBytes == <span class="keyword">null</span>)</span><br><span class="line">            cacheInputStream();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CachedServletInputStream();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BufferedReader <span class="title">getReader</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(getInputStream()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cacheInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Cache the inputstream in order to read it multiple times. For</span></span><br><span class="line"><span class="comment">         * convenience, I use apache.commons IOUtils</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        cachedBytes = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        org.apache.commons.io.IOUtils.copy(<span class="keyword">super</span>.getInputStream(), cachedBytes);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* An inputstream which reads the cached request body */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CachedServletInputStream</span> <span class="keyword">extends</span> <span class="title">ServletInputStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> ByteArrayInputStream input;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CachedServletInputStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">/* create a new input stream from the cached request body */</span></span><br><span class="line">            input = <span class="keyword">new</span> ByteArrayInputStream(cachedBytes.toByteArray());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> input.read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>然后在filter中将request进行包装就行，如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sogou.nsd.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestBodyFilter</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String filterName;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        String name = filterConfig.getInitParameter(<span class="string">"name"</span>);</span><br><span class="line">        filterName = name;</span><br><span class="line">        System.out.println(<span class="string">"filterName: "</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"><span class="comment">//        HttpServletRequest request = (HttpServletRequest) servletRequest;</span></span><br><span class="line">        MultiReadHttpServletReuest request = <span class="keyword">new</span> MultiReadHttpServletReuest((HttpServletRequest) servletRequest);</span><br><span class="line">        System.out.println(request.getMethod());</span><br><span class="line"><span class="comment">//        InputStream inputStream =  request.getInputStream();</span></span><br><span class="line"><span class="comment">//        InputStreamReader inputStreamReader = new InputStreamReader(inputStream);</span></span><br><span class="line">        BufferedReader bufferedReader = request.getReader();</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="keyword">null</span>)</span><br><span class="line">            System.out.println(line);</span><br><span class="line">            <span class="comment">// when request method is post, request stream can only read one time, so this is</span></span><br><span class="line">        <span class="comment">// make the inputStream cached, and then read the cached every time;</span></span><br><span class="line">        BufferedReader bufferedReader1 = request.getReader();  <span class="comment">// return new object</span></span><br><span class="line">        <span class="keyword">while</span> ((line = bufferedReader1.readLine()) != <span class="keyword">null</span>)</span><br><span class="line">            System.out.println(line);</span><br><span class="line"></span><br><span class="line">        String name = servletRequest.getParameter(<span class="string">"name"</span>);</span><br><span class="line">        System.out.println(<span class="string">"name: "</span> + name);</span><br><span class="line">        System.out.println(filterName);</span><br><span class="line">        filterChain.doFilter(request, servletResponse);</span><br><span class="line">       <span class="comment">// return;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="有关sping和springmvc的关系"><a href="#有关sping和springmvc的关系" class="headerlink" title="有关sping和springmvc的关系"></a>有关sping和springmvc的关系</h4><ul><li>context:annotation-config<br>隐式在spring容器中注册 注解相关的bean  4个BeanPostProcessor<br>注册这4个bean处理器主要的作用是为了你的系统能够识别相应的注解</li><li>采用mvc:default-servlet-handler /&gt;<br>在springMVC-servlet.xml中配置mvc:default-servlet-handler /&gt;后，<br>会在Spring MVC上下文中定义一个org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler，<br>它会像一个检查员，对进入DispatcherServlet的URL进行筛查，如果发现是静态资源的请求，<br>就将该请求转由Web应用服务器默认的Servlet处理，如果不是静态资源的请求，才由DispatcherServlet继续处理。</li><li>mvc:annotation-driven自动在spring容器中注册处理映射器和处理适配器</li><li>context:component-scan base-package=”com.sogou” 如果只在spring中加的话就是注册都到spring容器中使得该包及其子包下的bean定义注解工作起来 就是这些注解的作用要么是匹配要么是注册<br>为了防止多次加载多次实例化，这两个容器要分开。</li></ul><p>一般在springmvc容器中只注册和controller相关的bean，其它都在spring容器进行注册，在spring容器中注册的bean对于两个容器都是可见的，下面是两个容器中的配置。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--springmvc  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sogou.bizwork.controller"</span>  <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span> <span class="attr">type</span>=<span class="string">"annotation"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--spring--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.sogou.bizwork"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span></span></span><br><span class="line"><span class="tag"><span class="attr">type</span>=<span class="string">"annotation"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这样配置就可以避免重复注册和加载的问题。</p><ul><li>配置文件在容器中的设置，这个会有混淆，遇见过@Value注解不起作用的情况。<br>比如只在spring容器中配置资源文件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--resource bundle file--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:redis.properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>资源文件就无法在controller中以</p><blockquote><p>  @Value(“${quorumString}”)<br>    private String quorumString;</p></blockquote><p>方式使用，这样输出的只是”${quorumString}”，必须要在springmvc容器中配置资源文件。</p><p>但是这样一旦资源文件改了，就需要改两处，这样就非常麻烦。<br>所以就有下面这种方式<br>先在spring容器定义bean，然后在每个容器分别引用就行了。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"properties"</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertiesFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignoreResourceNotFound"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:redis.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--resource bundle file ref--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">properties-ref</span>=<span class="string">"properties"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--springMVC--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">properties-ref</span>=<span class="string">"properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>这样就实现了配置一处，其它进行引用，实现了复用。</p><h4 id="spring-AOP"><a href="#spring-AOP" class="headerlink" title="spring AOP"></a>spring AOP</h4><h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><blockquote><p>Java中注解就是在代码中添加信息的一种形式化的方法，然后我们可以在以后某个时刻方便的使用这些数据。</p></blockquote><p>java中是anatation接口，有四个元注解，自定义注解都是根据这个元注解来的，<br>Documented,Inherited,Target(作用范围，方法，属性，构造方法等),Retention(生命范围，源代码，class,runtime)。</p><blockquote><p>  @Target 表示该注解用于什么地方，可能的值在枚举类 ElemenetType 中，包括：<br>          ElemenetType.CONSTRUCTOR 构造器声明<br>          ElemenetType.FIELD 域声明（包括 enum 实例）<br>          ElemenetType.LOCAL_VARIABLE 局部变量声明<br>          ElemenetType.METHOD 方法声明<br>          ElemenetType.PACKAGE 包声明<br>          ElemenetType.PARAMETER 参数声明<br>          ElemenetType.TYPE 类，接口（包括注解类型）或enum声明 </p></blockquote><blockquote><p>  @Retention 表示在什么级别保存该注解信息。可选的参数值在枚举类型 RetentionPolicy 中，包括：<br>          RetentionPolicy.SOURCE 注解将被编译器丢弃<br>          RetentionPolicy.CLASS 注解在class文件中可用，但会被VM丢弃<br>          RetentionPolicy.RUNTIME VM将在运行期也保留注释，因此可以通过反射机制读取注解的信息。 </p></blockquote><blockquote><p>@Documented 将此注解包含在 javadoc 中 ，它代表着此注解会被javadoc工具提取成文档。在doc文档中的内容会因为此注解的信息内容不同而不同。相当与@see,@param 等。<br>  @Inherited 允许子类继承父类中的注解，例子中补充。</p></blockquote><p>如下自定义注解：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)  <span class="comment">// 定义注解的保留策略</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE,ElementType.FIELD,ElementType.CONSTRUCTOR,ElementType.METHOD&#125;)         <span class="comment">// 定义注解的作用目标</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CacheAble &#123;  <span class="comment">// 自定义注解</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">    <span class="function">Class&lt;Long&gt; <span class="title">gid</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中name参数也是name，类型和返回类型相同，其它也是这样</p><p>下面是使用注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="meta">@CacheAble</span>(name = <span class="string">"nihao"</span>, id = <span class="number">3</span>, gid = Long.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode next;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> val;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListNode</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样就相当于在该类中添加了一些信息，这些信息可以通过反射来获取使用。现在只是在类中加注解，也可以在成员变量上加注解，或者在方法或者参数上加注解。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;spring-FctoryBean-and-InitializingBean&quot;&gt;&lt;a href=&quot;#spring-FctoryBean-and-InitializingBean&quot; class=&quot;headerlink&quot; title=&quot;spring FctoryBea
      
    
    </summary>
    
    
      <category term="spring" scheme="http://xu1009.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC框架简述</title>
    <link href="http://xu1009.github.io/2017/08/05/SpringMVC%E6%A1%86%E6%9E%B6%E7%AE%80%E8%BF%B0/"/>
    <id>http://xu1009.github.io/2017/08/05/SpringMVC框架简述/</id>
    <published>2017-08-05T06:24:41.000Z</published>
    <updated>2018-08-27T11:30:41.309Z</updated>
    
    <content type="html"><![CDATA[<h4 id="web端的发展历程"><a href="#web端的发展历程" class="headerlink" title="web端的发展历程"></a>web端的发展历程</h4><p>如下图所示</p><p><img src="/2017/08/05/SpringMVC框架简述/web_history.jpg" alt="web发展历史"></p><ul><li>最早的CGI 公共网关接口，一种在web服务端使用的脚本技术，使用C或Perl语言编写，用于接收web用户请求并处理，最后动态产生响应给用户，但每次请求将产生一个进程，重量级。</li><li>servlet 一种JavaEE web组件技术，是一种在服务端执行的web组件，用于接收用户请求，最后动态产生响应给用户，每次请求就是新建一个线程，这个比CGI要轻量级，能够使用JavaEE 技术,比如JDBC，本质就是在Java代码里面输出HTML流，但是表现逻辑、业务逻辑、控制逻辑混杂。直接在Java代码里面输出HTML，非常不方便。</li><li>JSP 本质还是servlet，就是在HTML中动态写入Java代码.</li><li>Model1 就是jsp升级版，之前请求参数都是通过servlet api获得的，model1中可以在jsp中使用标签<a href="jsp:usebean" target="_blank" rel="noopener">jsp:usebean</a>将请求参数封装到对象中直接使用，但是jsp中加入了控制，业务，混杂。</li><li>Model2 实现了分层，但是请求参数没有封装到Javabean中，还需要手动封装，而且视图的转发严重依赖 servlet api比如请求的转发。</li><li>后来的struts2就是使用了拦截器对请求参数进行封装到bean中，也就是vo中，而且视图的控制由xml进行，视图就是jsp。</li><li>现在的web mvc模式框架，比如spring MVC框架</li></ul><blockquote><p>服务到工作者模式：前端控制器（front controller） 应用控制器（application controller）页面控制器也称为动作（page controller）上下文（context）现在springMVC框架使用的就是这个模式。</p></blockquote><p>这个模式如下图所示,这是最一般的模式：</p><p><img src="/2017/08/05/SpringMVC框架简述/web_mvc1.jpg" alt="mvc1"></p><p><img src="/2017/08/05/SpringMVC框架简述/web_mvc2.jpg" alt="mvc2"></p><ul><li><code>前端控制器</code>  负责为表现层提供统一访问节点，避免model2中出现的重复的控制逻辑，比如前端控制器统一回调相应的功能方法，比如委托应用控制器选择功能处理模块和视图，在model2中都是自己编写的。</li><li><code>应用控制器</code> 根据url选择处理器，选择返回的视图，策略设计模式</li><li><code>页面控制器</code> 功能处理代码，收集参数，封装参数到模型，转调业务对象处理模型，返回逻辑视图名给前端控制器，前端控制器委托应用控制器选择具体的视图，命令模式。</li><li><code>上下文</code> model2中为视图准备要展示的模型数据，我们直接放到了request中，有了上下文之后，我们可以将相关数据放到上下文中，从而和协议无关，也就是和servlet api无关，一般是通过threadlocal实现，线程独享的数据放到threadlocal中是一个键值对。</li></ul><blockquote><p>轻薄的web表现层，做的事情越少越好，薄薄的，不应该包含无关的代码，只负责收集并组织参数到模型对象，启动业务对象的调用，控制器只返回逻辑视图名并由响应的应用控制器来选择具体。</p></blockquote><h4 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h4><blockquote><p>SpringMVC是一个基于Java实现了web mvc设计模式的请求驱动类型的轻量级web框架，请求驱动指的是使用请求-响应模型。<br>Spring web mvc也是服务到工作者模式的实现，</p></blockquote><p>前端控制器：dispatcherServlet就是给web表现层提供统一的访问节点，委托应用控制器进行URL映射和视图选择。</p><p>SpringMVC将应用控制器拆为处理映射器（handler mapping）和视图解析器（view resolver）。</p><p>页面控制器是controller接口（这个一般是使用注解进行和URL对应，包含modelAndView request response）支持本地化解析，主题解析文件上传，还有就是数据验证，数据格式化和数据绑定机制。提供了强中的约定大于配置的契约式编程支持。</p><p>SpringMVC模式一个请求的完整过程如下图所示：</p><p><img src="/2017/08/05/SpringMVC框架简述/springmvc.jpg" alt="springmvc"></p><p>具体执行步骤如下：</p><ol><li>首先用户发送请求————&gt;前端控制器，前端控制器根据请求信息（如URL）来决定选择哪一个页面控制器进行处理并把请求委托给它，即以前的控制器的控制逻辑部分；</li><li>页面控制器接收到请求后，进行功能处理，首先需要收集和绑定请求参数到一个对象，这个对象在Spring Web MVC中叫命令对象，并进行验证，然后将命令对象委托给业务对象进行处理；处理完毕后返回一个ModelAndView（模型数据和逻辑视图名）；</li><li>前端控制器收回控制权，然后根据返回的逻辑视图名，选择相应的视图进行渲染，并把模型数据传入以便视图渲染；</li><li>前端控制器再次收回控制权，将响应返回给用户;</li></ol><p><img src="/2017/08/05/SpringMVC框架简述/springmvc1.jpg" alt="springmvc1"></p><p>其实前端控制器主要是协调的作用，spring web mvc的集中访问点，主要职责就是调度工作，本身主要用于流程控制。</p><h4 id="springMVC容器和spring之间的关系"><a href="#springMVC容器和spring之间的关系" class="headerlink" title="springMVC容器和spring之间的关系"></a>springMVC容器和spring之间的关系</h4><p>平时并没有很注意这方面的东西，在配置的时候只会</p><h4 id="rpc和restFUL-api"><a href="#rpc和restFUL-api" class="headerlink" title="rpc和restFUL api"></a>rpc和restFUL api</h4><p>HTTP是一种应用层网络协议，RPC可以采用自定义协议，也可以通过HTTP协议来传输，thrift，grpc，xml-rpc，json-rpc都是通过HTTP传输的。HTTP既支持长连接，也支持短连接。<br>rpc使用的则是长连接，不需要频繁的建立连接，RESTFUL API使用的是短连接，效率低下，而且在数据传输上，restful api传输了很多无用信息，比如那些header，对于rpc来说却没有。</p><p>所以为什么要用rpc调用？</p><p>因为良好的rpc调用是面向服务的封装，针对服务的可用性和效率等都做了优化。单纯使用http调用则缺少了这些特性。</p><p>简单来说成熟的rpc库相对http容器，跟多的是封装了“服务发现”，”错误重试”一类面向服务的高级特性。可以这么理解，rpc框架是面向服务的更高级的封装。如果把一个http server容器上封装一层服务发现和函数代理调用，那它就已经可以做一个rpc框架了。</p><ol><li>性能，不出很大的意外，http服务都是百毫秒级的，而thrift则能轻松搞到几十ms，别小看这点时间，这少一点，用户的痛苦就会小很多。。。，那么为什么性能差？http需要dns，这来回的网络消耗不是盖的，对于MT的服务是完全没有必要的开销；</li><li>扩展性，http的服务发现纯粹是靠dns做的，加机器需要配置一下dns，这要惊动运维，还有等漫长的roll out时间，与基于zookeeper的自动发现的thrift比，毫无优势可言；</li><li>管理麻烦，http配置的域名需要管理起来也是麻烦事，对外提供统一服务，内部也需要统一一下域名的命名</li><li>RPC:远程过程调用。RPC的核心并不在于使用什么协议。RPC的目的是让你在本地调用远程的方法，而对你来说这个调用是透明的，你并不知道这个调用的方法是部署哪里。通过RPC能解耦服务，这才是使用RPC的真正目的。RPC的原理主要用到了动态代理模式，至于http协议，只是传输协议而已。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;web端的发展历程&quot;&gt;&lt;a href=&quot;#web端的发展历程&quot; class=&quot;headerlink&quot; title=&quot;web端的发展历程&quot;&gt;&lt;/a&gt;web端的发展历程&lt;/h4&gt;&lt;p&gt;如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2017/08/05/SpringM
      
    
    </summary>
    
    
      <category term="spring" scheme="http://xu1009.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Maven实战</title>
    <link href="http://xu1009.github.io/2017/07/29/Maven%E5%AE%9E%E6%88%98/"/>
    <id>http://xu1009.github.io/2017/07/29/Maven实战/</id>
    <published>2017-07-29T08:13:32.000Z</published>
    <updated>2018-08-27T11:30:41.298Z</updated>
    
    <content type="html"><![CDATA[<ul><li>构建是什么，build这个不是IDE帮我们完成的吗，为啥需要maven</li><li>平时用到的maven都是依赖管理工具和项目信息管理工具</li><li>maven有一个坐标系统准确定位每一个构建（artifact）</li><li>坐标系统就是按package来一级级传递的吧</li><li>构建工具有 maven ant ide make等</li><li>IDE都是手工的进行鼠标点击来完成编译、测试、代码生成，低效还容易出错。</li><li>make是最早的构建工具，有一个Makefile的脚本文件驱动，在Linux下比较好使。</li><li>Ant意思是another neat tool，构建工具，基本结构也是target和depends，没有依赖管理，可以借助Ivy管理依赖。</li><li>maven是声明式的，有很好的依赖管理。</li><li>maven可以创建内部的仓库服务器，中央仓库会有点慢而且，有些jar不一定有.使用nexus建立自己的maven仓库。</li><li>maven的坐标系统，就是groupid artifactid等</li><li>groupid artifactid version 依赖的基本坐标</li><li>type 依赖的类型，默认为jar</li><li>scope以来的范围，就是作用域</li><li>optional 标记依赖是否可选</li><li>exclusion 用来排除依赖传递性</li><li>依赖范围就是用来控制依赖与这三种classpath（编译、测试、运行）的关系</li><li><scope> </scope>有这几种依赖范围，</li><li>compile：编译依赖范围，这也是默认的依赖范围，三个阶段都可以。</li><li>test：测试依赖范围，只对测试依赖有效</li><li>provided：已提供依赖范围，只对编译和测试有效，运行无效。</li><li>runtime：测试和运行时有效</li><li>system：和provided一样，但是这个必须指定依赖的路径。</li><li>import：这个后续补上，没详细说</li><li>jar包冲突，maven有自己的依赖调解原则，第一原则是最近者优先，最先依赖的那个会被使用，如果路径长度是一样的就看依赖在pom文件中的顺序。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;构建是什么，build这个不是IDE帮我们完成的吗，为啥需要maven&lt;/li&gt;
&lt;li&gt;平时用到的maven都是依赖管理工具和项目信息管理工具&lt;/li&gt;
&lt;li&gt;maven有一个坐标系统准确定位每一个构建（artifact）&lt;/li&gt;
&lt;li&gt;坐标系统就是按p
      
    
    </summary>
    
    
      <category term="maven" scheme="http://xu1009.github.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>Mock与junit</title>
    <link href="http://xu1009.github.io/2017/07/19/Mock%E4%B8%8Ejunit/"/>
    <id>http://xu1009.github.io/2017/07/19/Mock与junit/</id>
    <published>2017-07-19T03:27:58.000Z</published>
    <updated>2018-08-27T11:30:41.299Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Mock junit" scheme="http://xu1009.github.io/tags/Mock-junit/"/>
    
  </entry>
  
  <entry>
    <title>深入分析JAVA WEB技术总结</title>
    <link href="http://xu1009.github.io/2017/07/15/%E6%B7%B1%E5%85%A5%E5%88%86%E6%9E%90JAVA-WEB%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
    <id>http://xu1009.github.io/2017/07/15/深入分析JAVA-WEB技术总结/</id>
    <published>2017-07-14T23:47:36.000Z</published>
    <updated>2018-08-27T11:30:41.351Z</updated>
    
    <content type="html"><![CDATA[<h5 id="DNS解析过程"><a href="#DNS解析过程" class="headerlink" title="DNS解析过程"></a>DNS解析过程</h5><ul><li>最先在浏览器缓存里面找</li><li>本地操作系统缓存</li><li>本地域名服务器</li><li>根服务器</li><li>解析完成之后会自动缓存这个结果<h5 id="域名解析方式"><a href="#域名解析方式" class="headerlink" title="域名解析方式"></a>域名解析方式</h5></li><li>A记录,指定URL所对应的IP地址</li><li>MX记录,将某个地址下的邮件服务器指向自己的mail server</li><li>CNAME记录,别名解析,为一个域名设置很多别名</li><li>NS记录,为某个域名指定DNS解析服务器</li><li>TXT记录,为域名设置说明<h5 id="JAVA-IO"><a href="#JAVA-IO" class="headerlink" title="JAVA IO"></a>JAVA IO</h5></li><li>基于字节的IO,基于字符的,基于磁盘的,基于网络的.</li><li>字节到字符需要解码,字符到字节需要编码,很透彻</li><li>所以在读取文件或者写入文件的时候需要指定编码解码方式,不指定就使用系统默认的编解码方式<h5 id="文件访问方式"><a href="#文件访问方式" class="headerlink" title="文件访问方式"></a>文件访问方式</h5></li><li>标准IO访问,调用操作系统操作文件的方法,这里涉及到高速缓存.</li><li>直接IO访问,不经过高速缓存,直接访问磁盘,这样会比较慢</li><li>同步IO,就是阻塞式的IO,必须等到读取或者写入完成之后,才能做其他事情</li><li>异步IO,非阻塞式,读取和写入时,当前线程不必等待,可以去处理其它事情.</li><li>内存映射,将磁盘一段内存空间映射到用户缓存空间,这样访问,<h5 id="同步-异步-阻塞-非阻塞"><a href="#同步-异步-阻塞-非阻塞" class="headerlink" title="同步 异步  阻塞  非阻塞"></a>同步 异步  阻塞  非阻塞</h5></li><li>同步就是一个任务序列的完成需要依赖另外一个任务时,只有等待被依赖的任务完成之后,依赖的任务才能完成,这是一种可靠的任务序列.</li><li>异步是不可靠的任务序列,他不必等待被依赖的任务完成,只是通知被依赖的任务要完成什么样的工作.</li><li>同步能够保证程序的可靠行,异步可以提升程序的性能,必须在可靠性和性能之间保持平衡.</li><li>阻塞是CPU停下来等待一个慢动作完成之后,才能执行其它任务.</li><li>非阻塞是CPU没必要停下来,非阻塞明显提高了CPU的利用率,带来的坏处就是线程之间的切换带来的开销.<h3 id="编码问题相关"><a href="#编码问题相关" class="headerlink" title="编码问题相关"></a>编码问题相关</h3></li><li>通俗的讲,计算机存储的基本单元是英语,其它语言必须通过一次翻译,翻译成英语才能和计算机通信,这叫做编码.<h5 id="一些编码方式简述"><a href="#一些编码方式简述" class="headerlink" title="一些编码方式简述"></a>一些编码方式简述</h5></li><li>ASCLL码,总共有128个,用一个字节的低7位表示,0-31表示换行 回车这些,32-126表示打印字符,可以通过键盘输入并且能够显示出来.</li><li>ISO-8859-1仍然是单字节编码,主要是用来弥补ASCLL码的不足,加了一些西欧语言字符,应用的十分广泛,总共有256个字节.</li><li>GB2312 中文编码字符集,使用双字节编码,就是比较少,才6000多个汉字.</li><li>GBK和GB2312兼容,增加了很多汉字,相当于GB2312的拓展,而且两者是兼容的.</li><li>GB18030 国家标准,但是用的不多.</li><li>UTF-16使用定长表示方法,不论什么字符都使用两个字节表示.</li><li>UTF-8采用变长编码,utf-16虽然在表示上非常方便,但是有些字符只需要一个字节表示就够了,没必要使用两个字节表示,所以这样就造成内存空间的的增大,十分不方便,UTF-8使用1-6个字节组成,</li><li>编码,解码问题主要是从字节到字符或者字符到字节的过程,Java内存使用的时utf-16编码,utf-16编码简单高效,utf-8多用于网络编码,节省流量,utf-16是顺序编码,这样会导致中间一个字节码坏掉之后影响之后的,而utf-8则不会,它会对单个字符进行校验,所以可靠性更高.<h4 id="Java-web中的编码和解码问题"><a href="#Java-web中的编码和解码问题" class="headerlink" title="Java web中的编码和解码问题"></a>Java web中的编码和解码问题</h4></li><li>首先网络中传输使用的是http协议,也就是socket,socket流是字节流,所以,要想在网络中传输,首先需要编码,从网络中获取到字节流之后再进行解码还原成我们需要的那种.</li><li>URI和QueryString的编解码还不一样,tomcat处理这个URL时,就是要解码,uri就是使用配置文件中的解码方式,connector中的URIEncoding决定了解码方式,queryString的话就是基本上按照header中的content type来解码的,需要配置tomcat中的useBodingEncodingForUri为true.</li><li>tomcat在解析post方式的表单数据时,解码方式是要按照header中的content type里面的charset属性,如果请求头中没有包含该属性的话,则会按照默认的iso-8859-1进行解码,如果提交的数据包含非ASCLL码的话就会出现乱码的现象.</li><li>返回给浏览器的数据也需要编码,浏览器根据,response中的header  charset进行解码的,如果没有这个响应头的话就按照HTML中指定的charset进行解码,如果仍然没有的话就按照默认的解码方式.<h4 id="Cookie-and-Session"><a href="#Cookie-and-Session" class="headerlink" title="Cookie and Session"></a>Cookie and Session</h4></li><li>其实这个没啥讲的，这个用的比较多的是在集群条件下的共享问题，session本质还是cookie，一种特殊的cookie，jsessionid = value<br>value是session的id，服务端会根据这个id去找session对象，这样就可以在传输中节省了大量带宽，传输的只是id了，而且安全性比cookie高，cookie还就是在客户端存储有限制，但是session在服务端集群的条件下存在共享的问题，各有好处，现在用的都是分布式缓存来存储session，有一个订阅服务器去管理，这样就将存储和管理从服务器分离，减少了服务器的负担，可以有效控制session的安全性和cookie的数量。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;DNS解析过程&quot;&gt;&lt;a href=&quot;#DNS解析过程&quot; class=&quot;headerlink&quot; title=&quot;DNS解析过程&quot;&gt;&lt;/a&gt;DNS解析过程&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;最先在浏览器缓存里面找&lt;/li&gt;
&lt;li&gt;本地操作系统缓存&lt;/li&gt;
&lt;li&gt;本地域名服
      
    
    </summary>
    
    
      <category term="java web" scheme="http://xu1009.github.io/tags/java-web/"/>
    
  </entry>
  
  <entry>
    <title>JVM基础知识</title>
    <link href="http://xu1009.github.io/2017/07/15/JVM%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://xu1009.github.io/2017/07/15/JVM基础知识/</id>
    <published>2017-07-14T23:46:05.000Z</published>
    <updated>2018-08-27T11:30:41.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JVM运行时数据区域"><a href="#JVM运行时数据区域" class="headerlink" title="JVM运行时数据区域"></a>JVM运行时数据区域</h2><ul><li><strong>程序计数器</strong>   <code>线程独享</code>   程序计数器是一块内存较小的存储空间，可以看做当前线程所执行的字节码的行号指示器，字节码解释器工作时就是通过改变这个计数器值来选取下一条需要执行的字节码指令，线程执行的是Java方法的话，这个计数器记录的就是正在执行的字节码指令地址，如果时native方法，那么记录的就是空，该区域没有规定内存错误。</li><li><strong>Java虚拟机栈</strong> <code>线程独享</code>   生命周期和线程相同，每个方法创建时都会创建一个栈帧，用于存储局部变量表（存储了基本数据类型和对象引用类型）、操作数栈、动态链接、方法出口信息。栈帧在栈中的入栈出栈就是对应方法调用到执行的过程。</li><li><strong>本地方法栈</strong>   <code>线程独享</code>  这个和虚拟机栈一样功能，只不过虚拟机栈是为Java方法服务，这个是为本地方法服务的，即为native方法服务。</li><li><strong>Java堆</strong>   <code>线程共享</code>   这个方法是JVM管理的主要区域，也称为GC堆，主要存储的时对象实例和数组。</li><li><strong>方法区域</strong>   <code>线程共享</code>   主要存储的是类信息、常量、静态变量，垃圾回收主要对这个区域中的运行时常量池的回收和对类型的卸载。<h2 id="对象内存布局和定位"><a href="#对象内存布局和定位" class="headerlink" title="对象内存布局和定位"></a>对象内存布局和定位</h2></li><li>对象在内存中的存储布局分为3块区域：对象头、实例数据、对齐和填充</li><li>对象定位有两种，一种时句柄，一种是直接指针，句柄的话就是堆中有一个句柄池存储各个对象实例的地址，栈中的reference可以通过句柄访问，这种访问慢，但是对象地址变化的话，只需要改变句柄池不需要操作栈中的内容，直接指针的话就是访问的比较快，直接操作的对象<h2 id="JVM垃圾回收机制"><a href="#JVM垃圾回收机制" class="headerlink" title="JVM垃圾回收机制"></a>JVM垃圾回收机制</h2><h5 id="判断什么是垃圾"><a href="#判断什么是垃圾" class="headerlink" title="判断什么是垃圾"></a>判断什么是垃圾</h5></li><li><strong>引用计数算法</strong>   引用计数算法是jdk1.2之前的算法，算法的主要过程是，当一个对象被引用时计数器就会加1，引用失效时就减1，最后当这个计数器为0时就会被确认成垃圾，这个有个问题就是无法回收互相引用的对象。</li><li><strong>可达性分析算法</strong> 可达性分析算法也是目前用来判断对象是否为垃圾的一个算法，它使用图论的知识，他会从一系列GC ROOTS起点向下搜索，当一个节点到GC ROOTS没用任何引用链相连，那么那就会认为他是可回收的。可作为GC ROOTS的对象有java虚拟机栈中的引用的对象，方法区域中静态和常量引用的对象，本地方法栈中的JNI引用的对象，这个算法分析时必须停止其它所有线程。<h5 id="引用分类"><a href="#引用分类" class="headerlink" title="引用分类"></a>引用分类</h5></li><li><strong>强引用</strong>   也是平时最常用的引用，这类引用，只要还存在，垃圾收集器就永远不会回收它，及时出现内存溢出。</li><li><strong>软引用</strong>    当内存不够时才会回收它，比如用做缓存，描述还有用但是非必要对象。</li><li><strong>弱引用</strong>   比软引用还要弱的引用，不管内存是否充足都会被回收掉，   如果这个对象是偶尔的使用，并且希望在使用时随时就能获取到，但又不想影响此对象的垃圾收集，那么你应该用 Weak Reference 来记住此对象。</li><li><strong>虚引用</strong>   也叫幽灵引用，最弱的一种引用关系，无法通过虚引用获取一个对象实例，为一个对象设置虚引用关联的唯一目的就是，当该对象被回收时收到一个系统通知。<h5 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h5></li><li><strong>标记清除算法</strong>    标记清除算法两个过程，一个是标记，一个是清除，这个算法是最基础的垃圾收集算法，主要有两个缺点，一个是标记和清除的效率都很低，另一个是标记清除导致内存碎片，当存储大对象时，由于找不到连续的存储空间，会触发另一次收集。</li><li><strong>复制算法</strong>    为了解决效率的问题，这个算法主要是将内存分区，一个是用来使用，另一个用来存储，现在商业虚拟机都是分为Eden、from survivor、to survivor，比例时8:1:1，Eden和from survivor用来使用，将存活的对象复制到to survivor，然后回收那些垃圾，当存活的对象大于to   survivor的空间时，那些对象会进入老年代。</li><li><strong>标记整理算法</strong>   存活的对象向一边移动，这样就解决了内存碎片的问题。</li><li><strong>分代收集算法</strong>    现在使用大部分都是这个算法，根据新生代和老年代选择合适的算法收集，比如G1收集器使用的就是这个算法。<h5 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h5></li><li><strong>serial收集器</strong>   单线程收集器，收集器采用复制算法，所以回收的对象时新生代的对象，收集的时候必须停止其它所有线程，也就是stop the  world直到它收集结束，这个时间也就是停顿时间，<code>简单高效，多用于client模式下的新生代收集器，由于是一个线程，就避免了切换线程所带来的开销，所以在client模式下是一个很好的选择</code></li><li><strong>parnew收集器</strong>     <code>serial收集器的多线程版本，其它没啥区别，只是在使用复制算法的时候使用了多线程，在单核cpu的情况下，由于切换线程带来的开销，收集的效率还不如serial，收集器收集期间还是需要停止其它所有线程</code></li><li><strong>parallel scavenge收集器</strong>  <code>并行的多线程收集器</code>关注的不是停顿时间，关注的时吞吐量，这种适合那些在后台运算不要交互的任务，还有就是他能自适应调整，这也是和parnew的区别。</li><li><strong>serialold收集器</strong>  <code>serial收集器的老年代版本</code></li><li><strong>paraell old收集器</strong>  <code>parnew收集器的老年代版本</code></li><li><strong>CMS收集器</strong>   <code>使用标记清除算法，实现了并发收集，就是在收集期间其它用户线程不会停止，GC线程和用户线程交替运行，</code>缺点是并发收集对cpu资源比较敏感，cpu还要在运行用户线程的同时还要分出一部分去收集，当cpu负荷比较大时cms算法会对程序有很大影响，还有就是无法收集浮动垃圾，然后就是采用标记清除算法的缺点，该收集主要包括四个过程：初始标记、并发标记、重新标记、并发清除。</li><li><strong>G1收集器</strong>    当前最新的垃圾收集器，主要过程是初始标记、并发标记、最终标记、筛选回收。分代收集、可预测的停顿、还有就是G1之前的收集算法进行收集的范围都是整个老年代或者新生代，G1则是把内存分为若干个大小相等的region，G1跟踪每个region里面垃圾堆积的价值大小，在后台维护一个优先级列表，每次都会回收价值最大的那个region。<h5 id="内存分配和回收策略"><a href="#内存分配和回收策略" class="headerlink" title="内存分配和回收策略"></a>内存分配和回收策略</h5></li><li>大多数情况下，对象在新生代Eden分配，当Eden没有足够的空间进行分配时，就会触发一次minor GC。<h6 id="对象进入老年代的情况"><a href="#对象进入老年代的情况" class="headerlink" title="对象进入老年代的情况"></a>对象进入老年代的情况</h6></li><li>大对象直接进入老年代，JVM提供一个专门设置这个阈值的参数，超过这个阈值的参数直接进入老年代</li><li>长期存活的对象进入老年代，对象年龄是在survivor没熬过一次minor GC就加1，具体超过多少，也有一个JVM阈值可以设置。</li><li>相同年龄的对象总和大于survivor空间的一半，那大于等于这个年龄的对象进入老年代。</li><li>一次minor GC之后，存活的对象进入survivor，最后无法容纳的进入老年代。<h5 id="一些JVM指令和可视化工具"><a href="#一些JVM指令和可视化工具" class="headerlink" title="一些JVM指令和可视化工具"></a>一些JVM指令和可视化工具</h5></li><li>这些都是为了深入观察jvm，比如堆栈，新生代，老年代，线程等，自带的命令行工具，比如jps显示JVM中的进程，jmap生成heap转储快照，jstack生成线程的快照。</li><li>可视化工具jconsole和visualVM，<h5 id="有关JVM参数设置问题"><a href="#有关JVM参数设置问题" class="headerlink" title="有关JVM参数设置问题"></a>有关JVM参数设置问题</h5></li><li>Xmx最大堆内存,通常和Xms搭配使用,配置堆内存的,Xmn配置新生代的内存.<h5 id="类文件结构"><a href="#类文件结构" class="headerlink" title="类文件结构"></a>类文件结构</h5></li><li>.class文件,也就是字节码文件,是JVM想要实现语言无关,已经是平台无关了,JVM不和语言绑定,他只和字节码文件相关联,任何其它语言都可以使用JVM作为语言的产品交付媒介,只要这些语言的编译器能够生成符合JVM要求的字节码文件规范.</li><li>class采用一种伪结构来存储数据,这种结构中只有无符号数和表两种类型数据.</li><li>class文件开头是4个字节的魔数,该数标志该文件是否能被JVM接受,很多文件存储标准中都有魔数来进行身份识别.Java中class文件的魔数是咖啡宝贝,紧接着4个字节是class版本号,也就是jdk版本号,低版本jdk不能执行高版本的字节码文件.</li><li>常量池包含了字面量和符号引用.</li><li>再接着是访问标志,用于识别这是类还是接口,是否定义为public,是否定义为abstract,是否被final修饰等.</li><li>类索引,父类索引,接口索引集合,这三项数据来确定这个类的继承关系.这三项都是用于缺点权限定名.</li><li>字段表集合,用于描述接口或者类中声明的变量.</li><li>方法表集合,用于描述接口或者类中声明的方法<h5 id="虚拟机类加载机制"><a href="#虚拟机类加载机制" class="headerlink" title="虚拟机类加载机制"></a>虚拟机类加载机制</h5></li><li>Java类的加载,链接和初始化都是在程序运行期间完成的,虽然会增加开销,但是提高了灵活性.</li><li>类整个生命周期包括:加载 — 验证— 准备—解析— 初始化—使用—卸载</li><li><strong>加载</strong>   通过类权限定名获取该类的二进制字节流,将这个字节流所代表的静态存储结构转化为方法区域的运行时数据结构,在内存中生成一个代表该类的对象.</li><li><strong>验证</strong>   确保class文件字节流中包含的信息符合当前虚拟机的要求,包括,文件格式验证,元数据验证,字节码验证,符号引用验证.</li><li><strong>准备</strong>    正式为类变量分配内存并设置类变量初始值.</li><li><strong>解析</strong>    解析是将符号引用替换为直接引用.</li><li><strong>初始化</strong>   类加载的最后一步,这里才真正执行类中的Java代码,之前分配的变量都是初始值,现在才是赋值真正的.<h6 id="加载过程详述"><a href="#加载过程详述" class="headerlink" title="加载过程详述"></a>加载过程详述</h6></li><li>这个加载就是前面所说的步骤中的第一步,通过类全限定名获取类的二进制流,这个在Java中是放到JVM之外了,而这个代码模块被称为<code>类加载器</code></li><li>判断两个类是否相等,必须在同一个类加载器加载的前提下判断才有意义.</li><li><strong>双亲委派模型</strong>     Java中分为两种类加载器,一种是启动类加载器还有就是其它,启动类加载器是在JVM内部,其它独立于jvm.</li><li><code>启动类加载器</code>   bootstrap classloader,这个会将Javahome/lib目录下的被jvm识别的类库加载到虚拟机</li><li><code>拓展类加载器</code>  extension classloader,负责加载Javahome/lib/ext中的类库,</li><li><code>应用程序类加载器</code>  application classloader,负责加载用户路径上的类库.</li><li><code>双亲委派模型</code>  表示类加载器之间的层次关系,要求除了启动类加载器之外,其它所有类加载器都要有自己的父类加载器,他们之间不是以继承的关系而是组合的关系.</li><li><code>双亲委派模型工作过程</code>   当一个类加载器收到类加载请求时,他不会自己加载,而是将这个请求传给自己的父类,这样依次向上,最后到了启动类加载器,如果启动类加载器无法加载,再向下传递.这个模型的好处就是类随着他的类加载器一起具备了一种带有优先级的层次关系.<h5 id="JVM执行引擎"><a href="#JVM执行引擎" class="headerlink" title="JVM执行引擎"></a>JVM执行引擎</h5></li><li>Java虚拟机栈存储的是栈帧,栈帧存储了局部变量表,操作数栈,动态链接和方法返回地址等信息.</li><li><code>局部变量表</code>    这个存放了基本类型和对象引用,局部变量表以变量槽为最小单位.</li><li><code>操作数栈</code>    这个是后入先出的栈<h6 id="Tomcat的类加载器"><a href="#Tomcat的类加载器" class="headerlink" title="Tomcat的类加载器"></a>Tomcat的类加载器</h6></li><li>有很多类加载器,一个是分离一个是共享,多级类加载器.<h5 id="Java优化"><a href="#Java优化" class="headerlink" title="Java优化"></a>Java优化</h5></li></ul><h5 id="Java并发相关"><a href="#Java并发相关" class="headerlink" title="Java并发相关"></a>Java并发相关</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JVM运行时数据区域&quot;&gt;&lt;a href=&quot;#JVM运行时数据区域&quot; class=&quot;headerlink&quot; title=&quot;JVM运行时数据区域&quot;&gt;&lt;/a&gt;JVM运行时数据区域&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;程序计数器&lt;/strong&gt;   &lt;code&gt;线
      
    
    </summary>
    
    
      <category term="JVM" scheme="http://xu1009.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL相关基础知识</title>
    <link href="http://xu1009.github.io/2017/07/02/MYSQL%E7%9B%B8%E5%85%B3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://xu1009.github.io/2017/07/02/MYSQL相关基础知识/</id>
    <published>2017-07-02T10:19:47.000Z</published>
    <updated>2018-08-27T11:30:41.292Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一些基本知识"><a href="#一些基本知识" class="headerlink" title="一些基本知识"></a>一些基本知识</h3><ul><li>SELECT * FROM TABLE1 LEFT JOIN TABLE2 ON …</li><li><p>left join on是查询左边所有右边满足条件的记录如下所示语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> p.FirstName, p.LastName, a.City, a.State  <span class="keyword">FROM</span> Person p <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Address a <span class="keyword">on</span> p.PersonId = a.PersonId;</span><br></pre></td></tr></table></figure></li><li><p>RIGHT JOIN ON 与其对应 查询的是右边所有，左边满足条件的记录，比如上述查询等效如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> p.FirstName, p.LastName, a.City, a.State  <span class="keyword">FROM</span>  Address a <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span>  Person p <span class="keyword">on</span> p.PersonId = a.PersonId;</span><br></pre></td></tr></table></figure></li><li><p>DISTINCT 是去除查询的结果集中重复的元素</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> salary <span class="keyword">FROM</span> <span class="keyword">TABLE</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="/2017/07/02/MYSQL相关基础知识/dis.jpg" alt="distinct的用法"></p><ul><li>IN操作符如下用法<br><img src="/2017/07/02/MYSQL相关基础知识/in.jpg" alt="in操作符"><br>其中要是查找不在其中的就是加个NOT IN 这样就可以找到补集</li><li>between语句<br><img src="/2017/07/02/MYSQL相关基础知识/between.jpg" alt="between语句用法"><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3></li><li>inner join是内连接，关键字在表中存在至少一个匹配时返回行，没有匹配就不返回</li><li>left join和right join肯定有返回,left join是左边所有加上右边满足条件的，right join是右边所有加上左边满足条件的 </li><li>UNION 语句是将两个查询的结果合并，这个会去除重复的元素</li><li><p>union all 回列出所有元素</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span> <span class="keyword">FROM</span> C</span><br><span class="line"><span class="keyword">UNION</span> ALL</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span> <span class="keyword">FROM</span> B</span><br></pre></td></tr></table></figure></li><li><p>group by是按类分的最后返回的感觉是两个表的样子</p></li><li>分享一个细节就是使用IN的语句时，可以 in table，不过列需要对应<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> t_topics <span class="keyword">WHERE</span> (reply_count,user_id) <span class="keyword">IN</span> (<span class="keyword">SELECT</span> user_id <span class="keyword">as</span> <span class="keyword">id</span>,<span class="keyword">max</span>(reply_count) <span class="keyword">as</span> <span class="keyword">max</span> <span class="keyword">from</span> t_topics <span class="keyword">GROUP</span> <span class="keyword">BY</span> user_id)</span><br></pre></td></tr></table></figure></li></ul><p>比如这个，in前面的列顺序必须和后面的一致</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一些基本知识&quot;&gt;&lt;a href=&quot;#一些基本知识&quot; class=&quot;headerlink&quot; title=&quot;一些基本知识&quot;&gt;&lt;/a&gt;一些基本知识&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;SELECT * FROM TABLE1 LEFT JOIN TABLE2 ON …&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="mysql" scheme="http://xu1009.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Nginx+tomcat+redis实现服务器集群和共享session</title>
    <link href="http://xu1009.github.io/2017/06/27/Nginx-tomcat-redis%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4%E5%92%8C%E5%85%B1%E4%BA%ABsession/"/>
    <id>http://xu1009.github.io/2017/06/27/Nginx-tomcat-redis实现服务器集群和共享session/</id>
    <published>2017-06-27T07:37:22.000Z</published>
    <updated>2018-08-27T11:30:41.303Z</updated>
    
    <content type="html"><![CDATA[<h2 id="有关Nginx"><a href="#有关Nginx" class="headerlink" title="有关Nginx"></a>有关Nginx</h2><ul><li>Nginx是一个代理服务器，主要功能是实现负载均衡和虚拟主机。</li><li>负载均衡就是使用Nginx作为代理服务器，用户请求首先是达到Nginx服务器，Nginx再根据实际情况将请求分流，分发到不同后端，这里就是后端实现了服务器集群，</li><li>下图就是负载均衡原理<br><img src="http://img.blog.csdn.net/20160612171735599?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="负载均衡原理"></li><li>有关Nginx的详细介绍可以参考该博客<a href="http://blog.csdn.net/hiyun9/article/details/51602428" target="_blank" rel="noopener">nginx详细介绍及配置</a><h2 id="有关redis"><a href="#有关redis" class="headerlink" title="有关redis"></a>有关redis</h2></li><li>redis是一个数据库，一个键值型数据库</li><li>redis将数据存储到内存，持久化到磁盘，所以读写速度很快</li><li>redis可以做关系型数据库的缓存，存储一些数据量比较小的数据<h2 id="Nginx负载均衡中的session问题"><a href="#Nginx负载均衡中的session问题" class="headerlink" title="Nginx负载均衡中的session问题"></a>Nginx负载均衡中的session问题</h2></li><li>负载均衡会将每次请求分发到不同的服务器</li><li>session保存在服务器端，sessionid在本地，这就会导致在这个服务器生成的session下次请求另一个服务器时导致无法识别的问题。</li><li>这就需要服务器集群之间共享session</li><li>最简单的问题就是登陆验证的时候，验证码保存到session中，验证码的生成是一个服务器，最后登陆验证的时候是另一个服务器，这就会导致验证失败。<h4 id="几种解决session共享的方法"><a href="#几种解决session共享的方法" class="headerlink" title="几种解决session共享的方法"></a>几种解决session共享的方法</h4></li></ul><ol><li><p>配置Nginx中neinx.conf的server选项，如下加入ip_hash,这样是对于同一个ip只会分发到一个服务器，这样其实失去了负载均衡的意思，而且Nginx获取的必须是用户真实的ip地址，也就是必须是最前端的服务器，配置如下</p><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    <span class="attribute">worker_connections  1024;</span></span><br><span class="line"><span class="attribute">&#125;</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">http &#123;</span></span><br><span class="line"><span class="attribute">    include       mime.types;</span></span><br><span class="line"><span class="attribute">    default_type  application/octet-stream;</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line"><span class="attribute">    #                  '$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line"><span class="attribute">    #                  '"$http_user_agent" "$http_x_forwarded_for"';</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">    #access_log  logs/access.log  main;</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">    sendfile        on;</span></span><br><span class="line"><span class="attribute">    #tcp_nopush     on;</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">    #keepalive_timeout  0;</span></span><br><span class="line"><span class="attribute">    keepalive_timeout  65;</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">    #gzip  on;</span></span><br><span class="line"><span class="attribute">upstream netitcast.com&#123;</span></span><br><span class="line"><span class="attribute">   server  127.0.0.1</span>:18080 weight=1;</span><br><span class="line">   <span class="attribute">server  127.0.0.1</span>:28080 weight=2;</span><br><span class="line">   <span class="attribute">ip_hash; #这里配置</span></span><br><span class="line"><span class="attribute">&#125;</span></span><br><span class="line"><span class="attribute">    server &#123;</span></span><br><span class="line"><span class="attribute">        listen       80;</span></span><br><span class="line"><span class="attribute">        server_name  localhost;</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">        #charset koi8-r;</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">        #access_log  logs/host.access.log  main;</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">        #location / &#123;</span></span><br><span class="line"><span class="attribute">        #    root   html;</span></span><br><span class="line"><span class="attribute">        #    index  index.html index.htm;</span></span><br><span class="line"><span class="attribute">        #&#125;</span></span><br><span class="line"><span class="attribute">location / &#123;</span></span><br><span class="line"><span class="attribute">proxy_pass  http</span>://netitcast<span class="variable">.com</span>;</span><br><span class="line"><span class="attribute">proxy_redirect  default;</span></span><br><span class="line"><span class="attribute">&#125;</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">        #error_page  404              /404.html;</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">        # redirect server error pages to the static page /50x.html</span></span><br><span class="line"><span class="attribute">        #</span></span><br><span class="line"><span class="attribute">        error_page   500 502 503 504  /50x.html;</span></span><br><span class="line"><span class="attribute">        location = /50x.html &#123;</span></span><br><span class="line"><span class="attribute">            root   html;</span></span><br><span class="line"><span class="attribute">        &#125;</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">        # proxy the PHP scripts to Apache listening on 127.0.0.1</span>:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \<span class="variable">.php</span>$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    root           html;</span></span><br><span class="line">        <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">        <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">        <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache's document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx's one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">        <span class="comment">#    deny  all;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       8000;</span></span><br><span class="line">    <span class="comment">#    listen       somename:8080;</span></span><br><span class="line">    <span class="comment">#    server_name  somename  alias  another.alias;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       443 ssl;</span></span><br><span class="line">    <span class="comment">#    server_name  localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第二个就是使用redis存储session了</p><blockquote><p> 这里使用的是tomcat-redis-session-manager框架，该框架是基于tomcat服务器的，只需要在tomcat中加入tomcat-redis-session-1.0-SNAPSHOT.jar、jedis-2.7.2.jar、commons-pool2-2.0.jar三个包<br> 三个包的下载地址<a href="http://download.csdn.net/detail/u010870518/9585716" target="_blank" rel="noopener">点击下载</a>网上很多包不能用，这里是可以用的，不过是对于tomcat7</p></blockquote></li></ol><ul><li><p>修改Tomcat的conf/context.xml，加入redis的相关连接信息，配置如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"com.orangefunction.tomcat.redissessions.RedisSessionHandlerValve"</span> /&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">Manager</span> <span class="attr">className</span>=<span class="string">"com.orangefunction.tomcat.redissessions.RedisSessionManager"</span>  </span></span><br><span class="line"><span class="tag">  <span class="attr">host</span>=<span class="string">"localhost"</span>  </span></span><br><span class="line"><span class="tag">  <span class="attr">port</span>=<span class="string">"6379"</span>  </span></span><br><span class="line"><span class="tag">  <span class="attr">database</span>=<span class="string">"0"</span>  </span></span><br><span class="line"><span class="tag">  <span class="attr">maxInactiveInterval</span>=<span class="string">"60"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>这样就可以在新建session的时候将session存储到redis然后读取的时候从redis获取，redis是服务器集群的共享，<br>下图是原理<br><img src="http://img.blog.csdn.net/20160725171038125" alt="redis共享session的原理"></p></li><li>在默认的情况下Tomcat的Session管理，如果不进行设置的话是由Tomcat自带的tandardManager类进行控制的，我们可以根据这个类自定义一个Manager，主要重写的就是org.apache.catalina.session.ManagerBase里边的具体写的操作，<br>这也是tomcat-redis-session-manager的基本原理，将tomcat的session存储位置指向了Redis</li><li>RedisSessionManager继承了org.apache.catalina.session.ManagerBase并重写了add、findSession、createEmptySession、remove等方法，并将对session的增删改查操作指向了对Redis数据存储的操作</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;有关Nginx&quot;&gt;&lt;a href=&quot;#有关Nginx&quot; class=&quot;headerlink&quot; title=&quot;有关Nginx&quot;&gt;&lt;/a&gt;有关Nginx&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Nginx是一个代理服务器，主要功能是实现负载均衡和虚拟主机。&lt;/li&gt;
&lt;li&gt;负载均
      
    
    </summary>
    
    
      <category term="学习，Nginx，redis" scheme="http://xu1009.github.io/tags/%E5%AD%A6%E4%B9%A0%EF%BC%8CNginx%EF%BC%8Credis/"/>
    
  </entry>
  
</feed>
